

# Handle '/fight'
@bot.message_handler(commands=['fight'])
def send_welcome(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        return

    list_buttons = []
    isReady = True
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):
        if cuser.get('state') == 'WAIT':
            #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
            bot.send_message(message.chat.id, text='–¢—ã —Å–∞–º –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
            return

    counter_rabbit = 0
    counter_urban = 0
    for cuser in competition.find({'state': 'READY'}):
        if (cuser.get('band') == 'üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ'):
            counter_urban = counter_urban + 1
        if (cuser.get('band') == 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏'):
            counter_rabbit = counter_rabbit + 1

    if counter_urban >= 1 and counter_rabbit >= 1:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        
        myquery = {'state': 'READY'}
        newvalues = { '$set': { 'state': 'FIGHT' } }
        u = competition.update_many(myquery, newvalues)

        bot.send_message(message.chat.id, text='–ë–æ–π —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        bot.send_message(message.chat.id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–π—Ü–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–∑ –±–∞–Ω–¥!', reply_markup=getButtonsMenu(list_buttons) )

# '‚úÖ –ì–æ—Ç–æ–≤–æ'
@bot.message_handler(func=lambda message: message.text and '‚úÖ –ì–æ—Ç–æ–≤–æ' in message.text and message.chat.type == 'private', content_types=['text'])
def ok_message(message: Message):

    list_buttons = []
 
    isReady = True
    for cuser in competition.find({
                                    'login': message.from_user.username, 
                                    'state': 'WAIT'
                                    }):
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        isReady = False

    if isReady:
        bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        myquery = {'login': message.from_user.username, 
                     'state': 'WAIT'}
        newvalues = { '$set': { 'state': 'READY' } }
        u = competition.update_one(myquery, newvalues)
        bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ...', reply_markup=getButtonsMenu(list_buttons) )

# üé≤'‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ' 'üõ° –ó–∞—â–∏—Ç–∞' 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è'
@bot.message_handler(func=lambda message: message.text and message.text in ('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ', 'üõ° –ó–∞—â–∏—Ç–∞', 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')  and message.chat.type == 'private', content_types=['text'])
def chose_strategy_message(message: Message):

    etalone = []
    etalone.append('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ')
    etalone.append('üõ° –ó–∞—â–∏—Ç–∞')
    etalone.append('üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')

    real = []

    list_buttons = []
 
    isReplay = False
    isReady = False
    isBand = False
    isStrategy = False
    lenStr = 0
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True
        
        if cuser.get('band'):
            isBand = True

        if cuser.get('strategy'):
            isStrategy = True
            lenStr = len(cuser.get('strategy'))
            real = cuser.get('strategy')

    if lenStr >= 3:
        if not isBand:
            list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
            bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –±–∞–Ω–¥—É!', reply_markup=getButtonsMenu(list_buttons) )
        else:
            if isReady:
                #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
                list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
                bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )
            else:
                list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
                bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )
    elif  lenStr == 0:
        for x in etalone:
            if x == message.text:
                pass
            else:
                list_buttons.append(x)
        real.append(message.text)
        
        myquery = {'login': message.from_user.username, 
                                    '$or': [
                                                {'state': 'WAIT'},
                                                {'state': 'READY'}]    
                                    }
        newvalues = { '$set': { 'strategy': real } }
        u = competition.update_one(myquery, newvalues)
        bot.send_message(message.chat.id, text='–î–∞–ª—å—à–µ...', reply_markup=getButtonsMenu(list_buttons) )
    else: # 1 - 2
        real.append(message.text)
        myquery = {'login': message.from_user.username, 
                                    '$or': [
                                                {'state': 'WAIT'},
                                                {'state': 'READY'}]    
                                    }

        newvalues = { '$set': { 'strategy':  real} }
        u = competition.update_one(myquery, newvalues)

        for x in etalone:
            find = False
            for z in real:
                if z == x:
                    find = True;
                    break;
            if not find: list_buttons.append(x)
        if len(list_buttons) == 0:
            if not isBand:
                list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –±–∞–Ω–¥—É!', reply_markup=getButtonsMenu(list_buttons) )
            else:
                if isReady:
                    #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
                    list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
                    bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) ) 
                else:
                    list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
                    bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )      
        else:
            bot.send_message(message.chat.id, text='–î–∞–ª—å—à–µ... –ï—â–µ...', reply_markup=getButtonsMenu(list_buttons) )        

# üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è
@bot.message_handler(func=lambda message: message.text and 'üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è' in message.text and message.chat.type == 'private', content_types=['text'])
def strategy_message(message: Message):
        
    list_buttons = []
 
    isReplay = False
    isReady = False
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True

    if isReady:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
    
        bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        list_buttons.append('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ')
        list_buttons.append('üõ° –ó–∞—â–∏—Ç–∞')
        list_buttons.append('üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')
        bot.send_message(message.chat.id, text='–í—ã–±–∏—Ä–∞–π', reply_markup=getButtonsMenu(list_buttons) )

# üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ or üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏
@bot.message_handler(func=lambda message: message.text and message.text and message.text in ('üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ', 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏') and message.chat.type == 'private', content_types=['text'])
def my_band_message(message: Message):

    list_buttons = []
 
    isReplay = False
    isStrategy = False
    isReady = False
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('strategy'):
            isStrategy = True
        if cuser.get('state') == 'READY':
            isReady = True

    myquery = {'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }

    newvalues = { '$set': { 'band': message.text } }
    u = competition.update_one(myquery, newvalues)

    if not isStrategy:
        list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
        bot.send_message(message.chat.id, text='–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å–æ —Å–≤–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        if isReady:
            #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        
            bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ!', reply_markup=getButtonsMenu(list_buttons) )
        else:
            list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
            bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤!', reply_markup=getButtonsMenu(list_buttons) )

# ‚öñÔ∏è –ë–∞–Ω–¥–∞
@bot.message_handler(func=lambda message: message.text and '‚öñÔ∏è –ë–∞–Ω–¥–∞' in message.text  and message.chat.type == 'private', content_types=['text'])
def band_message(message: Message):

    list_buttons = []
 
    isReplay = False
    isBand = False
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('band'):
            isBand = True
        break

    if not isReplay:
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        bot.send_message(message.chat.id, text='–¢—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=getButtonsMenu(list_buttons) )

    else:
        if not isBand:
            list_buttons.append('üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ')
            list_buttons.append('üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏')
        if not cuser.get('strategy'):
            list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
            
        bot.send_message(message.chat.id, text='–í—ã–±–∏—Ä–∞–π!', reply_markup=getButtonsMenu(list_buttons) )

# '‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π'
@bot.message_handler(func=lambda message: message.text and '‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π' in message.text and message.chat.type == 'private', content_types=['text'])
def register_message(message: Message):
    
    list_buttons = []
    if not isRegisteredUserLogin(message.from_user.username):
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        bot.send_message(message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ë—Ä–æ—Å—å –º–Ω–µ —Å–≤–æ–∏ –ø–∏–ø-–±–æ–π –∏–ª–∏ –∏–¥–∏ –Ω–∞—Ñ–∏–≥!', reply_markup=getButtonsMenu(list_buttons))
        return

    isReplay = False
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]   
                                }):                                                 
        if cuser.get('state') == 'READY':
            list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
            bot.send_message(message.chat.id, text='–ë–æ–π –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω!', reply_markup=getButtonsMenu(list_buttons) )
            return
        isReplay = True
        

    if not isReplay:
        u = getUserByLogin(message.from_user.username)
        competition.insert_one({'login': message.from_user.username, 
                                'chat': message.chat.id,
                                'date': datetime.now().timestamp(), 
                                'state': 'WAIT',
                                'name': u.getName(),
                                'health': u.getHealth(),
                                'damage': u.getDamage(),
                                'armor': u.getArmor(),
                                'accuracy': u.getAccuracy(),
                                'agility': u.getAgility(),
                                'charisma': u.getCharisma(),
                                'bm': u.getBm(),                                
                                'strategy': None,
                                'band': None,
                                'killedBy': None})

        list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
        list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
        bot.send_message(message.chat.id, text=getResponseDialogFlow('sign_up_for_a_fight'), reply_markup=getButtonsMenu(list_buttons) )
    else:
        if not cuser.get('band'):
            list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
        if not cuser.get('strategy'):
            list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')

        bot.send_message(message.chat.id, text=getResponseDialogFlow('sign_up_replay'), reply_markup=getButtonsMenu(list_buttons) )

# Handle ü§º –í —Ä–∏–Ω–≥
@bot.message_handler(func=lambda message: message.text and 'ü§º –í —Ä–∏–Ω–≥' in message.text and message.chat.type == 'private', content_types=['text'])
def ring_message(message: Message):

    list_buttons = []

    isReplay = False
    isStrategy = False
    isReady = False
    isBand = False
    for cuser in competition.find({'login': message.from_user.username, 
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]   
                                }):                                                 
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True

        if cuser.get('strategy'):
            isStrategy = True

        if cuser.get('band'):
            isBand = True

        if isStrategy and isBand and len(cuser.get('strategy')) >= 3 and cuser.get('state') == 'WAIT':
            list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')     

        if cuser.get('state') == 'WAIT':
            if not cuser.get('band'):
                list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
            if not cuser.get('strategy') or len(cuser.get('strategy')) <3:
                list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
            break
            

    usersOnCompetition = 'ü§º –í —Ä–∏–Ω–≥–µ:\n\n'
    i = 0
    for cuser in competition.find({'$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]
                                        }):
        i = i + 1
        band = cuser.get("band")
        state = cuser.get('state')
        if state == 'WAIT':
            state = '‚è≥'
        elif state == 'READY':
            state = '‚úÖ'
        elif state == 'FIGHT':
            state = '‚öî'
        if not band:
            band = '‚ùî'

        usersOnCompetition = usersOnCompetition + f'{i}.{state} {band[0:1]} {cuser.get("name")} üìØ{cuser.get("bm")}\n'

    if i == 0:
        usersOnCompetition = '–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–∏–Ω–≥–µ! –ó–∞–ø–∏—à–∏—Å—å –ø–µ—Ä–≤—ã–º!\n'
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
    else:
        if (not isReplay):
            list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        usersOnCompetition = usersOnCompetition + '\n–ù–∞—á–∞—Ç—å –±–æ–π /fight\n' 
    
    usersOnCompetition = usersOnCompetition + '\n' 
    usersOnCompetition = usersOnCompetition + '‚è∞ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(datetime.now().timestamp())) +'\n'

    bot.send_message(message.chat.id, text=usersOnCompetition, reply_markup=getButtonsMenu(list_buttons) ) 


def fight():
    #logger.info('Calculate fight')

    bands = ['üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ', 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏']
    figthers_rabbit = []
    figthers_urban = []
    fighters = [figthers_rabbit, figthers_urban]
    max_damage = 0
    min_damage = 10000000
    max_armor = 0
    findFighters = False
    for fighter in competition.find({'state': 'FIGHT'}):
        if fighter.get('band') == 'üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ':
            figthers_urban.append(fighter)
        if fighter.get('band') == 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏':
            figthers_rabbit.append(fighter)
        if max_damage < int(str(fighter.get('damage')).split(' ')[0]): max_damage = int(str(fighter.get('damage')).split(' ')[0])
        if max_armor < int(str(fighter.get('armor')).split(' ')[0]): max_armor = int(str(fighter.get('armor')).split(' ')[0])
        if min_damage > int(str(fighter.get('damage')).split(' ')[0]): min_damage = int(str(fighter.get('damage')).split(' ')[0])
        findFighters = True

    if not findFighters:
        return

    # –ö–∞–∫—è –±–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–π

    band1 = random.sample(fighters,  1)[0]
    fighters.remove(band1)
    band2 = random.sample(fighters,  1)[0]
 
    first = band1
    second = band2

    bot.send_message(fighter.get('chat'), text=f'–ë–∞–Ω–¥–∞ <b>{band1[0].get("band")}</b> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–∞–ø–∞–ª–∞ –ø–µ—Ä–≤–æ–π!', parse_mode='HTML')

    killed = []
    j = 0
    
    while True:
        j = j + 1
        doExit = False
        if len(first) == 0 or len(second) == 0:
            break

        f1 = random.sample(first,  1)[0]
        f2 = random.sample(second,  1)[0]         

        health1 = float(f1.get('health').split(' ')[0])
        health2 = float(f2.get('health').split(' ')[0])

        doBreak = False
        vs_log = '<b>‚öî –•–û–î –ë–ò–¢–í–´:</b>\n\n'
        vs_log = f'‚ù§{f1.get("health")} <b>{f1.get("band")[0:1]} {f1.get("name")}</b>\nvs\n‚ù§{f2.get("health")} <b>{f2.get("band")[0:1]} {f2.get("name")}</b>\n\n'
        damage = 0

        for i in range(0, 3):
            strategy1 = f1.get('strategy')[i]
            strategy2 = f2.get('strategy')[i]

            damage1 = float(str(f1.get('damage')).split(' ')[0])
            damage2 = float(str(f2.get('damage')).split(' ')[0])

            armor1 = float(str(f1.get('armor')).split(' ')[0])
            armor2 = float(str(f2.get('armor')).split(' ')[0])
            fight_str = ''


            # ‚öî 1024 vs ‚öî 800
            # üõ° 276  vs üõ° 300
            # ‚ù§ 650  vs ‚ù§ 500

            #1 - 1024

            #1 - 800


            if strategy1 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    damage1 = damage1 * 1
                    damage2 = damage2 * 1
                    fight_str = '‚öî‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    damage1 = damage1 * 1
                    armor2 = armor2 * 4
                    fight_str = '‚öîüõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    damage2 = damage2 * 0
                    fight_str = '‚öîüòé'
            if strategy1 == 'üõ° –ó–∞—â–∏—Ç–∞':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    armor1 = armor1 * 4
                    damage2 = damage2 * 1
                    fight_str = 'üõ°‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    armor1 = armor1 * 4
                    armor2 = armor2 * 4
                    fight_str = 'üõ°üõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    armor2 = armor2 * 0  
                    fight_str = 'üõ°üòé'
            if strategy1 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    damage2 = damage2 * 0
                    fight_str = 'üòé‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    armor2 = armor2 * 0
                    fight_str = 'üòéüõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    armor1 = armor1 * random.random()  
                    armor2 = armor2 * random.random()  
                    damage1 = damage1 * random.random()  
                    damage2 = damage2 * random.random()  
                    fight_str = 'üòéüòé'

            # health1 = health1 -  ( (–£—Ä–æ–Ω2-–ó–∞—â–∏—Ç–∞1) / –ú–∞—Ö–£—Ä–æ–Ω) * –ú–∏–Ω–£—Ä–æ–Ω * 0.1)
            # health2 = health2 -  ( (–£—Ä–æ–Ω1-–ó–∞—â–∏—Ç–∞2) / –ú–∞—Ö–£—Ä–æ–Ω) * –ú–∏–Ω–£—Ä–æ–Ω * 0.1)
            #
            # '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ', 'üõ° –ó–∞—â–∏—Ç–∞', 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è'

            # print(f'{j} health1  = {health1} -  ( ({damage2}-{armor1}) / {max_damage}) * {min_damage} = {health1}: {(damage2-armor1)/max_damage*min_damage*0.1})')
            # print(f'{j} health2  = {health2} -  ( ({damage1}-{armor2}) / {max_damage}) * {min_damage} = {health1}: {(damage1-armor2)/max_damage*min_damage*0.1})')
            dmg1 = (damage2-armor1)/max_damage*min_damage*0.35
            dmg2 = (damage1-armor2)/max_damage*min_damage*0.35
            
            if int(dmg1) > int(dmg2):
                damage = dmg1-dmg2
                health2 = health2 - damage
                f2.update({'health': str(int(health2))})
                vs_log = vs_log + f'{fight_str} ‚ù§{f2.get("health")} üí•{str(int(damage))} <b>{f1.get("band")[0:1]} {f1.get("name")}</b> {getResponseDialogFlow("you_win")}\n'
                if int(f2.get("health")) <= 0:
                    killed.append(f2)
                    second.remove(f2)
                    f2.update({'killedBy': f'{f1.get("band")[0:1]} {f1.get("name")}'})
                    break
            elif int(dmg1) == int(dmg2): 
                damage = 0
                vs_log = vs_log + f'{fight_str} {getResponseDialogFlow("draw_competition")}\n'
            else:
                damage = dmg2-dmg1
                health1 = health1 - damage
                f1.update({'health': str(int(health1))})
                vs_log = vs_log + f'{fight_str} ‚ù§{f1.get("health")} üí•{str(int(damage))} <b>{f2.get("band")[0:1]} {f2.get("name")}</b> {getResponseDialogFlow("you_win")}\n'
                if int(f1.get("health")) <= 0:
                    killed.append(f1)
                    first.remove(f1)
                    f1.update({'killedBy': f'{f2.get("band")[0:1]} {f2.get("name")}'})
                    break

        if int(f1.get('health')) <= 0:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'‚ò†Ô∏è {f1.get("health")} <b>{f1.get("band")[0:1]} {f1.get("name")}</b> {getResponseDialogFlow("you_deadman")}\n'
        elif int(f2.get('health')) <= 0:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'‚ò†Ô∏è {f2.get("health")} <b>{f2.get("band")[0:1]} {f2.get("name")}</b> {getResponseDialogFlow("you_deadman")}\n'
        else:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'{getResponseDialogFlow("draw_competition")}\n'

        send_messages_big(chat_id = f1.get('chat'), text=vs_log)
        send_messages_big(chat_id = f2.get('chat'), text=vs_log)
        time.sleep(5)

    fight_log = '<b>–ò–¢–û–ì–ò –ë–û–Ø:</b>\n\n'
 
    winners = []
    if len(first) == 0:
        winners = second 
    if len(second) == 0:
        winners = first
    
    if (len(winners)>0):
        fight_log = fight_log + f'–ü–æ–±–µ–¥–∏–ª–∞ –±–∞–Ω–¥–∞ <b>{winners[0].get("band")}</b>\n'
        m = 0
        for winFigther in winners:
            m = m + 1
            fight_log = fight_log + f'{m}. ‚ù§{winFigther.get("health")} <b>{winFigther.get("band")[0:1]} {winFigther.get("name")}</b> \n'
    else:
        fight_log = fight_log + f'–í–°–ï –£–ú–ï–†–õ–ò!\n'

    fight_log = fight_log + f'\n'
    z = 0
    for deadman in killed:
        z = z+1
        fight_log = fight_log + f'{z}. ‚ò†Ô∏è{deadman.get("health")} <b>{deadman.get("band")[0:1]} {deadman.get("name")}</b> —É–±–∏—Ç –±–æ–π—Ü–æ–º <b>{deadman.get("killedBy")}</b>\n'

    fight_log = fight_log + f'\n'
    fight_log = fight_log + '‚è∞ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(datetime.now().timestamp())) +'\n'

    for fighter in competition.find({'state': 'FIGHT'}):
        send_messages_big(chat_id = fighter.get('chat'), text=fight_log)

    z = 0
    for deadman in killed:
        z = z+1
        myquery = { 'login': deadman.get('login'), 'state' : 'FIGHT'}
        newvalues = { '$set': { 'state': 'CANCEL', 'health': deadman.get('health'), 'killedBy': deadman.get('killedBy') } }
        u = competition.update_one(myquery, newvalues)

    for winner in winners:  
        myquery = { 'login': winner.get('login'), 'state' : 'FIGHT'}
        newvalues = { '$set': { 'state': 'CANCEL', 'health': winner.get('health') } }
        u = competition.update_one(myquery, newvalues)   


def fight_job():
    while True:
        fight()
        time.sleep(20)

