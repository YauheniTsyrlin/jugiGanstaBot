#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import config
import users 
import wariors
import tools
import speech
import dialogflow
import matplot

import logging
import ssl
from mem_top import mem_top

from aiohttp import web
from yandex_geocoder import Client
import pymorphy2

import telebot
from telebot import apihelper
from telebot import types
from telebot.types import Message
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import time
from datetime import datetime
from datetime import timedelta
from dateutil.parser import parse
import timezonefinder, pytz

import threading
from multiprocessing import Process

import sys
import json
import requests

import random
from random import randrange

import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["jugidb"]
registered_users = mydb["users"]
tg_users        = mydb["tg_users"]
registered_wariors = mydb["wariors"]
battle          = mydb["battle"]
competition     = mydb["competition"]
settings        = mydb["settings"]
pending_messages = mydb["pending_messages"]
plan_raids      = mydb["rades"]
dungeons        = mydb["dungeons"]
report_raids    = mydb["report_raids"]
man_of_day      = mydb["man_of_day"]
pip_history     = mydb["pip_history"]


flexFlag = False
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
bot = telebot.TeleBot(config.TOKEN)

USERS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
for x in registered_users.find():
    USERS_ARR.append(users.importUser(x))

TG_USERS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
for x in tg_users.find():
    TG_USERS_ARR.append(x)

WARIORS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—É—Å—Ç–æ—à–∏
for x in registered_wariors.find():
    WARIORS_ARR.append(wariors.importWarior(x))

SETTINGS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
for setting in settings.find():
    SETTINGS_ARR.append(setting)

INFECT_PROBABILITY = 0
acc_koronavirus = 'ü¶á –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å'

def getSetting(code: str, name=None, value=None):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ """
    result = settings.find_one({'code': code})
    if (result):
        if name:
            for arr in result.get('value'):
                if arr['name'] == name:
                    return arr['value'] 
        elif value:
            for arr in result.get('value'):
                if arr['value'] == value:
                    return arr['name'] 

        else:
            return result.get('value')

def check_and_register_tg_user(tg_login: str):
    user = getUserByLogin(tg_login)
    if user: 
        return
    else:
        if getTgUser(tg_login) == None:
            row = {}
            row.update({'createdate' :datetime.now().timestamp()})
            row.update({'login' : tg_login})
            row.update({'timeban' : None})
            newvalues = { "$set": row }
            tg_users.insert_one(row)

            TG_USERS_ARR.clear()
            for x in tg_users.find():
                TG_USERS_ARR.append(x)

def getTgUser(login: str):
    for user in list(TG_USERS_ARR):
        if login == user["login"]: 
            return user
    return None

def isAdmin(login: str):
    for adm in getSetting(code='ADMINISTRATOR'):
        if login.lower() == adm.get('login').lower(): return True
    return False

def getAdminChat(login: str):
    for adm in getSetting(code='ADMINISTRATOR'):
        if login.lower() == adm.get('login').lower(): return adm.get('chat')
    return None

def isRegisteredUserName(name: str):
    name = tools.deEmojify(name)

    for user in list(USERS_ARR):
        if name.lower() == user.getName().lower(): return True
    return False

def isRegisteredUserLogin(login: str):
    for user in list(USERS_ARR):
        try:
            if login.lower() == user.getLogin().lower(): 
                return True
        except:
            pass        
    return False

def isGoatBoss(login: str):
    for goat in getSetting(code='GOATS_BANDS'):
        for boss in goat['boss']:
            if boss == login:
                return True
    return False

def isBandBoss(login: str):
    for goat in getSetting(code='GOATS_BANDS'):
        for band in goat['bands']:
            if band['boss'] == login:
                return True
    return False

def getMyBands(login: str):
    user = getUserByLogin(login)
    if not user:
        return None

    for goat in getSetting(code='GOATS_BANDS'):
        for band in goat['bands']:
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                return goat['bands']
    return None        

def getMyBandsName(login: str):
    user = getUserByLogin(login)
    if not user:
        return None
    
    for goat in getSetting(code='GOATS_BANDS'):
        find = False
        bands = []
        for band in goat['bands']:
            bands.append(band.get('name'))
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                find = True
        if find:
            return bands
    return None

def isGoatSecretChat(login: str, secretchat: str):
    goat = getMyGoat(login)
    if goat:
        if goat['chats']['secret'] == secretchat:
            return True
        else:
            return False    
    else:
        return False
    return True

def getMyGoat(login: str):
    user = getUserByLogin(login)
    if not user:
        return None

    for goat in getSetting(code='GOATS_BANDS'):
        for band in goat['bands']:
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                return goat
    return None 

def getMyGoatName(login: str):
    user = getUserByLogin(login)
    if not user:
        return None

    for goat in getSetting(code='GOATS_BANDS'):
        for band in goat['bands']:
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                return goat['name']

    return None 

def getBandUsers(band: str):
    users = []
    for user in list(USERS_ARR):
        if user.getBand() and band.lower() == user.getBand().lower(): 
            users.append(user)
    return users

def getGoatBands(goatName: str):
    for goat in getSetting(code='GOATS_BANDS'):
        if goat.get('name') == goatName:
            bands = []
            for band in goat['bands']:
                bands.append(band.get('name'))
            return bands
    return None 

def isUsersBand(login: str, band: str):
    bands = getMyBands(login)
    if bands == None: 
        return False
    for b in bands:
        if b.get('name') == band:
            return True
    return False

def hasAccessToWariors(login: str):
    user = getUserByLogin(login)
    if not user:
        return False

    for band in getSetting(code='BANDS_ACCESS_WARIORS'):
        if user.getBand() and band.get('band').lower() == user.getBand().lower():
            return True

    return False

def getUserByLogin(login: str):
    for user in list(USERS_ARR):
        try:
            if login.lower() == user.getLogin().lower(): 
                return user
        except:
            pass
    return None

def getUserByName(name: str):
    for user in list(USERS_ARR):
        if tools.deEmojify(name).lower().strip() == user.getName().lower().strip(): return user
    return None

def updateUser(newuser: users.User):
    if newuser == None:
        pass
    else:
        newvalues = { "$set": json.loads(newuser.toJSON()) }
        z = registered_users.update_one({"login": f"{newuser.getLogin()}"}, newvalues)
    USERS_ARR.clear()
    for x in registered_users.find():
        USERS_ARR.append(users.importUser(x))

def isUserBan(login: str):
    tz = config.SERVER_MSK_DIFF
    date_for = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)

    userIAm = getUserByLogin(login)
    if userIAm:
        if userIAm.getTimeBan():
            if date_for.timestamp() < userIAm.getTimeBan():
                return True
            else:
                userIAm.setTimeBan(None)
                updateUser(userIAm)
    else:
        tg_user = getTgUser(login)
        if tg_user and tg_user['timeban']:
            if date_for.timestamp() < tg_user['timeban']:
                return True
            else:
                tg_user.update({'timeban' : None})
                newvalues = { "$set": tg_user }
                result = tg_users.update_one({
                    'login': login
                    }, newvalues)

                TG_USERS_ARR.clear()
                for x in tg_users.find():
                    TG_USERS_ARR.append(x)

    return False

def updateTgUser(tg_user):
    newvalues = { "$set": tg_user }
    result = tg_users.update_one({
        'login': tg_user["login"]
        }, newvalues)

    TG_USERS_ARR.clear()
    for x in tg_users.find():
        TG_USERS_ARR.append(x)

def getWariorFraction(string: str):
    if (string.startswith('‚öôÔ∏è')):
        return '‚öôÔ∏è–£–±–µ–∂–∏—â–µ 4'
    elif (string.startswith('üî™')):
        return 'üî™–ì–æ–ª–æ–≤–æ—Ä–µ–∑—ã'
    elif (string.startswith('üí£')):
        return 'üí£–ú–µ–≥–∞—Ç–æ–Ω–Ω–∞'
    elif (string.startswith('‚öõÔ∏è')):
        return '‚öõÔ∏è–†–µ—Å–ø—É–±–ª–∏–∫–∞'
    elif (string.startswith('üëô')):
        return 'üëô–ö–ª—É–± –±–∏–∫–∏–Ω–∏'

def getWariorByName(name: str, fraction: str):
    name = tools.deEmojify(name).strip()
    for warior in list(WARIORS_ARR):
        if name == warior.getName().strip() and fraction == warior.getFraction(): 
            return warior
    return None

def isKnownWarior(name: str, fraction: str):
    for warior in list(WARIORS_ARR):
        if warior.getName() and name.lower().strip() == warior.getName().lower().strip() and warior.getFraction() == fraction: 
            return True
    return False

def update_warior(warior: wariors.Warior):
    if warior == None:
        pass
    else:
        if isKnownWarior(warior.getName(), warior.getFraction()):
            wariorToUpdate = getWariorByName(warior.getName(), warior.getFraction())
            updatedWarior = wariors.mergeWariors(warior, wariorToUpdate)
            newvalues = { "$set": json.loads(updatedWarior.toJSON()) }
            z = registered_wariors.update_one({
                "name": f"{updatedWarior.getName()}", 
                "fraction": f"{updatedWarior.getFraction()}"
                }, newvalues)
        else:
            registered_wariors.insert_one(json.loads(warior.toJSON()))

    WARIORS_ARR.clear()
    for x in registered_wariors.find():
        WARIORS_ARR.append(wariors.importWarior(x))
        
def get_raid_plan(raid_date, goat):
    plan_for_date = f'–ü–ª–∞–Ω —Ä–µ–π–¥–æ–≤ –Ω–∞ {time.strftime("%d.%m.%Y", time.gmtime( raid_date.timestamp() ))}\nüêê<b>{goat}</b>\n\n'
    find = False
    time_str = None
    for raid in plan_raids.find({
                                '$and' : 
                                [
                                    {
                                        'rade_date': {
                                        '$gte': (datetime.now() + timedelta(minutes=180)).timestamp(),
                                        '$lt': (raid_date.replace(hour=23, minute=59, second=59, microsecond=0)).timestamp(),
                                        }
                                    },
                                    {
                                        'goat': goat
                                    }
                                ]
                            }):

        t = datetime.fromtimestamp(raid.get('rade_date') ) 
        if not (time_str == t):
            plan_for_date = plan_for_date + f'<b>–†–µ–π–¥ –≤ {str(t.hour).zfill(2)}:{str(t.minute).zfill(2)}</b>\n'
            time_str = t

        plan_for_date = plan_for_date + f'{raid.get("rade_text")}\n'
        users_onraid = raid.get("users")
        if users_onraid == None or len(users_onraid) == 0:
            plan_for_date = plan_for_date + f'    –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n'
        else:
            i = 0
            for u in users_onraid:
                i = i + 1
                reg_usr = getUserByLogin(u)
                plan_for_date = plan_for_date + f'    {i}. {reg_usr.getName()}\n'
        
        find = True

    if find == False:
        plan_for_date = plan_for_date + '<b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–π–¥–æ–≤</b>'

    return plan_for_date

def setSetting(code: str, value: str):

    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ """
    myquery = { "code": code }
    newvalues = { "$set": { "value": json.dumps(value) } }
    u = settings.update_one(myquery, newvalues)

    SETTINGS_ARR.clear() # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    for setting in settings.find():
        SETTINGS_ARR.append(setting)
    return True

def getButtonsMenu(list_buttons):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    groups_names = []
    for group in list_buttons:
        groups_names.append(types.KeyboardButton(f'{group}'))
    markup.add(*groups_names)
    return markup

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

def write_json(data, filename = "./pips.json"):
    with open(filename, 'a', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def getResponseDialogFlow(message, text: str, event=None):
    if not text or '' == text.strip():
        text = '–≥–æ–ª–æ—Å!'

    if message:
        user = getUserByLogin(message.from_user.username)
        return dialogflow.getResponseDialogFlow(message.from_user.username, text, event, user, message)
    else:
        return dialogflow.getResponseDialogFlow('system_user', text, event, None, message)

def getResponseHuificator(text):
    morph = pymorphy2.MorphAnalyzer()
    report = ''
    words = text.split(' ')
    for word in words:
        p = morph.parse(word.replace('-—Ç–æ','').replace('.','').replace(',','').replace('!','').replace('?','').replace('(','').replace(')','').replace(':',''))[0]
        if 'VERB' in p.tag:
            pass
        elif '-—Ç–æ' in word:
            pass
        elif 'NOUN' in p.tag or 'ADJF' in p.tag or 'ADVB' in p.tag:
            word = p.word + '-' + tools.huificate(word)
        report = report + word + ' '
    return report

def censored(message):
    bot.delete_message(message.chat.id, message.message_id)
    id = random.sample(getSetting(code='STICKERS',name='CENSORSHIP'), 1)[0]['value']
    if len(id) > 40:
        bot.send_photo(message.chat.id, id)
    else:
        bot.send_sticker(message.chat.id, id)
    send_messages_big(message.chat.id, text=getResponseDialogFlow(message ,'shot_censorship').fulfillment_text)

def getUserSettingsName():
    result = []
    for sett in getSetting(code='USER_SETTINGS'):
        result.append(sett["name"])
    return result

def getUserSetting(login: str, name: str):
    user = getUserByLogin(login)
    for sett in user.getSettings():
        if sett["name"] == name:
            return sett
    return None

def addToUserHistory(user: users.User):
    row = {}
    date = datetime.fromtimestamp(user.getTimeUpdate()).replace(hour=0, minute=0, second=0, microsecond=0).timestamp()
    row.update({'date'    :date})
    row.update({'login'   :user.getLogin()})
    row.update({'damage'  :user.getDamage()})   #‚öî 
    row.update({'armor'   :user.getArmor()})    #üõ°
    row.update({'dzen'    :user.getDzen()})     #üèµ
    row.update({'force'   :user.getForce()})    #üí™
    row.update({'accuracy':user.getAccuracy()}) #üî´
    row.update({'health'  :user.getHealth()})   #‚ù§
    row.update({'charisma':user.getCharisma()}) #üó£
    row.update({'agility' :user.getAgility()})  #ü§∏üèΩ‚Äç
    row.update({'stamina' :user.getStamina()})  #üîã

    newvalues = { "$set": row }
    result = pip_history.update_one({'login': user.getLogin(), 'date': date}, newvalues)
    if result.matched_count < 1:
        pip_history.insert_one(row)

# Handle new_chat_members
@bot.message_handler(content_types=['new_chat_members', 'left_chat_members'])
def send_welcome_and_dismiss(message):
    response = getResponseDialogFlow(message, message.content_type).fulfillment_text
    if response:
        bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS',name='BOT_NEW_MEMBER'), 1)[0]['value'])
        bot.send_message(message.chat.id, text=response)
        
        goat = getMyGoat(message.from_user.username)
        if not isGoatSecretChat(message.from_user.username, message.chat.id):
            bot.send_photo(message.chat.id, random.sample(getSetting(code='STICKERS',name='NEW_MEMBER_IMG'), 1)[0]['value'])

# Handle inline_handler
@bot.inline_handler(lambda query: query.query)
def default_query(inline_query):
    if not hasAccessToWariors(inline_query.from_user.username):
        r = types.InlineQueryResultArticle(id=0, title = '–•—Ä–µ–Ω–∞ –Ω–∞–¥–æ? –¢—ã –Ω–µ –∏–∑ –Ω–∞—à–∏—Ö –±–∞–Ω–¥!', input_message_content=types.InputTextMessageContent(getResponseDialogFlow(inline_query.from_user.username, 'i_dont_know_you').fulfillment_text), description=getResponseDialogFlow(inline_query.from_user.username, 'i_dont_know_you').fulfillment_text)
        bot.answer_inline_query(inline_query.id, [r], cache_time=3060)
        return

    try:
            result = []
            i = 0
            for x in registered_wariors.find(
                {'$or':
                    [
                        {'name':
                            {'$regex':inline_query.query, '$options':'i'}
                        },
                        {'band':
                            {'$regex':inline_query.query, '$options':'i'}
                        }
                    ],
                    'timeUpdate':{'$gte': (datetime.now() - timedelta(days=28)).timestamp()  }
                }):
                warior = wariors.importWarior(x)
                r = types.InlineQueryResultArticle(id=i, title = f'{warior.getFractionSmall()}{warior.getName()}',  
                                                            input_message_content=types.InputTextMessageContent('–î–∂—É, –ø—Ä–æ—Ñ–∏–ª—å @'+warior.getName()), 
                                                            description=warior.getProfileInline())
                result.append(r)
                i = i + 1
            bot.answer_inline_query(inline_query.id, result, cache_time=30)
    except Exception as e:
        print(e)

@bot.message_handler(func=lambda message: message.text and ('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' == message.text))
def send_back_from_usset(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

    counter = pip_history.find({'login': message.from_user.username}).count()
    if counter == 0:
        bot.send_message(message.chat.id, text='–°–±—Ä–æ—Å—å –º–Ω–µ —Ö–æ—Ç—å –æ–¥–∏–Ω pip!')
        return
    N = 0
    if counter > 10:
        N = 10
    else:
        counter = 0
    cursor = pip_history.find({'login': message.from_user.username}).skip(counter - N)
    matplot.getPlot(cursor, message.from_user.username)
    img = open(config.PATH_IMAGE + f'plot_{message.from_user.username}.png', 'rb')
    bot.send_photo(message.chat.id, img)


@bot.message_handler(func=lambda message: message.text and ('–£—á–∞—Å—Ç–≤—É—é üë®‚Äç‚ù§Ô∏è‚Äçüë®!' in message.text or '–°–∞–º —Ç—ã –ø–∏–¥–æ—Ä üë®‚Äç‚ù§Ô∏è‚Äçüë®!' in message.text))
def send_back_from_usset(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        bot.send_message(message.chat.id, text='–ò–¥–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!')
        return

    user = getUserByLogin(message.from_user.username)
    setting = None
    for s in getSetting(code='USER_SETTINGS'):
        if s["name"] == 'üë®‚Äç‚ù§Ô∏è‚Äçüë®–£—á–∞—Å—Ç–Ω–∏–∫ "–ü–∏–¥–æ—Ä –¥–Ω—è"':
            setting = s

    if '–£—á–∞—Å—Ç–≤—É—é üë®‚Äç‚ù§Ô∏è‚Äçüë®!' in message.text:
        setting.update({'value': True})
    elif '–°–∞–º —Ç—ã –ø–∏–¥–æ—Ä üë®‚Äç‚ù§Ô∏è‚Äçüë®!' in message.text:
        setting.update({'value': False})

    user.addSettings(setting)
    updateUser(user)

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('üìã –û—Ç—á–µ—Ç', 'üìú –ü—Ä–æ—Ñ–∏–ª—å', f'‚è∞ –ü–ª–∞–Ω —Ä–µ–π–¥–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    bot.send_message(message.chat.id, text=user.getSettingsReport(), reply_markup=markup)

@bot.message_handler(func=lambda message: message.content_type == 'text' and message.text in getUserSettingsName())
def send_settings(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        bot.send_message(message.chat.id, text='–ò–¥–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!')
        return

    if message.text == 'üë®‚Äç‚ù§Ô∏è‚Äçüë®–£—á–∞—Å—Ç–Ω–∏–∫ "–ü–∏–¥–æ—Ä –¥–Ω—è"':
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add('–£—á–∞—Å—Ç–≤—É—é üë®‚Äç‚ù§Ô∏è‚Äçüë®!', '–°–∞–º —Ç—ã –ø–∏–¥–æ—Ä üë®‚Äç‚ù§Ô∏è‚Äçüë®!')
        bot.send_message(message.chat.id, text='–†–æ–∑—ã–≥—Ä—ã—à –≤ –æ–±—â–µ–º —á–∞—Ç–µ —Ä–æ–≤–Ω–æ –≤ 9:00\n–¢–≤–æ–π –≤—ã–±–æ—Ä...', reply_markup=markup)

    if message.text == 'üÉè–ú–æ–π –≥–µ—Ä–±':
        bot.send_message(message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —ç–º–æ–¥–∑–∏. –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–≤–æ–∏–º –≥–µ—Ä–±–æ–º...')
        bot.register_next_step_handler(message, process_gerb_step)    

def process_gerb_step(message):
    if tools.isOneEmojify(message.text):
        for user in list(USERS_ARR):
            if user.getSettingValue('üÉè–ú–æ–π –≥–µ—Ä–±') and user.getSettingValue('üÉè–ú–æ–π –≥–µ—Ä–±') == message.text:
                bot.send_message(message.chat.id, text=f'–ü–æ–∑–¥–Ω—è–∫, —ç—Ç–æ—Ç –≥–µ—Ä–± —É–∂–µ –∑–∞–±–∏–ª –∑–∞ —Å–æ–±–æ–π {user.getLogin()}')
                return

        user = getUserByLogin(message.from_user.username)
        setting = None
        for s in getSetting(code='USER_SETTINGS'):
            if s["name"] == 'üÉè–ú–æ–π –≥–µ—Ä–±':
                setting = s
                setting.update({'value': message.text})
                user.addSettings(setting)
                updateUser(user)

                markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
                markup.add('üìã –û—Ç—á–µ—Ç', 'üìú –ü—Ä–æ—Ñ–∏–ª—å', f'‚è∞ –ü–ª–∞–Ω —Ä–µ–π–¥–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                bot.send_message(message.chat.id, text=user.getSettingsReport(), reply_markup=markup)
                break
    else:
        bot.send_message(message.chat.id, text='–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –º–µ–Ω—è –Ω–µ –ø–æ–Ω—è–ª...')

@bot.message_handler(func=lambda message: message.text and '–ù–∞–∑–∞–¥ üìãüîö' in message.text)
def send_back_from_usset(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        bot.send_message(message.chat.id, text='–ò–¥–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!')
        return
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add('üìã –û—Ç—á–µ—Ç', 'üìú –ü—Ä–æ—Ñ–∏–ª—å', f'‚è∞ –ü–ª–∞–Ω —Ä–µ–π–¥–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    bot.send_message(message.chat.id, text='–í–µ—Ä–Ω—É–ª—Å—è...', reply_markup=markup)

# Handle /usset
@bot.message_handler(commands=['usset'])
def send_usset(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        bot.send_message(message.chat.id, text='–ò–¥–∏ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!')
        return

    buttons = getUserSettingsName()
    buttons.append('–ù–∞–∑–∞–¥ üìãüîö')
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(*buttons)
    user = getUserByLogin(message.from_user.username)
    bot.send_message(message.chat.id, text=user.getSettingsReport(), reply_markup=markup)

# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return


    response = getResponseDialogFlow(message, 'start').fulfillment_text
    privateChat = ('private' in message.chat.type)
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    if not privateChat:
        markup.add('–î–∂—É, üìã –û—Ç—á–µ—Ç', f'–î–∂—É, ‚è∞ –ø–ª–∞–Ω —Ä–µ–π–¥–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    else:
        markup.add('üìã –û—Ç—á–µ—Ç', 'üìú –ü—Ä–æ—Ñ–∏–ª—å', f'‚è∞ –ü–ª–∞–Ω —Ä–µ–π–¥–∞', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    if response:
        bot.send_message(message.chat.id, text=response, reply_markup=markup)

# Handle document
@bot.message_handler(content_types=['document'])
def get_message_photo(message):
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

# Handle photo
@bot.message_handler(content_types=["photo"])
def get_message_photo(message):
    #write_json(message.json)
    
    privateChat = ('private' in message.chat.type)

    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

    if (message.forward_from and message.forward_from.username == 'WastelandWarsBot'):
        ww = wariors.fromPhotoToWarioirs(message.forward_date, message.caption, message.photo[0].file_id)
        for warior in ww:
            row = {
                    "timeUpdate": message.forward_date, 
                    "name": f"{warior.getName()}", 
                    "fraction": f"{warior.getFraction()}",
                    'band': warior.getBand(), 
                    'goat': warior.getGoat(),
                    'photo': message.photo[0].file_id
                }
            newvalues = { "$set":  row}
            result = registered_wariors.update_one({
                "name": f"{warior.getName()}", 
                "fraction": f"{warior.getFraction()}"
                }, newvalues)
            if result.matched_count < 1:
                registered_wariors.insert_one(row)
            update_warior(None)
            wariorShow = warior
        
        if privateChat:
            wariorShow = getWariorByName(wariorShow.getName(), wariorShow.getFraction())
            if (wariorShow.photo):
                bot.send_photo(message.chat.id, wariorShow.photo, wariorShow.getProfile())
            else:
                send_messages_big(message.chat.id, text=wariorShow.getProfile())
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
    else:
        if privateChat:
            send_messages_big(message.chat.id, text=message.photo[len(message.photo)-1].file_id)
    
# Handle sticker
@bot.message_handler(content_types=["sticker"])
def get_message_stiker(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å—Ç–∏–∫–µ—Ä–Ω—É—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

    privateChat = ('private' in message.chat.type)
    if privateChat:
        send_messages_big(message.chat.id, text=message.sticker.file_id)

# Handle voice
@bot.message_handler(content_types=["video", "video_note"])
def get_message_stiker(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –Ω–∞—Å—Ç—Ä–∏–º–∏—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

# Handle voice
@bot.message_handler(content_types=["location"])
def get_message_stiker(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

# Handle voice
@bot.message_handler(content_types=["voice"])
def get_message_stiker(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow(message, 'user_banned').fulfillment_text)
        return

    bot.send_chat_action(message.chat.id, 'typing')
    file_info = bot.get_file(message.voice.file_id)
    file = requests.get(
        'https://api.telegram.org/file/bot{0}/{1}'.format(config.TOKEN, file_info.file_path))

    try:
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—à–µ–º—É –Ω–æ–≤–æ–º—É –º–æ–¥—É–ª—é
        text = speech.speech_to_text(bytes=file.content)
    except speech.SpeechException:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        send_messages_big(message.chat.id, text=f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! üó£ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!')
        pass
    else:
        # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        if text:
            name = message.from_user.username
            if message.forward_from:
                name = message.forward_from.username
            user = getUserByLogin(name)
            if user:
                name = user.getName()

            send_messages_big(message.chat.id, text=f'üó£<b>{name}</b>')
            send_messages_big(message.chat.id, text=text)
            
            message.text = text
            main_message(message)

            if (random.random() <= float(getSetting(code='PROBABILITY',name='EMOTIONS'))):
                bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS',name='BOT_VOICE'), 1)[0]['value'])
        else:
            send_messages_big(message.chat.id, text=f'üó£<b>{message.from_user.username}</b> —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞–ª, –Ω–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª!')

def koronavirus(logins, chat: str, probability = float(getSetting(code='PROBABILITY', name='KORONOVIRUS'))):
    if len(logins) < 1:
        return

    users_in_danger = []
    isKoronavirus = False
    
    if INFECT_PROBABILITY > 0:
        probability = INFECT_PROBABILITY
        isKoronavirus = True
    
    for user_login in logins:
        user = getUserByLogin(user_login)
        if user:
            users_in_danger.append(user)
            if user.isAccessoryItem(acc_koronavirus):
                isKoronavirus = True
    
    counter_infected = 0
    if isKoronavirus:
        for user in users_in_danger:
            if not user.isAccessoryItem(acc_koronavirus):
                if (random.random() <= probability):
                    user.addAccessory(acc_koronavirus)
                    updateUser(user)
                    counter_infected = counter_infected + 1
                    send_message_to_admin(f'‚ö†Ô∏èü¶á –í–Ω–∏–º–∞–Ω–∏–µ! \n {user.getLogin()} –∑–∞—Ä–∞–∂–µ–Ω –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º!')

    if counter_infected > 0:
        sec = int(randrange(int(getSetting(code='PROBABILITY', name='PANDING_WAIT_START_1')), int(getSetting(code='PROBABILITY', name='PANDING_WAIT_END_1'))))
        tz = config.SERVER_MSK_DIFF
        pending_date = datetime.now() + timedelta(seconds=sec, hours=tz.hour)

        pending_messages.insert_one({ 
            'chat_id': chat,
            'reply_message': None,
            'create_date': datetime.now().timestamp(),
            'user_id': logins[0],  
            'state': 'WAIT',
            'pending_date': pending_date.timestamp(),
            'dialog_flow_text': 'koronavirus_new_member',
            'text': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–∑–∏–≤—à–∏—Ö—Å—è {counter_infected}'})

# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def main_message(message):
    #write_json(message.json)

    privateChat = ('private' in message.chat.type)
    logger.info(f'chat:{message.chat.id}:{privateChat}:{message.from_user.username} : {message.text}')

    if message.from_user.username == None:
        return

    black_list = getSetting(code='BLACK_LIST', name=message.from_user.username)
    if black_list:
        send_messages_big(message.chat.id, text=f'{message.from_user.username} –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –±–∞–Ω {black_list}', reply_markup=None)
        send_message_to_admin(f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! \n {message.from_user.username} –Ω–∞–ø–∏—Å–∞–ª –î–∂—É:\n\n {message.text}')
        return

    check_and_register_tg_user(message.from_user.username)

    if message.reply_to_message and not message.reply_to_message.from_user.is_bot:
        may_be_infected = []
        may_be_infected.append(message.reply_to_message.from_user.username)
        may_be_infected.append(message.from_user.username)
        koronavirus(may_be_infected, message.chat.id)

    userIAm = getUserByLogin(message.from_user.username)
    if userIAm:
        if userIAm.isAccessoryItem(acc_koronavirus):
            global INFECT_PROBABILITY
            INFECT_PROBABILITY = float(getSetting(code='PROBABILITY', name='KORONOVIRUS'))
        else:
            if INFECT_PROBABILITY > 0.1:
                may_be_infected = []
                may_be_infected.append(message.from_user.username)
                koronavirus(may_be_infected, message.chat.id)
                INFECT_PROBABILITY = INFECT_PROBABILITY / 2
            else:
                INFECT_PROBABILITY = 0


    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        user = getUserByLogin(message.from_user.username)
        name = message.from_user.username
        if user:
            name = user.getName()
        send_messages_big(message.chat.id, text=f'{name} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n{getResponseDialogFlow(message, "user_banned").fulfillment_text}' )
        return
    
    callJugi = (privateChat 
                            or message.text.lower().startswith('–¥–∂—É') 
                            or (message.reply_to_message 
                                and message.reply_to_message.from_user.is_bot 
                                and message.reply_to_message.from_user.username in ('FriendsBrotherBot', 'JugiGanstaBot') )
                )
    findUser = not (userIAm == None)

    if message.forward_from_chat and message.forward_from_chat.username == 'wwkeeperhorn' and ' –ø–æ—Å—Ç–∏–≥ ' in message.text:
        # ‚öôÔ∏è–ú–∞—à–µ–Ω—å–∫–∞ –ø–æ—Å—Ç–∏–≥ 8-–π üèµ–î–∑–µ–Ω !
        name = message.text.split(' –ø–æ—Å—Ç–∏–≥ ')[0]
        name = name.replace('‚öôÔ∏è', '@').replace('üî™', '@').replace('üí£', '@').replace('‚öõÔ∏è', '@').replace('üëô', '@')
        name = name.split('@')[1].split(' ')[0].strip()
        num_dzen = message.text.split(' –ø–æ—Å—Ç–∏–≥ ')[1].split('-–π')[0]
        fraction = getWariorFraction(message.text)
        acc = f'üèµÔ∏è –ì—Ä–∞–º–æ—Ç–∞ –∑–∞ {num_dzen}-–π –î–∑–µ–Ω' 
        
        user = getUserByName(name)
        if user:
            if user.isAccessoryItem(acc):
                pass
            else:
                user.addAccessory(acc)
                updateUser(user)
                send_messages_big(message.chat.id, text=user.getName() + '!\n' + getResponseDialogFlow(message, 'new_accessory_add').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc}') 
        return


    if (message.text.startswith('üìü–ü–∏–ø-–±–æ–π 3000') and 
            '/killdrone' not in message.text and 
            '–¢–û–ü –§–†–ê–ö–¶–ò–ô' not in message.text and 
            '–°–û–î–ï–†–ñ–ò–ú–û–ï –†–Æ–ö–ó–ê–ö–ê' not in message.text and 
            '–ü–†–ò–ü–ê–°–´ –í –†–Æ–ö–ó–ê–ö–ï' not in message.text and 
            '–†–ï–°–£–†–°–´ –∏ –•–õ–ê–ú' not in message.text ):

        if (message.forward_from and message.forward_from.username == 'WastelandWarsBot'):
 
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text)
                return

            if '–¢–û–ü –ò–ì–†–û–ö–û–í:' in message.text:
                ww = wariors.fromTopToWariorsBM(message.forward_date, message, registered_wariors)
                for warior in ww:
                    update_warior(warior)
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
                return

            # if privateChat or (not isRegisteredUserLogin(message.from_user.username)) or isGoatSecretChat(message.from_user.username, message.chat.id):
            #     pass
            # else:
            #     censored(message)
            
            user = users.User(message.from_user.username, message.forward_date, message.text)
            
            if findUser==False:  
                if '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ /me' in message.text or (not privateChat): 
                    send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'pip_me').fulfillment_text)
                    return
                else:
                    acc = random.sample(getSetting(code='ACCESSORY', name='PIP_BOY'), 1)[0]["value"]
                    user.setChat(message.chat.id)
                    user.addAccessory(acc)
                    user.setPing(True)
                    x = registered_users.insert_one(json.loads(user.toJSON()))
                    updateUser(None)

                    send_messages_big(message.chat.id, text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–¢–µ–±–µ –≤—ã–¥–∞–ª–∏ "{acc}" –∏ –≤—ã—Ç–æ–ª–∫–Ω—É–ª–∏ –∑–∞ –¥–≤–µ—Ä—å!')
                    send_message_to_admin(f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n {user.getProfile()}')
            else:
                updatedUser = users.updateUser(user, users.getUser(user.getLogin(), registered_users))
                updateUser(updatedUser)

            addToUserHistory(user)
                
            if privateChat:
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'setpip').fulfillment_text)
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text) 
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and 'FIGHT!' in message.text):
        # if privateChat or isGoatSecretChat(message.from_user.username, message.chat.id):
        #     pass
        # else:
        #     censored(message)

        ww = wariors.fromFightToWarioirs(message.forward_date, message, USERS_ARR, battle)
        if ww == None:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'dublicate').fulfillment_text)
            return
        for warior in ww:
            update_warior(warior)

        send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '/accept' in message.text and '/decline' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            fraction = getWariorFraction(message.text.split(' –∏–∑ ')[1].strip())
            warior = getWariorByName(message.text.split('üë§')[1].split(' –∏–∑ ')[0], fraction)

            if warior == None:
                send_messages_big(message.chat.id, text='–ù–∏—á–µ–≥–æ –æ –Ω–µ–º –Ω–µ –∑–Ω–∞—é!')
            elif (warior and warior.photo):
                bot.send_photo(message.chat.id, warior.photo, warior.getProfile())
            else:
                send_messages_big(message.chat.id, text=warior.getProfile())
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–¢—ã –æ—Ü–µ–Ω–∏–ª –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∫—Ä—É–≥.' in message.text and '–†—è–¥–æ–º –∫—Ç–æ-—Ç–æ –µ—Å—Ç—å.' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            strings = message.text.split('\n')
            i = 0
            find = False
            report = ''
            counter = 0
            report_goat_info = ''
            goats = []

            for s in strings:
                if '|' in strings[i]:
                    name = strings[i]
                    fraction = getWariorFraction(strings[i])
                    name = name.replace('‚öôÔ∏è', '@').replace('üî™', '@').replace('üí£', '@').replace('‚öõÔ∏è', '@').replace('üëô', '@')
                    name = name.split('@')[1].split('|')[0].strip()
                    warior = getWariorByName(name, fraction)
                    if warior:
                        if warior.getGoat():
                            findGoat = False
                            for g in goats:
                                if g['name'] == warior.getGoat():
                                   g.update({'counter': g['counter']+1})
                                   findGoat = True
                            
                            if not findGoat:
                                goat = {}
                                goat.update({'counter': 1})
                                goat.update({'name': warior.getGoat()})
                                goats.append(goat)

                        find = True
                        report = report + f'{warior.getProfileSmall()}\n'
                    else:
                        counter = counter + 1    
                if '...–ò –µ—â–µ' in strings[i]:
                    live = int(strings[i].split('...–ò –µ—â–µ')[1].split('–≤—ã–∂–∏–≤—à–∏—Ö')[0].strip())
                    counter = counter + live
                i = i + 1
            if counter > 0:
                report = report + f'...–ò –µ—â–µ {str(counter)} –≤—ã–∂–∏–≤—à–∏—Ö.'
            
            if len(goats) > 0:
                for goat in goats:
                    report_goat_info = report_goat_info + f'üêê {goat["name"]}: <b>{goat["counter"]}</b>\n'
                report_goat_info = report_goat_info + '\n'

            if not find:
                send_messages_big(message.chat.id, text='–ù–µ –Ω–∞—à–µ–ª –Ω–∏–∫–æ–≥–æ!')
            else:
                send_messages_big(message.chat.id, text=report_goat_info + report)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text)
                return

            u = getUserByLogin(message.from_user.username)
            u.setRaidLocation(1)
            updateUser(u)
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–¢—ã –∑–∞–Ω—è–ª –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ' in message.text and '–†–µ–π–¥ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text)
                send_messages_big(message.chat.id, text='–®–ª–∏ –º–Ω–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è."')
                return

            u = getUserByLogin(message.from_user.username)
            u.setRaidLocation(1)
            updateUser(u)
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
        return
    elif (message.forward_from and '–ü–∞–Ω–µ–ª—å –±–∞–Ω–¥—ã.' in message.text and message.forward_from.username == 'WastelandWarsBot'):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):

            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text)
                return

            strings = message.text.split('\n')
            i = 0
            band = ''
            allrw = 0
            allcounter = 0
            onraidrw = 0
            onraidcounter = 0
            onraidReport = ''
            onraidusers = []

            report = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π–¥–µ—Ä–∞—Ö!\n'
            fuckupraidrw = 0
            fuckupraidcounter = 0
            fuckupusersReport = ''
            fuckupusers = []
            alianusersReport = ''
            aliancounter = 0

            # ü§òüëäüèÖ
            for s in strings:
                if 'üèÖ' in strings[i] and 'ü§ò' in strings[i]:
                    band = strings[i].split('ü§ò')[1].split('üèÖ')[0].strip()
                    
                    if not isGoatBoss(message.from_user.username):
                        if not isUsersBand(message.from_user.username, band):
                            send_messages_big(message.chat.id, text=f'–¢—ã –ø—Ä–∏–Ω–µ—Å –ø–∞–Ω–µ–ª—å –±–∞–Ω–¥—ã {band}\n' + getResponseDialogFlow(message, 'not_right_band').fulfillment_text)
                            return
                    
                    registered_users.update_many(
                        {'band': band},
                        { '$set': { 'raidlocation': None} }
                    )
                    updateUser(None)

                if 'üëÇ' in strings[i]:
                    name = strings[i]
                    name = name.replace('‚öôÔ∏è', '@').replace('üî™', '@').replace('üí£', '@').replace('‚öõÔ∏è', '@').replace('üëô', '@')
                    name = name.split('@')[1].split('üëÇ')[0].strip()
                    u = getUserByName(name)
                    
                    if u and (not u.getBand() == band):
                        u.setBand(band)

                    spliter = ''
                    km = ''
                    if 'üìç' in strings[i]:
                        km =  int(strings[i].split('üìç')[1].split('km')[0].strip())
                        spliter = 'üìç'

                    elif 'üëü' in strings[i]:
                        km =  int(strings[i].split('üëü')[1].split('km')[0].strip())
                        spliter = 'üëü'
                    else:
                        km =  int(strings[i].split('üëä')[1].split('km')[0].strip())
                        spliter = 'üëä'


                    if u:
                        allrw = allrw + u.getRaidWeight()
                        allcounter = allcounter + 1
                        u.setWastelandLocation(km)
                        u.setMaxkm(km)
                        if 'üëä' in strings[i]:
                            onraidcounter = onraidcounter + 1
                            onraidrw = onraidrw + u.getRaidWeight()
                            u.setRaidLocation(km)
                            onraidusers.append(u)
                        else:
                            fuckupraidrw = fuckupraidrw + u.getRaidWeight()
                            fuckupusers.append(u)
                        updateUser(u)
                    else:
                        aliancounter  = aliancounter + 1
                        alianusersReport = alianusersReport + f'{aliancounter}. {name} {spliter}{km}–∫–º\n'
                    
                i = i + 1
            
            report = report + f'ü§ò <b>{band}</b>\n\n' 
            if onraidcounter > 0:
                report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–Ω–∞ —Ä–µ–π–¥–µ</b>: <b>{onraidcounter}/{allcounter}</b>\n'
                i = 1
                for onu in sorted(onraidusers, key = lambda i: i.getRaidWeight(), reverse=True):
                    report = report +  f'{i}.{onu.getFraction()[0:1]}{onu.getRaidWeight()} {onu.getName()} üëä{onu.getRaidLocation()}–∫–º\n'
                    i = i + 1
                report = report + f'\n<b>–û–±—â–∏–π –≤–µ—Å</b>: üèãÔ∏è‚Äç‚ôÇÔ∏è{onraidrw}/{allrw} <b>{str(int(onraidrw/allrw*100))}%</b>\n'
            report = report + '\n'
            if fuckupraidrw > 0:
                report = report + 'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã –≤ –ø—Ä–æ—ë–±–µ</b>:\n'
                i = 1
                for offu in sorted(fuckupusers, key = lambda i: i.getRaidWeight(), reverse=True):
                    ping = ''
                    if not offu.isPing():
                        ping = 'üîï' 
                    report = report +  f'{i}.{offu.getFraction()[0:1]}{offu.getRaidWeight()} {ping} {offu.getNameAndGerb()} üìç{offu.getWastelandLocation()}–∫–º\n'
                    i = i + 1
            report = report + '\n'
            if alianusersReport == '':
                pass
            else:
                report = report + 'üêÄ <b>–ö—Ä—ã—Å—ã –≤ –±–∞–Ω–¥–µ</b> (–Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):\n'
                report = report + alianusersReport
            
            if privateChat or isGoatSecretChat(message.from_user.username, message.chat.id):
                bot.delete_message(message.chat.id, message.message_id)
                send_messages_big(message.chat.id, text=report)
            else:
                pass
                #censored(message)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' 
                and 
                    (
                        (message.text.startswith('–¢–µ–ø–µ—Ä—å') and '–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º' in message.text)
                        or
                        (message.text.startswith('‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç') and ('–ó–∞—Ö–≤–∞—Ç –Ω–∞—á–∞–ª—Å—è!' in message.text or '–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ—Å—å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—É—é –∑–∞—á–∏—Å—Ç–∫—É –ª–æ–∫–∞—Ü–∏–∏' in message.text)) 
                    )
                ):
        if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'deceive').fulfillment_text)
            return        
        
        band = ''
        dungeon_km = 0
        dungeon_name = ''
        usesrOnDungeon = []
        text = ''
        for s in message.text.split('\n'):
            #–¢–µ–ø–µ—Ä—å –ì–µ–∫—Å–∞–≥–æ–Ω –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ü§ò–ê—Ä—Ç—Ö«Å»∫«Å—É—Å
            if s.startswith('–¢–µ–ø–µ—Ä—å'): 
                band = s.split('ü§ò')[1].split('!')[0]
                dungeon_tmp = s.split('–¢–µ–ø–µ—Ä—å')[1].split('–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º')[0].strip().lower()
                for d in getSetting(code='DUNGEONS'):
                    if dungeon_tmp in d['name'].lower():
                        dungeon_km = int(d['value'])
                        dungeon_name = d['name']     
                        break
                text = f'‚úäÔ∏è–¢–µ–ø–µ—Ä—å <b>{dungeon_km}–∫–º {dungeon_name}</b>\n–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ü§ü<b>{band}</b>\n\n–£–¥–∞—Ä–Ω—ã–π –æ—Ç—Ä—è–¥\n'
       
            elif s.startswith('‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç'):
                for d in getSetting(code='DUNGEONS'):
                    if tools.deEmojify(s.replace('‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç ','')) in d['name'] :
                        dungeon_name = d['name']
                        dungeon_km = int(d['value'])
                        break
            elif s.startswith('ü§ò'):
                band = s.replace('ü§ò','')
                text = f'‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç <b>{dungeon_name}</b>\nü§ò{band}\n\n'
            elif '–≤ —Å–±–æ—Ä–µ.' in s:
                text = text + f'<b>{s}</b>' + '\n'
            elif s.startswith('üëä'):
                name = s.split('üëä')[1].split('‚ù§Ô∏è')[0].strip()
                user = getUserByName(name)
                if user:
                    usesrOnDungeon.append(user)
                else:
                    print(f'–ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–Ω–¥–∏—Ç {name}')
        
        i = 1
        for user in usesrOnDungeon:
            gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
            if gerb == None: gerb = ''

            text = text + f'  {i}. {gerb}<b>{user.getName()}</b>\n'
            i = i + 1

        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=text)

        goatName = getMyGoatName(usesrOnDungeon[0].getLogin()) 
        
        dresult = dungeons.aggregate([ 
            {   "$match": {
                        "band": band,
                        "dungeon_km": dungeon_km,
                        "state": "NEW"
                    } 
            },
            {   "$group": {
                "_id": "$date", 
                "count": {
                    "$sum": 1}}},
                
            {   "$sort" : { "count" : -1 } }
            ])
        
        date_arr = []
        for d in dresult:
            date_arr.append(d.get("_id"))

        if len(date_arr) == 0:
            tz = config.SERVER_MSK_DIFF
            dungeon_date = (datetime.now() + timedelta(hours=tz.hour)).timestamp()
            for user in usesrOnDungeon:
                row = {}
                row.update({'date': dungeon_date})
                row.update({'login': user.getLogin()})
                row.update({'band': band})
                row.update({'goat': goatName})
                row.update({'dungeon_km': dungeon_km})
                row.update({'dungeon': dungeon_name})
                row.update({'signedup': True})
                row.update({'invader': True})
                row.update({'state': 'CLOSED'})
                dungeons.insert_one(row)
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
            return
        elif len(date_arr) == 1:
            dungeon_date = date_arr[0]
            for user in usesrOnDungeon:
                row = {}
                row.update({'date': dungeon_date})
                row.update({'login': user.getLogin()})
                row.update({'band': band})
                row.update({'goat': goatName})
                row.update({'dungeon_km': dungeon_km})
                row.update({'dungeon': dungeon_name})
                row.update({'signedup': True})
                row.update({'invader': True})
                row.update({'state': 'CLOSED'})

                newvalues = { "$set": row }
                result = dungeons.update_one({
                    'login': user.getLogin(), 
                    'date': dungeon_date,
                    'band': band,
                    'goat': goatName,
                    'dungeon_km': dungeon_km
                    }, newvalues)
                if result.matched_count < 1:
                    dungeons.insert_one(row)
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
        else:
            markupinline = InlineKeyboardMarkup()
            
            for date in date_arr:
                dt = datetime.fromtimestamp(date)
                markupinline.add(
                    InlineKeyboardButton(f"{dt.hour}:{d.minute}", callback_data=f"commit_dungeon_time|{dt.timestamp()}|{band}|{dungeon_km}"),
                    InlineKeyboardButton(f"–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"commit_dungeon_yes|{dt.timestamp()}|{band}|{dungeon_km}"),
                    InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å ‚õî", callback_data=f"commit_dungeon_no|{dt.timestamp()}|{band}|{dungeon_km}")
                )
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text, reply_markup=markupinline)

    if message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '‚ù§Ô∏è' in message.text and 'üçó' in message.text and 'üîã' in message.text and 'üë£' in message.text:
        if hasAccessToWariors(message.from_user.username):
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                pass
            else:
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–º, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
                km = int(message.text.split('üë£')[1].split('–∫–º')[0])
                if userIAm.getMaxkm() < km:
                    userIAm.setMaxkm(km)
                    updateUser(userIAm)

    # –ó–∞–º–µ–Ω—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –í–í –≤—Å–µ —Ü–∏—Ñ—Ä—ã 
    #     if not privateChat:
    #         if not isGoatSecretChat(message.from_user.username, message.chat.id):
    #             replacements =  {
    #                                 "0": str(random.randint(1,9)), 
    #                                 "1": str(random.randint(1,9)), 
    #                                 "2": str(random.randint(1,9)), 
    #                                 "3": str(random.randint(1,9)), 
    #                                 "4": str(random.randint(1,9)), 
    #                                 "5": str(random.randint(1,9)), 
    #                                 "6": str(random.randint(1,9)), 
    #                                 "7": str(random.randint(1,9)), 
    #                                 "8": str(random.randint(1,9)), 
    #                                 "9": str(random.randint(1,9)) 
    #                             }
    #             text = "".join([replacements.get(c, c) for c in message.text])
    #             bot.delete_message(message.chat.id, message.message_id)
    #             send_messages_big(message.chat.id, text=f'üó£ {userIAm.getName()} ({userIAm.getLogin()}):\n\n'+text)
    #             return
    #     return




    if 'gratz' in message.text.lower() or '–≥—Ä–∞—Ü' in message.text.lower() or '–≥—Ä–∞—Ü!' in message.text.lower() or  '–ª–æ–ª' in message.text.lower() or 'lol' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='EMOTIONS'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_LOVE'), 1)[0]['value'])
            return
    if '–∑–±—Å' in message.text.lower() or '—É—Ä–∞' in message.text.lower() or '))' in message.text.lower() or '–∞—Ö–∞—Ö' in message.text.lower() or '–µ–±–∞—Ç—å' in message.text.lower() or '–µ–±–∞–∞—Ç—å' in message.text.lower() or '–µ–±–∞–∞–∞—Ç—å' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='EMOTIONS'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_LIKE'), 1)[0]['value'])
            return
    if '–ø–∏–¥–æ—Ä–∞—Å—ã' == message.text.lower() or '–ø–∏–¥–æ—Ä—ã' == message.text.lower() or '–ø–∏—Å–µ—Ü' == message.text.lower() or '–ø–∏–∑–¥–µ—Ü' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='EMOTIONS'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_DEAD'), 1)[0]['value'])
            return
    if '—Ç—ã–∫' == message.text.lower() or '—Ç—ã–∫!' == message.text.lower() or '—Ç—ã–∫!)' == message.text.lower() or '—Ç—ã–∫)' == message.text.lower() or ' —Ç—ã–∫' in message.text.lower() or ' —Ç—ã–∫' in message.text.lower():
        if not isGoatSecretChat(message.from_user.username, message.chat.id):
            if (random.random() <= float(getSetting(code='PROBABILITY', name='YES_STICKER'))):
                bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_FINGER_TYK'), 1)[0]['value'])
                logger.info(mem_top())
                return
    if '–¥–∞' == message.text.lower() or '–¥–∞!' == message.text.lower() or '–¥–∞?' == message.text.lower() or '–¥–∞!)' == message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='YES_STICKER'))):
            if not isGoatSecretChat(message.from_user.username, message.chat.id):
                bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_DA_PINDA'), 1)[0]['value'])
                return
    if '–Ω—ç—Ç' == message.text.lower() or '–Ω–µ–∞' == message.text.lower() or '–Ω–µ—Ç' == message.text.lower() or '–Ω–µ—Ç!' == message.text.lower() or '–Ω–µ—Ç?' == message.text.lower() or '–Ω–µ—Ç!)' == message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='NO_STICKER'))):
            if not isGoatSecretChat(message.from_user.username, message.chat.id):
                bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_NO_PINDA'), 1)[0]['value'])
                return
    if '–∞' == message.text.lower() or '–∞!' == message.text.lower() or '–∞?' == message.text.lower() or '–∞!)' == message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='A_STICKER'))):
            if not isGoatSecretChat(message.from_user.username, message.chat.id):
                bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_A_PINDA'), 1)[0]['value'])
                return
    if '—Ç–µ–±—è –±—É–∫–≤–∞–ª—å–Ω–æ —Ä–∞–∑–º–∞–∑–∞–ª–∏' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='YES_STICKER'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_SALUTE'), 1)[0]['value'])
            return       
    if '—É—Ç—Ä–µ—á–∫–∞' in message.text.lower() or '–¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º' in message.text.lower() or '–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞' in message.text.lower() or '–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–µ—á–∫–∞' in message.text.lower() or '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='MORNING_STICKER'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_MORNING'), 1)[0]['value'])
            return 
    if '–ø–æ–π–¥—É —Å–ø–∞—Ç—å' in message.text.lower() or '—è —Å–ø–∞—Ç—å' in message.text.lower() or '–¥–æ–±—Ä–æ–π –Ω–æ—á–∏' in message.text.lower() or '—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏' in message.text.lower() or '—Å–ø–∞—Ç–∫–∏' in message.text.lower() or '—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤' in message.text.lower() or '–¥–æ–±—Ä—ã—Ö —Å–Ω–æ–≤' in message.text.lower():
        if (random.random() <= float(getSetting(code='PROBABILITY', name='NIGHT_STICKER'))):
            bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_NIGHT'), 1)[0]['value'])
            return 

    # –•—É–∏—Ñ–∏–∫–∞—Ü–∏—è
    if message.reply_to_message and '—Ö—É–∏—Ñ–∏—Ü–∏—Ä—É–π' in message.text.lower():
        if not isGoatSecretChat(message.from_user.username, message.chat.id):
            phrases = message.reply_to_message.text.split('\n')
            text = ''
            for words in phrases:
                responce = getResponseHuificator(words)
                text = text + responce + '\n'
            reply_to_big(message.reply_to_message.json, text)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
        return
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç—ã
    if privateChat and isGoatBoss(message.from_user.username) and message.reply_to_message:
        if message.text.lower().startswith('—Ä–∞—Å—Å—ã–ª–∫–∞ –≤'):
            if not isGoatBoss(message.from_user.username):
                if not isAdmin(message.from_user.username):
                    send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                    return
            goat = getMyGoat(message.from_user.username)
            if goat:
                if '–Ω–∏–∏' in message.text.lower():
                    if message.reply_to_message.sticker:
                        bot.send_sticker(goat['chats']['secret'], message.reply_to_message.sticker.file_id)
                    elif message.reply_to_message.photo:
                        bot.send_photo(goat['chats']['secret'], message.reply_to_message.photo[len(message.reply_to_message.photo)-1].file_id)
                    else:
                        send_messages_big(goat['chats']['secret'], message.reply_to_message.text)
                elif '—Ñ–ª—É–¥' in message.text.lower():
                    if message.reply_to_message.sticker:
                        bot.send_sticker(goat['chats']['info'], message.reply_to_message.sticker.file_id)
                    elif message.reply_to_message.photo:
                        bot.send_photo(goat['chats']['info'], message.reply_to_message.photo[len(message.reply_to_message.photo)-1].file_id)
                    else:
                        send_messages_big(goat['chats']['info'], message.reply_to_message.text)   
                else:
                    send_messages_big(message.chat.id, '–ù–µ –ø–æ–Ω—è–ª! –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞!')

                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
                return
    
    if hasAccessToWariors(message.from_user.username):
        #write_json(message.json)
        if (callJugi and (message.text and ('–∞–Ω–µ–∫–¥–æ—Ç' in message.text.lower() or '—Ç–æ—Å—Ç' in message.text.lower()))) :
            type_joke = 11
            if ('–∞–Ω–µ–∫–¥–æ—Ç' in message.text.lower()):
                type_joke = 11
            elif ('—Ç–æ—Å—Ç' in message.text.lower()):
                type_joke = 16  
            bot.send_chat_action(message.chat.id, 'typing')
            report = ''
            try:
                r = requests.get(f'{config.ANECDOT_URL}={type_joke}', verify=False, timeout=7)
                report = r.text[12:-2]
            except:
                report = '–ß—ë—Ç —è –ø—Ä–∏—É–Ω—ã–ª... –ù–∏—á–µ–≥–æ –≤ –≥–æ–ª–æ–≤—É –Ω–µ –∏–¥–µ—Ç... –î–∞–≤–∞–π –ø–æ–∑–∂–µ.'
            
            send_messages_big(message.chat.id, report)
        elif (callJugi and ('—ç—Ç–æ –∑–∞–ª—ë—Ç' in message.text.lower() or '—ç—Ç–æ –∑–∞–ª–µ—Ç' in message.text.lower())
                    and message.reply_to_message
                    and message.text):
            login = message.reply_to_message.from_user.username

            if isGoatBoss(login) or isAdmin(login):
                login = message.from_user.username

            if isGoatSecretChat(message.from_user.username, message.chat.id):
                if not isGoatBoss(message.from_user.username):
                    login = message.from_user.username

            if config.BOT_LOGIN == login:
                login = message.from_user.username

            user = getUserByLogin(login)
            if not user:
                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                return

            if not user.getBand():
                send_messages_big(message.chat.id, text=f'–£ –±–∞–Ω–¥–∏—Ç–∞ {login} –Ω–µ—Ç –±–∞–Ω–¥—ã!')
                return

            if not isUsersBand(message.from_user.username, user.getBand()):
                if not isAdmin(message.from_user.username):
                    send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                    return
            
            sec = int(randrange(228, int(getSetting(code='PROBABILITY',name='FUNY_BAN'))))
            tz = config.SERVER_MSK_DIFF

            ban_date = datetime.now() + timedelta(seconds=sec, minutes=tz.minute, hours=tz.hour)

            if user.getTimeBan():
                ban_date = datetime.fromtimestamp(user.getTimeBan()) + timedelta(seconds=sec) 

            user.setTimeBan(ban_date.timestamp())
            report = f'{user.getName()} –±—É–¥–µ—Ç –≤—ã–ø–∏—Å–∞–Ω –±–∞–Ω! –ó–ª–æ–π –î–∂—É –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ ‚è∞{sec} —Å–µ–∫—É–Ω–¥(—ã) –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!'
            updateUser(user)
            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text + f'\n{report}')
        elif (callJugi and '—Å—Ç–∞—Ç—É—Å ' in message.text.lower() and ' @' in message.text):
            login = message.text.split('@')[1].split(' ')[0].strip()
            
            findLogin = False
            for x in registered_users.find({"login": f"{login}"}):
                findLogin = True

            if (isAdmin(message.from_user.username) or message.from_user.username == login):
                pass
            else:
                findLogin = False

            newvalues = { "$set": { "status": message.text.split(login)[1].strip() } }
            if not findLogin:
                registered_users.update_one({"login": f"{message.from_user.username}"}, newvalues)
                send_messages_big(message.chat.id, text="–ò–∑-–∑–∞ —Å–≤–æ–µ–π –∫—Ä–∏–≤–æ—Ä–∫—É–∫–æ—Å—Ç–∏ —Ç—ã –≤—å–µ–±–∞–ª —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–º—É —Å–µ–±–µ. –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å '" + message.text.split(login)[1].strip() + "'")
            else:
                registered_users.update_one({"login": f"{login}"}, newvalues)
                send_messages_big(message.chat.id, text='‚úÖ –ì–æ—Ç–æ–≤–æ')
            
            updateUser(None)  
        elif (callJugi and '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @' in message.text.lower()):
            if not isGoatBoss(message.from_user.username):
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                return

            login = tools.deEmojify(message.text.split('@')[1].strip())
            user = getUserByLogin(login)
            if user:
                counter = pip_history.find({'login': user.getLogin()}).count()
                if counter == 0:
                    bot.send_message(message.chat.id, text='–°–±—Ä–æ—Å—å –º–Ω–µ —Ö–æ—Ç—å –æ–¥–∏–Ω pip!')
                    return
               
                N = 0
                if counter > 10:
                    N = 10
                else:
                    counter = 0
                cursor = pip_history.find({'login': user.getLogin()}).skip(counter - N)
                matplot.getPlot(cursor, user.getLogin())
                img = open(config.PATH_IMAGE + f'plot_{user.getLogin()}.png', 'rb')
                bot.send_photo(message.chat.id, img)
            else:
                send_messages_big(message.chat.id, text=f'–ù–µ –Ω–∞–π–¥–µ–Ω –±–∞–Ω–¥–∏—Ç {login}')
        elif (callJugi and '–ø—Ä–æ—Ñ–∏–ª—å @' in message.text.lower()):
            updateUser(None)
            name = tools.deEmojify(message.text.split('@')[1].strip())
            if isGoatBoss(message.from_user.username):
                login = message.text.split('@')[1].strip()
                if isRegisteredUserName(name) or isRegisteredUserLogin(login):
                    user = getUserByLogin(login)
                    if not user:
                        user = getUserByName(name)

                    if user:
                        send_messages_big(message.chat.id, text=user.getProfile())
                else:
                    send_messages_big(message.chat.id, text=f'–í –±–∞–∑–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–Ω—ã—Ö –±–∞–Ω–¥–∏—Ç–æ–≤ {login} –Ω–µ –Ω–∞–π–¥–µ–Ω')

            for x in registered_wariors.find({'name':f'{name}'}):
                print(f'find {name}')
                warior = wariors.importWarior(x)
                if (warior and warior.photo):
                    try:
                        bot.send_photo(message.chat.id, warior.photo, warior.getProfile())
                    except:
                        send_messages_big(message.chat.id, text=warior.getProfile())
                else:
                    send_messages_big(message.chat.id, text=warior.getProfile())
        elif callJugi and ('—É–≤–æ–ª–∏—Ç—å @' in message.text.lower() or '—É–¥–∞–ª–∏—Ç—å @' in message.text.lower()):
            if not isGoatBoss(message.from_user.username):
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                return

            login = message.text.split('@')[1].strip()
            user = getUserByLogin(login)
            if not user:
                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                return

            if not isUsersBand(message.from_user.username, user.getBand()):
                send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                return

            myquery = { "login": f"{user.getLogin()}" }
            doc = registered_users.delete_one(myquery)
            updateUser(None)

            if doc.deleted_count == 0:
                send_messages_big(message.chat.id, text=f'{login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω–¥–∏—Ç–∞—Ö!')
            else:                 
                send_messages_big(message.chat.id, text=f'{login} —É–≤–æ–ª–µ–Ω –Ω–∞—Ñ–∏–≥!')
        elif (callJugi and '–ø—Ä–æ—Ñ–∏–ª—å' in message.text.lower() ):
            if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                pass
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                return

            updateUser(None)
            user = users.getUser(message.from_user.username, registered_users)
            if user:
                warior = getWariorByName(user.getName(), user.getFraction())
                if (warior and warior.photo):
                    try:
                        bot.send_photo(message.chat.id, warior.photo, user.getProfile())
                    except:
                        send_messages_big(message.chat.id, text=user.getProfile())
                else:
                    send_messages_big(message.chat.id, text=user.getProfile())
            else:
                send_messages_big(message.chat.id, text='–° —Ç–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∫–∞–∫–∞—è-—Ç–æ –±–µ–¥–∞... –ó–≤–æ–Ω–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∏–ø-–±–æ–µ–≤!')
        elif callJugi:

            text = message.text 
            if text.lower().startswith('–¥–∂—É'):
                text = message.text[3:]

            result = getResponseDialogFlow(message, text)
            response = result.fulfillment_text
            parameters = result.parameters
            if response:
                if (response.startswith('jugi:')):
                    #jugi:ping:–ê—Ä—Ç—Ö–∞—É—Å
                    if 'ping' == response.split(':')[1]:
                        # if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                        #     pass
                        # else:
                        #     send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                        #     return

                        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π —Å –±–∞–Ω–¥–æ–π –•
                        band = response.split(':')[2]
                        if response.split(":")[2] == '*':
                            band = userIAm.getBand()
                        if band == 'all':
                            if not isGoatBoss(message.from_user.username):
                                if not isAdmin(message.from_user.username):
                                    send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                    return
                        else:
                            if not isUsersBand(message.from_user.username, band):
                                send_messages_big(message.chat.id, text=f'–¢—ã –ø—Ä–æ—Å–∏–ª —Å–æ–±—Ä–∞—Ç—å—Å—è –±–∞–Ω–¥—É ü§ü{band}\n' + getResponseDialogFlow(message, 'not_right_band').fulfillment_text)
                                return

                        first_string = f'{tools.deEmojify(message.from_user.first_name)} –ø—Ä–æ—Å–∏—Ç —Å–æ–±—Ä–∞—Ç—å—Å—è –±–∞–Ω–¥—É\n<b>ü§ü{band}</b>:\n'
                        usersarr = []

                        for registered_user in registered_users.find():
                            user = users.importUser(registered_user)
                            registered_user.update({'weight': user.getRaidWeight()})
                            registered_user.update({'ping': user.isPing()})
                            if band=='all':
                                if user.getBand() in getGoatBands(getMyGoatName(userIAm.getLogin())): 
                                    usersarr.append(registered_user)
                            else:
                                if user.getBand() == band: 
                                    usersarr.append(registered_user)

                        # –ü–∏–Ω–≥—É–µ–º
                        counter = 0
                        pingusers = []
                        report = f''
                        for pu in sorted(usersarr, key = lambda i: i['weight'], reverse=True):
                            counter = counter + 1
                            pingusers.append(pu)
                            if pu["ping"] == True:
                                report = report + f'{counter}. @{pu["login"]} \n'
                            else:
                                report = report + f'{counter}. üîï{pu["login"]} \n'
                            if counter % 5 == 0:
                                send_messages_big(message.chat.id, text=first_string + report)
                                pingusers = []
                                report = f''

                        if len(pingusers) > 0:
                            send_messages_big(message.chat.id, text=first_string + report)
                    elif 'setping' == response.split(':')[1]:
                        # jugi:setping:True:login
                        login = response.split(":")[3].replace('@','')
                        if login == '*':
                            login = message.from_user.username
                        else:
                            if not isGoatBoss(message.from_user.username):
                                if not isAdmin(message.from_user.username):
                                    send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                    return
                                    
                        user = getUserByLogin(login)
                        if not user:
                            send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                            return 
                        
                        user.setPing(response.split(":")[2] == 'True')
                        updateUser(user)
                        send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
                    elif 'birthday' == response.split(':')[1]:
                        # jugi:birthday:2020-02-02
                        userIAm.setBirthday(parse(response.split(':birthday:')[1]).timestamp())
                        updateUser(userIAm)
                        send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)        
                    elif 'flex' == response.split(':')[1]:
                        pass
                        # jugi:flex:$bool
                        # if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                        #     send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                        #     return

                        # if eval(response.split(':')[2]):
                        #     counter = int(randrange(int(getSetting(code='PROBABILITY', name='JUGI_FLEX'))))

                        #     send_messages_big(message.chat.id, f'–©–∞ –∑–∞–µ–±–∞—à—É {counter} —Å—Ç–∏–∫–µ—Ä–æ–≤!')
                        #     bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_GO_FLEX'), 1)[0]['value'])
                            
                        #     global flexFlag
                        #     flexFlag = True
                        #     for i in range(0, counter):
                        #         if flexFlag:
                        #             bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_FLEX'), 1)[0]['value'])
                        #             time.sleep(random.randint(1000,3000) / 1000)
                        #         else:
                        #             send_messages_big(message.chat.id, text='–ü–∏–ø–µ—Ü —Ç—ã –∫–∞–π—Ñ–æ–ª–æ–º!')
                        #             bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_CRY'), 1)[0]['value'])
                        #             flexFlag = False
                        #             break
                        #     if flexFlag:
                        #         bot.send_sticker(message.chat.id, random.sample(getSetting(code='STICKERS', name='BOT_END_FLEX'), 1)[0]['value'])
                        #         send_messages_big(message.chat.id, f'–•–æ—Ä–æ—à–æ, –∑–∞–µ–±–∞—à–∏–ª {counter} —Å—Ç–∏–∫–µ—Ä–æ–≤!')
                        #         flexFlag = False
                        # else:
                        #     flexFlag = False
                        #     send_messages_big(message.chat.id, text='–û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏–≤–∞—é —Ñ–ª–µ–∫—Å –Ω–∞—Ö–û–π!')
                        #     return
                    elif 'youbeautiful' == response.split(':')[1]:
                        # jugi:youbeautiful:text
                        photo = random.sample(getSetting(code='STICKERS', name='BOT_LOVE'), 1)[0]['value']
                        bot.send_sticker(message.chat.id, photo)
                        send_messages_big(message.chat.id, text=f'{response.split(":")[2]}')
                    elif 'youbadbot' == response.split(':')[1]:
                        # jugi:youbadbot
                        sec = int(randrange(288, int(getSetting(code='PROBABILITY', name='JUGI_BAD_BOT_BAN'))))
                        tz = config.SERVER_MSK_DIFF
                        ban_date = datetime.now() + timedelta(seconds=sec, hours=tz.hour)
                        userIAm.setTimeBan(ban_date.timestamp())

                        report = f'<b>{response.split(":")[2]}</b>\n<b>{userIAm.getName()}</b> –≤—ã–ø–∏—Å–∞–Ω –±–∞–Ω! ‚è∞{sec} —Å–µ–∫—É–Ω–¥(—ã) –≤ —Ç–∏—à–∏–Ω–µ –Ω–∞—É—á–∞—Ç —Ç–µ–±—è —Ö–æ—Ä–æ—à–µ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é!'
                        updateUser(userIAm)

                        photo = random.sample(getSetting(code='STICKERS', name='BOT_FUCKOFF'), 1)[0]['value']
                        bot.send_sticker(message.chat.id, photo)
                        send_messages_big(message.chat.id, text=f'\n{report}')
                    elif 'planrade' == response.split(':')[1]:
                        # jugi:planrade:$date

                        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                            return

                        goat = getMyGoatName(message.from_user.username)

                        tz = config.SERVER_MSK_DIFF
                        plan_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                        raid_date = plan_date

                        if response.split(response.split(":")[1])[1][1:].strip() == '*':
                            raid_date = raid_date.replace(minute=0, second=0, microsecond=0)

                            if plan_date.hour > 17 or plan_date.hour < 1:
                                if not plan_date.hour < 1:
                                    raid_date = raid_date + timedelta(days=1)
                                raid_date = raid_date.replace(hour=1)
                            elif plan_date.hour > 1 and plan_date.hour < 9:
                                raid_date = raid_date.replace(hour=9)
                            else:
                                raid_date = raid_date.replace(hour=17)
                        else:
                            raid_date = parse(response.split(response.split(":")[1])[1][1:])
                        
                        markupinline = InlineKeyboardMarkup()

                        for radeloc in plan_raids.find({
                                    'rade_date': { 
                                        '$gte' : plan_date.timestamp()
                                    }, 
                                    'goat': goat}): 
                            find = False
                            try:
                                users_onraid = radeloc['users']
                                for u in users_onraid:
                                    if u == message.from_user.username:
                                        find = True
                            except:
                                pass


                            
                            #if not find:
                            markupinline.add(InlineKeyboardButton(f"{radeloc['rade_text']}", callback_data=f"capture_{radeloc['rade_location']}_{raid_date.timestamp()}_{goat}"))
              
                        text = get_raid_plan(raid_date, goat)

                        msg = send_messages_big(message.chat.id, text=text, reply_markup=markupinline)
                    elif 'onrade' == response.split(':')[1]:

                        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                            return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoatName(message.from_user.username)

                        if not getMyGoatName(message.from_user.username) == goatName:
                            send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
                            return

                        for goat in getSetting(code='GOATS_BANDS'):
                            if goatName == goat.get('name'):
                                report = radeReport(goat)
                                send_messages_big(message.chat.id, text=report)
                    elif 'statistic' == response.split(':')[1]:
                        # jugi:statistic:*
                        if not isGoatBoss(message.from_user.username):
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                return

                        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                            return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoatName(message.from_user.username)

                        if not getMyGoatName(message.from_user.username) == goatName:
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
                                return

                        report = statistic(goatName)
                        send_messages_big(message.chat.id, text=report) 
                    elif 'clearrade' == response.split(':')[1]:
                        # jugi:clearrade:*
                        if not isAdmin(message.from_user.username):
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_admin').fulfillment_text)
                            return

                        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                            return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoatName(message.from_user.username)

                        if not getMyGoatName(message.from_user.username) == goatName:
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow(message, 'shot_you_cant').fulfillment_text)
                                return
                        registered_users.update_many(
                            {'band':{'$in':getGoatBands(goatName)}},
                            { '$set': { 'raidlocation': None} }
                        )

                        updateUser(None)
                        send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)        
                    elif 'totalizator' == response.split(':')[1]:
                        # jugin:totalizator:$any
                        pass
                    elif 'pickupaccessory' == response.split(':')[1]:
                        #jugi:pickupaccessory:$any

                        if not isGoatBoss(message.from_user.username):
                            if not isAdmin(message.from_user.username):
                                bot.reply_to(message, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                return

                        login = response.split(':')[2].replace('@','').strip()         
                        user = getUserByLogin(login)

                        if not user:
                            send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                            return

                        markupinline = InlineKeyboardMarkup()

                        accessory = ''
                        if user.getAccessory() and len(user.getAccessory())>0:
                            i = 0
                            for acc in user.getAccessory():
                                accessory = accessory + f'‚ñ´Ô∏è {acc}\n'
                                markupinline.add(InlineKeyboardButton(f"{acc}", callback_data=f"pickupaccessory|{login}|{i}"))
                                i = i + 1
                        if not accessory == '':
                            markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"pickupaccessory_exit|{login}"))
                            msg = send_messages_big(message.chat.id, text=getResponseDialogFlow(message, None, 'shot_message_pickupaccessory').fulfillment_text + f'\n\n{accessory}\n–ß—Ç–æ –∏–∑—å—è—Ç—å?', reply_markup=markupinline)
                        else:
                            msg = send_messages_big(message.chat.id, text='–£ –Ω–µ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –æ–Ω –≥–æ–ª–æ–¥—Ä–∞–Ω–µ—Ü!' , reply_markup=markupinline)
                    elif 'toreward' == response.split(':')[1]:
                        #jugi:toreward:$any:$accessory
                        logger.info(response)
                        if not isGoatBoss(message.from_user.username):
                            if not isAdmin(message.from_user.username):
                                bot.reply_to(message, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                return

                        login = response.split(':')[2].replace('@','').strip()
                        user = getUserByLogin(login)
                        if login.lower() == '–≤—Å–µ–º':
                            pass
                        else:
                            if not user:
                                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                                return

                        if response.split(':')[3] == '*':  
                            markupinline = InlineKeyboardMarkup()
                            counter = 10
                            i = 1
                            for acc in getSetting(code='ACCESSORY', name='REWARDS'):
                                if user and user.getAccessory() and acc['value'] in user.getAccessory():
                                    continue    

                                markupinline.add(InlineKeyboardButton(f"{acc['value']}", callback_data=f"toreward|{login}|{acc['name']}"))
                                if i == counter :
                                    markupinline.add(InlineKeyboardButton(f"–î–∞–ª–µ–µ üîú", callback_data=f"toreward_next|{login}|{counter}"))
                                    markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))
                                    break
                                i = i + 1
                            if user:
                                msg = send_messages_big(message.chat.id, text=f'–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã {user.getName()}:\n{user.getAccessoryReport()}' , reply_markup=markupinline)
                            else:
                                msg = send_messages_big(message.chat.id, text=f'–í—Å–µ–º –±–∞–Ω–¥–∏—Ç–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω...' , reply_markup=markupinline)

                        else:
                            acc = response.split(':')[3]
                            if user:
                                user.addAccessory(acc)
                                updateUser(user)
                                send_messages_big(message.chat.id, text=user.getName() + '!\n' + getResponseDialogFlow(message, 'new_accessory_add').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc}') 
                            else:
                                for user in list(USERS_ARR):
                                    user.addAccessory(acc)
                                    updateUser(user)
                                send_messages_big(message.chat.id, text='–ë–∞–Ω–¥–∏—Ç—ã!\n' + getResponseDialogFlow(message, 'new_accessory_all').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc}') 
                    elif 'ban' == response.split(':')[1] or 'unban' == response.split(':')[1]:
                        # jugi:ban:@gggg –Ω–∞:2019-12-01T13:21:52/2019-12-01T13:31:52
                        logger.info(response)
                        ban = ('ban' == response.split(':')[1])
                        login = response.split(':')[2]
                        allUser = False

                        if login.lower() == '–≤—Å–µ—Ö':
                            allUser = True
                        else:
                            login = login.split('@')[1].split(' ')[0].strip()

                        if ban:
                            if not isGoatBoss(message.from_user.username):
                                bot.reply_to(message, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                return
                        else:
                            if allUser:
                                if not isGoatBoss(message.from_user.username):
                                    bot.reply_to(message, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                                    return
                        
                        user = getUserByLogin(login)
                        if not allUser:
                            if not user:
                                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                                return

                            if not user.getBand():
                                send_messages_big(message.chat.id, text=f'–£ –±–∞–Ω–¥–∏—Ç–∞ {login} –Ω–µ—Ç –±–∞–Ω–¥—ã!')
                                return

                            if not isUsersBand(message.from_user.username, user.getBand()):
                                if not isAdmin(message.from_user.username):
                                    send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                                    return
                    
                        time_str = response.split(response.split(':')[2])[1][1:]
                        date_for = None
                        if ban:
                            if time_str == '*':
                                tz = config.SERVER_MSK_DIFF
                                date_for = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute+1, hours=tz.hour)
                            else:
                                if not '/' in time_str:
                                    send_messages_big(message.chat.id, text=f'–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                                    return
                                try:
                                    date_for = parse(time_str.split('/')[1].strip())
                                except:
                                    send_messages_big(message.chat.id, text=f'–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                                    return

                        report = ''
                        if ban:
                            if not allUser:
                                if user == None:
                                    tguser = getTgUser(login)
                                    tguser["timeban"] = date_for.timestamp()
                                    updateTgUser(tguser)
                                else:
                                    user.setTimeBan(date_for.timestamp())
                                    report = f'{user.getName()} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞—Ö—Ä–µ–Ω –¥–æ\n'+'‚è∞' + time.strftime("%H:%M:%S %d-%m-%Y", time.gmtime(date_for.timestamp()))
                                    updateUser(user)
                            else:
                                for u in list(USERS_ARR):
                                    if u.getLogin() == message.from_user.username:
                                        pass
                                    else:
                                        u.setTimeBan(date_for.timestamp())
                                        updateUser(u)
                                for tguser in list(TG_USERS_ARR):
                                    if tguser["login"] == message.from_user.username:
                                        pass
                                    else:
                                        tguser["timeban"] = date_for.timestamp()
                                        updateTgUser(tguser)

                                report = f'–í—Å–µ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞—Ö—Ä–µ–Ω –¥–æ\n'+'‚è∞' + time.strftime("%H:%M:%S %d-%m-%Y", time.gmtime(date_for.timestamp()))
                                
                        else:
                            if not allUser:
                                user.setTimeBan(None)
                                report = f'{user.getName()} —Ä–∞–∑–±–∞–Ω–µ–Ω. –ì–æ–≤–æ—Ä–∏, –¥–æ—Ä–æ–≥–æ–π!'
                                updateUser(user)
                            else:
                                for u in list(USERS_ARR):
                                    u.setTimeBan(None)
                                    updateUser(u)
                                
                                for tguser in list(TG_USERS_ARR):
                                    tguser['timeBan'] = None
                                    updateTgUser(tguser)

                                report = f'–í—Å–µ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã. –ì–æ–≤–æ—Ä–∏—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ –º–æ–∏!'

                        send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text + f'\n{report}')
                    elif 'requests' == response.split(':')[1]:
                        if not isAdmin(message.from_user.username):
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_admin').fulfillment_text)
                            return
                        #   0     1        2       3
                        # jugi:requests:$tables:$fields:$filters
                        try:
                            report = ''
                            send_messages_big(message.chat.id, text=f'{response}')
                            #filter_str = response.split(':'+response.split(":")[3]+':')[1]
                            filter_str = parameters.fields['filters'].string_value
                            send_messages_big(message.chat.id, text=f'{filter_str}')
                            jsonfind = json.loads(filter_str)
                            send_messages_big(message.chat.id, text=f'Do request...')
                            # fields = response.split(":")[3].replace(' –∏ ', ',').split(',')

                            i = 1
                            for req in mydb[parameters.fields['tables'].string_value].find(jsonfind):
                                report = report + f'{i}. '
                                for field_name in parameters.fields['fields'].list_value:
                                    try:
                                        value = req[f'{field_name}']
                                        report = report + f'{value} '
                                    except: pass
                                report = report + '\n'
                                i = i + 1

                            if report == '':
                                send_messages_big(message.chat.id, text=f'–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
                            else:
                                send_messages_big(message.chat.id, text=f'{report}')
                        except Exception as e:
                            send_messages_big(message.chat.id, text=f'–û—à–∏–±–∫–∞!')
                            send_messages_big(message.chat.id, text=f'{e}')
                    elif 'rade' == response.split(':')[1]:
                        #   0    1           2            3          4          
                        # jugi:rade:–ì–æ—Å–ø–∏—Ç–∞–ª—å üö∑ üìç24–∫–º:True:2020-01-13T21:00:00
                        # print(f'isGoatBoss = {isGoatBoss(message.from_user.username)}')
                        # print(f'isAdmin = {isAdmin(message.from_user.username)}')
                        # print(response.split(f':{response.split(":")[3]:}')[1])
                        if isGoatBoss(message.from_user.username) or isAdmin(message.from_user.username):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_not_goat_boss').fulfillment_text)
                            return

                        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                            return
                        
                        goat = getMyGoatName(message.from_user.username)
                        #   0    1        2              3               4         5       6
                        # jugi:rade:$radelocation1:$radelocation2:$radelocation3:$bool:$date-time
                        
                        raid_date = parse(response.split(f':{response.split(":")[3]}:')[1])

                        if raid_date.hour not in (1, 9, 17):
                            send_messages_big(message.chat.id, text='–†–µ–π–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ 1:00, 9:00, 17:00!\n–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!')
                            return 

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É
                        tz = config.SERVER_MSK_DIFF
                        dt = raid_date - timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                        if (dt.timestamp() < datetime.now().timestamp()):
                            msg = send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'timeisout').fulfillment_text)
                            return

                        markupinline = InlineKeyboardMarkup()

                        if eval(response.split(":")[3]):
                            
                            radeloc_arr = []
                            rlocs = response.split(":")[2].replace(' –∏ ', ',').split(',')
                            for rloc in rlocs:
                                row = {}
                                rade_text = rloc
                                rade_location = int(rloc.split('üìç')[1].split('–∫–º')[0].strip())
                                row.update({'rade_text': rade_text})
                                row.update({'rade_location': rade_location})
                                radeloc_arr.append(row)

                            row = {}
                            row.update({'rade_text': '–ù–µ –ø–æ–π–¥—É –Ω–∏–∫—É–¥–∞!'})
                            row.update({'rade_location': 0})
                            radeloc_arr.append(row)
                        
                        if eval(response.split(":")[3]):
                            for radeloc in radeloc_arr:                                
                                myquery = { 
                                            'rade_date': raid_date.timestamp(),
                                            'rade_location': radeloc['rade_location'],
                                            'goat': goat
                                        }
                                newvalues = { "$set": { 
                                                'rade_text': radeloc['rade_text'],
                                            } } 
                                u = plan_raids.update_one(myquery, newvalues)

                                users_onraid = []
                                if u.matched_count == 0:
                                    plan_raids.insert_one({ 
                                        'create_date': datetime.now().timestamp(), 
                                        'rade_date': raid_date.timestamp(),
                                        'rade_text': radeloc['rade_text'],
                                        'rade_location': radeloc['rade_location'],
                                        'state': 'WAIT',
                                        'chat_id': message.chat.id,
                                        'login': message.from_user.username,
                                        'goat': goat,
                                        'users': users_onraid})
                        else:
                            plan_raids.delete_many({
                                            'rade_date': raid_date.timestamp(),
                                            'goat': goat
                                            })

                        plan_str = get_raid_plan(raid_date, goat)

                        #markupinline.add(InlineKeyboardButton(f"{radeloc['rade_text']}", callback_data=f"capture_{radeloc['rade_location']}_{raid_date.timestamp()}_{goat}"))
                        for radeloc in plan_raids.find({
                                    'rade_date': raid_date.timestamp(),
                                    'goat': goat}): 
                            users_onraid = radeloc['users']
                            find = False
                            for u in users_onraid:
                                if u == message.from_user.username:
                                    find = True
                            
                            # if not find:
                            markupinline.add(InlineKeyboardButton(f"{radeloc['rade_text']}", callback_data=f"capture_{radeloc['rade_location']}_{raid_date.timestamp()}_{goat}"))
                                                    
                        msg = send_messages_big(message.chat.id, text=plan_str, reply_markup=markupinline)
                    elif 'getchat' == response.split(':')[1]:
                        send_messages_big(message.chat.id, text=f'Id —á–∞—Ç–∞ {message.chat.id}')
                    elif 'capture' == response.split(':')[1]:
                            #   0    1        2       3     4
                            # jugi:capture:$bands:$Dangeon:$time
                            band = response.split(':')[2]
                            if response.split(":")[2] == '*':
                                band = userIAm.getBand()
                            
                            if not isUsersBand(message.from_user.username, band):
                                send_messages_big(message.chat.id, text=f'–¢—ã –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–≤–∞—Ç—å –Ω–∞ –∑–∞—Ö–≤–∞—Ç –±–∞–Ω–¥—É ü§ü<b>{band}</b>\n' + getResponseDialogFlow(message, 'not_right_band').fulfillment_text)
                                return  

                            # if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                            #     pass
                            # else:
                            #     censored(message)
                            #     return

                            time_str = response.split(response.split(":")[3])[1][1:]
                            dt = parse(time_str)
                            time_str = str(dt.hour).zfill(2)+':'+str(dt.minute).zfill(2)
                            dungeon = response.split(":")[3]
                            dungeon_km = getSetting(code='DUNGEONS', name=dungeon)
                            text = f'‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç <b>{dungeon_km}–∫–º {dungeon}\nü§ü{band}\n–≤ {time_str}</b>\n\n'

                            users_in_cupture = []
                            users_on_cupture = []
                            users_off_cupture = []
                            
                            report_yes = '<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞—Ö–≤–∞—Ç:</b>\n'
                            i = 0
                            for dun in dungeons.find({
                                'date': dt.timestamp(),
                                'band': band,
                                'dungeon_km': dungeon_km,
                                'signedup': True
                                }):
                                i = i + 1
                                user = getUserByLogin(dun['login'])
                                if dun['invader']:
                                    users_in_cupture.append(user)

                                if user:
                                    gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
                                    if gerb == None: gerb = ''
                                    users_on_cupture.append(user)
                                    report_yes = report_yes + f'  {i}. {gerb}{user.getName()}\n'
                                else:
                                    report_yes = report_yes + f'  {i}. {dun["login"]}\n'

                            if i == 0:
                                report_yes = report_yes + '  –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n'

                            report_no = '<b>–û—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞:</b>\n'
                            i = 0
                            for dun in dungeons.find({
                                'date': dt.timestamp(),
                                'band': band,
                                'dungeon_km': dungeon_km,
                                'signedup': False
                                }):
                                i = i + 1
                                user = getUserByLogin(dun['login'])
                                if user:
                                    gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
                                    if gerb == None: gerb = ''
                                    users_off_cupture.append(user)
                                    report_no = report_no + f'  {i}. {gerb}{user.getName()}\n'
                                else:
                                    report_no = report_no + f'  {i}. {dun["login"]}\n'

                            if i == 0:
                                report_no = report_no + '  –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è\n'

                            # –ü–∏–Ω–≥—É–µ–º
                            counter = 0
                            report = f''
                            for user in getBandUsers(band):
                                counter = counter + 1
                                
                                if user.isPing():
                                    second_pref = ''
                                    pref = '@'

                                    if user in users_on_cupture:
                                        pref = 'üèé'
                                    elif user in users_off_cupture:
                                        pref = 'üö¨'
                                    if user in users_in_cupture:
                                        pref = 'üî•'
                                    
                                    if pref == '@':
                                        report = report + f'{counter}. {pref}{user.getLogin()}\n'
                                    else:
                                        report = report + f'{counter}. {pref} {user.getNameAndGerb()})\n'
                                else:
                                    report = report + f'{counter}. üîï {user.getNameAndGerb()}\n'

                                if counter % 5 == 0:
                                    send_messages_big(message.chat.id, text=text + report)
                                    report = f''
                            if not report == '':
                                send_messages_big(message.chat.id, text=report)

                            # –¥–µ–ª–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫—É
                            markupinline = InlineKeyboardMarkup()
                            markupinline.add(
                                InlineKeyboardButton(f"–ù—É –Ω–∞—Ö–µ—Ä! ‚õî", callback_data=f"dungeon_no|{dt.timestamp()}|{band}|{dungeon_km}"),
                                InlineKeyboardButton(f"–Ø –≤ –¥–µ–ª–µ! ‚úÖ", callback_data=f"dungeon_yes|{dt.timestamp()}|{band}|{dungeon_km}")
                                )

                            text = text + report_yes + '\n' + report_no
                            send_messages_big(message.chat.id, text=text, reply_markup=markupinline)

                            # if not privateChat:
                            #     if len(pingusers) > 0:
                            #         msg = send_messages_big(message.chat.id, text=first_string + report)
                            #         bot.pin_chat_message(message.chat.id, msg.message_id)
                    elif 'remind' == response.split(':')[1]:
                        # jugi:remind:2019-11-04T17:12:00+02:00
                        if not userIAm.getLocation():
                            send_messages_big(message.chat.id, text='–Ø –Ω–µ –∑–Ω–∞—é –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ "–Ø –∏–∑ –û–¥–µ—Å—Å—ã" –∏–ª–∏ "–Ø –∏–∑ –ú–æ—Å–∫–≤—ã" –∏ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ò–Ω–∞—á–µ, —è –±—É–¥—É –¥—É–º–∞—Ç—å, —á—Ç–æ —Ç—ã –∂–∏–≤–µ—à—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–æ—è—Å–µ –ø–æ –ì—Ä–∏–Ω–≤–∏—á—É, –∞ —ç—Ç–æ +3 —á–∞—Å–∞ –∫ –ú–æ—Å–∫–≤–µ, +2 –∫ –ö–∏–µ–≤—É –∏ —Ç.–¥. –ò —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º-–ª–∏–±–æ!')
                            return
                        if not userIAm.getTimeZone():
                            send_messages_big(message.chat.id, text='–í—Ä–æ–¥–µ, –≥–æ—Ä–æ–¥ –∑–Ω–∞—é, –∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∑–∞–±—ã–ª. –ù–∞–ø–∏—à–∏ –º–Ω–µ –µ—â–µ —Ä–∞–∑ "–Ø –∏–∑ –û–¥–µ—Å—Å—ã" –∏–ª–∏ "–Ø –∏–∑ –ú–æ—Å–∫–≤—ã"!` ')
                            return
                                                
                        time_str = response.split(response.split(":")[1])[1][1:]
                        dt = parse(time_str)
                        tz = datetime.strptime(userIAm.getTimeZone(),"%H:%M:%S")
                        dt = dt - timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                        if (dt.timestamp() < datetime.now().timestamp()):
                            msg = send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'timeisout').fulfillment_text)
                            return

                        reply_message = None
                        if message.reply_to_message:
                            reply_message = message.reply_to_message.json

                        pending_messages.insert_one({ 
                            'chat_id': message.chat.id,
                            'reply_message': reply_message,
                            'create_date': datetime.now().timestamp(),
                            'user_id': message.from_user.username,  
                            'state': 'WAIT',
                            'pending_date': dt.timestamp(),
                            'dialog_flow_text': 'remindme',
                            'text': None})
                        
                        msg = send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_message_zbs').fulfillment_text)
                    elif 'sticker' == response.split(':')[1]: 
                        # 0      1               2                          3        4
                        #jugi:sticker:CAADAgADawgAAm4y2AABx_tlRP2FVS8WBA:–ú–∏-–º–∏-–º–∏:NEW_YEAR
                        
                        photo = response.split(':')[2]
                        if len(response.split(':')) > 4:
                            photo = random.sample(getSetting(code='STICKERS', name=response.split(':')[4]), 1)[0]['value']
                        text = response.split(':')[3]
                        if text:
                            bot.send_message(message.chat.id, text=text)   
                        
                        bot.send_sticker(message.chat.id, photo)   
                    elif 'tobeornottoby' == response.split(':')[1]:
                        #jugi:tobeornottoby
                        r = random.random()
                        if (r <= 0.5):
                            bot.send_message(message.chat.id, text='–ë—ã—Ç—å, –µ–ø—Ç–∞!')
                        else:
                            bot.send_message(message.chat.id, text='–•–ó, —è –±—ã –Ω–µ —Ä–∏—Å–∫–Ω—É–ª...')
                    elif 'setlocation' == response.split(':')[1]:
                        #jugi:setlocation:–ú–æ—Å–∫–≤–∞
                        Client.PARAMS = {"format": "json", "apikey": config.YANDEX_GEOCODING_API_KEY}
                        location = Client.coordinates(response.split(':')[2])
                        if location:
                            tf = timezonefinder.TimezoneFinder()
                            timezone_str = tf.certain_timezone_at(lat=float(location[1]), lng=float(location[0]))
                            if timezone_str is None:
                                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'understand').fulfillment_text)
                            else:
                                # Display the current time in that time zone
                                timezone = pytz.timezone(timezone_str)
                                dt = datetime.utcnow()
                                userIAm.setLocation(response.split(':')[2])
                                userIAm.setTimeZone(str(timezone.utcoffset(dt)))
                                updateUser(userIAm)
                                send_messages_big(message.chat.id, text='–ö—Ä—É—Ç–æ!\n–≠—Ç–æ ' + str(timezone.utcoffset(dt)) + ' –∫ –ì—Ä–∏–Ω–≤–∏—á—É!')

                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'understand').fulfillment_text)
                    elif 'rating' == response.split(':')[1]:
                        # if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
                        #     pass
                        # else:
                        #     send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'shot_censorship').fulfillment_text)
                        #     return

                        report = ''
                        report = report + f'üèÜ–¢–û–ü 5 –£–ë–ò–ô–¶ üêê<b>{getMyGoatName(userIAm.getLogin())}</b>\n'
                        report = report + '\n'
                        setting = getSetting(code='REPORTS',name='KILLERS')
                        from_date = setting.get('from_date')
                        to_date = setting.get('to_date')

                        if (not from_date):
                            from_date = (datetime(2019, 1, 1)).timestamp() 

                        if (not to_date):
                            to_date = (datetime.now() + timedelta(minutes=180)).timestamp()

                        dresult = battle.aggregate([
                            {   "$match": {
                                    "$and" : [
                                        { 
                                            "date": {
                                                '$gte': from_date,
                                                '$lt': to_date
                                                    }       
                                        },
                                        {
                                            "band": {'$in': getMyBandsName(userIAm.getLogin())}   
                                        }]
                                }
                            }, 
                            {   "$group": {
                                "_id": "$winnerWarior", 
                                "count": {
                                    "$sum": 1}}},
                                
                            {   "$sort" : { "count" : -1 } }
                            ])

                        findInWinner = 0
                        i = 0
                        for d in dresult:
                            user_name = d.get("_id")   

                            user = getUserByName(user_name)
                            if user == None: continue

                            gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
                            if gerb == None: gerb = ''

                            i = i + 1
                            if i == 1:
                                emoji = f'ü•á - {gerb}'
                            elif i == 2:
                                emoji = f'ü•à - {gerb}'    
                            elif i == 3:
                                emoji = f'ü•â - {gerb}'
                            else:
                                emoji = f'{gerb}'
                            
                            if user_name == tools.deEmojify(message.from_user.first_name):
                                user_name = f'<b>{user_name}</b>'
                                findInWinner = i

                            if i <= 5: report = report + f'{i}. {emoji}{user_name}: {d.get("count")}\n' 

                        if (i == 0): 
                            report = report + f'–ú–∏—Ä! –ü–∏—Å! ‚úåÔ∏èüå∑üê£\n'
                        else:
                            if (findInWinner > 5): report = report + f'\nüëπ –¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {findInWinner}!\n'
                        #==========================================    
                        report = report + f'\n' 
                        report = report + f'‚ö∞Ô∏è–¢–û–ü 5 –ù–ï–£–î–ê–ß–ù–ò–ö–û–í\n' 
                        report = report + '\n'
                        dresult = battle.aggregate([
                            {   "$match": {
                                    "$and" : [
                                        { 
                                            "date": {
                                                '$gte': from_date,
                                                '$lt': to_date
                                                    }       
                                        },
                                        {
                                            "band": {'$in': getMyBandsName(userIAm.getLogin())}    
                                        }]
                                } 
                            }, 
                            {   "$group": {
                                "_id": "$loseWarior", 
                                "count": {
                                    "$sum": 1}}},
                                
                            {   "$sort" : { "count" : -1 } }
                            ])

                        findInLoser = 0
                        i = 0
                        for d in dresult:
                            user_name = d.get("_id")  
                            user = getUserByName(user_name)
                            if user == None: continue

                            gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
                            if gerb == None: gerb = ''
                                
                            i = i + 1
                            if i == 1:
                                emoji = f'üëª - {gerb}'
                            elif i == 2:
                                emoji = f'üíÄÔ∏è - {gerb}'    
                            elif i == 3:
                                emoji = f'‚ò†Ô∏è - {gerb}'
                            else:
                                emoji = f'{gerb}'

                            if user_name == tools.deEmojify(message.from_user.first_name):
                                user_name = f'<b>{user_name}</b>'
                                findInLoser = i

                            if i <= 5: report = report + f'{i}. {emoji}{user_name}: {d.get("count")}\n' 
                             

                        if (i == 0): 
                            report = report + f'–ú—ã –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã ‚úåÔ∏èüëªüíÄ‚ò†Ô∏è\n'
                        else:
                            if (findInLoser > 5): report = report + f'\nüß∏ –¢–≤–æ–µ –º–µ—Å—Ç–æ - {findInLoser}!\n'

                        report = report + f'\n' 
                        report = report + f'{report_man_of_day(message.from_user.username)}'
                        
                        report = report + f'\n' 
                        report = report + f'{report_koronavirus()}'

                        report = report + f'\n' 
                        report = report + '‚è∞ c ' + time.strftime("%d-%m-%Y", time.gmtime(from_date)) + ' –ø–æ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(to_date))
                        
                        send_messages_big(message.chat.id, text=report)
                else:
                    try:
                        send_messages_big(message.chat.id, text=response, reply_markup=None)
                    except:
                        logger.info("Error!")
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'understand').fulfillment_text)
        return
    else:
        if (privateChat or isGoatSecretChat(message.from_user.username, message.chat.id)):
            if (random.random() <= float(getSetting(code='PROBABILITY', name='I_DONT_KNOW_YOU'))):
                send_messages_big(message.chat.id, text=getResponseDialogFlow(message, 'you_dont_our_band_gangster').fulfillment_text)

def report_koronavirus():
    counter = 0
    for user in USERS_ARR:
        if user.isAccessoryItem(acc_koronavirus):
            counter = counter + 1

    report = f'ü¶á –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: <b>{counter}</b>\n' 
    return report

def report_man_of_day(message_user_name: str):
    setting = getSetting(code='REPORTS',name='KILLERS')
    from_date = setting.get('from_date')
    to_date = setting.get('to_date')

    if (not from_date):
        from_date = (datetime(2019, 1, 1)).timestamp() 

    if (not to_date):
        to_date = (datetime.now() + timedelta(minutes=180)).timestamp()

    report = f'üë®‚Äç‚ù§Ô∏è‚Äçüë®–¢–û–ü 5 "–ü–∏–¥–æ—Ä –¥–Ω—è"\n' 
    report = report + '\n'
    dresult = man_of_day.aggregate([
        {   "$match": {
                "$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    }
                    ]
            } 
        }, 
        {   "$group": {
            "_id": "$login", 
            "count": {
                "$sum": 1}}},
            
        {   "$sort" : { "count" : -1 } }
        ])
    
    acc = 'üëë "–ü–∏–¥–æ—Ä –¥–Ω—è"'
    findInLoser = 0
    i = 0
    pidor_counter = 0
    pidor_user_now = None

    for d in dresult:
        user_login = d.get("_id")  
        user = getUserByLogin(user_login)
        i = i + 1
        if i == 1:
            emoji = 'üíù - '
        elif i == 2:
            emoji = 'üíñ - '    
        elif i == 3:
            emoji = '‚ù§Ô∏è - '
        else:
            emoji = ''
        
        user_name = user_login
        if user:
            user_name = f'{user.getNameAndGerb()}'
            if user.isAccessoryItem(acc):
                pidor_counter = i
                pidor_user_now = user
        else:
            user_name = user_login

        if message_user_name  == user_login:
            user_name = f'<b>{user_name}</b>'
            findInLoser = i

        if i <= 5: report = report + f'{i}. {emoji}{user_name}: <b>{d.get("count")}</b>\n' 

    if (i == 0): 
        report = report + f'–í –Ω–∞—à–µ–º –∫–æ–∑–ª–µ –Ω–µ—Ç –ø–∏–¥–æ—Ä–æ–≤!\n'
    else:
        if (findInLoser > 5): report = report + f'\nüíî –¢–≤–æ–µ –ø–∏–¥–æ—Ä—å–µ –º–µ—Å—Ç–æ - {findInLoser}!\n'
    
    if pidor_user_now:
        report = report + f'\n–ü–∏–¥–æ—Ä –¥–Ω—è <b>{pidor_user_now.getNameAndGerb()}</b> –Ω–∞ {pidor_counter} –º–µ—Å—Ç–µ\n'
    
    return report

@bot.callback_query_handler(func=lambda call: call.data.startswith("dungeon"))
def callback_query(call):
    #  logger.info(f'{call.from_user.username} {call.data}')
    #     0              1           2        3
    # dungeon_no|{dt.timestamp()}|{band}|{dungeon_km}

    if isUserBan(call.from_user.username):
       bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è —è–¥—Ä—ë–Ω—ã–π –±–∞–Ω, –¥—Ä—É–∂–∏—â–µ!")
       return


    band = call.data.split('|')[2]
    user = getUserByLogin(call.from_user.username)
    if not user.getBand() == band:
        bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –¥–ª—è —Ç–≤–æ–µ–π –±–∞–Ω–¥—ã!")
        return

    dt = datetime.fromtimestamp(float(call.data.split('|')[1]))
    time_str = str(dt.hour).zfill(2)+':'+str(dt.minute).zfill(2)
    dungeon_km = call.data.split('|')[3]
    dungeon = getSetting(code='DUNGEONS', value=dungeon_km) 

    markupinline = InlineKeyboardMarkup()
    markupinline.add(
        InlineKeyboardButton(f"–ù—É –Ω–∞—Ö–µ—Ä! ‚õî", callback_data=f"dungeon_no|{dt.timestamp()}|{band}|{dungeon_km}"),
        InlineKeyboardButton(f"–Ø –≤ –¥–µ–ª–µ! ‚úÖ", callback_data=f"dungeon_yes|{dt.timestamp()}|{band}|{dungeon_km}")
        )

    text = f'‚úäÔ∏è–ó–∞—Ö–≤–∞—Ç <b>{dungeon_km}–∫–º {dungeon}\nü§ü{band}\n–≤ {time_str}</b>\n\n'

    signedup = False
    if call.data.startswith("dungeon_yes"):
        signedup = True
        bot.answer_callback_query(call.id, "–ö—Ä–∞—Å–∞–≤—á–∏–∫!")
    elif call.data.startswith("dungeon_no"):
        bot.answer_callback_query(call.id, "–°—ã–∫–ª–æ!")
        signedup = False

    row = {}
    row.update({'date': float(call.data.split('|')[1])})
    row.update({'login': call.from_user.username})
    row.update({'band': user.getBand()})
    row.update({'goat': getMyGoatName(call.from_user.username)})
    row.update({'dungeon_km': dungeon_km})
    row.update({'dungeon': dungeon})
    row.update({'signedup': signedup})
    row.update({'invader': False})
    row.update({'state': "NEW"})

    newvalues = { "$set": row }
    result = dungeons.update_one({
        'login': call.from_user.username, 
        'date': float(call.data.split('|')[1]),
        'band': user.getBand(),
        'dungeon_km': dungeon_km
        }, newvalues)
    if result.matched_count < 1:
        dungeons.insert_one(row)

    report_yes = '<b>–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞—Ö–≤–∞—Ç:</b>\n'
    i = 0
    for dun in dungeons.find({
        'date': float(call.data.split('|')[1]),
        'band': user.getBand(),
        'dungeon_km': dungeon_km,
        'signedup': True
        }):
        i = i + 1
        user = getUserByLogin(dun['login'])
        if user:
            gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
            if gerb == None: gerb = ''
            report_yes = report_yes + f'  {i}. {gerb}{user.getName()}\n'
        else:
            report_yes = report_yes + f'  {i}. {dun["login"]}\n'

    if i == 0:
        report_yes = report_yes + '  –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n'

    report_no = '<b>–û—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—Ö–≤–∞—Ç–∞:</b>\n'
    i = 0
    for dun in dungeons.find({
        'date': float(call.data.split('|')[1]),
        'band': user.getBand(),
        'dungeon_km': dungeon_km,
        'signedup': False
        }):
        i = i + 1
        user = getUserByLogin(dun['login'])
        if user:
            gerb = user.getSettingValue("üÉè–ú–æ–π –≥–µ—Ä–±")
            if gerb == None: gerb = ''
            report_no = report_no + f'  {i}. {gerb}{user.getName()}\n'
        else:
            report_no = report_no + f'  {i}. {dun["login"]}\n'

    if i == 0:
        report_no = report_no + '  –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è\n'

    text = text + report_yes + '\n' + report_no
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)
    # logger.info(f'{call.from_user.username} {text}')

@bot.callback_query_handler(func=lambda call: call.data.startswith("toreward"))
def callback_query(call):
    if isUserBan(call.from_user.username):
        bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è —è–¥—Ä—ë–Ω—ã–π –±–∞–Ω, –¥—Ä—É–∂–∏—â–µ!")
        return

    if not isGoatBoss(call.from_user.username):
        if not isAdmin(call.from_user.username):
            bot.answer_callback_query(call.id, "–¢–µ–±–µ –Ω–µ –ø–æ–ª–æ–∂–µ–Ω–æ!")
            return

    if 'toreward_exit' in call.data:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–†–∞–∑–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', parse_mode='HTML')
        return

    if call.data.startswith("toreward_next"):
        #        0         1     2
        # toreward_next|{login}|10
        counter  = int(call.data.split('|')[2])
        login = call.data.split('|')[1]
        user = getUserByLogin(login)
        markupinline = InlineKeyboardMarkup()
        i = 1
        addExit = False
        for acc in getSetting(code='ACCESSORY',name='REWARDS'):
            if user and user.getAccessory() and acc['value'] in user.getAccessory():
                continue    

            if i <= counter:
                pass
            else:
                markupinline.add(InlineKeyboardButton(f"{acc['value']}", callback_data=f"toreward|{login}|{acc['name']}"))
                if i == counter + 10:
                    markupinline.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ üîô", callback_data=f"toreward_back|{login}|{counter - 10}"), InlineKeyboardButton(f"–î–∞–ª–µ–µ üîú", callback_data=f"toreward_next|{login}|{counter + 10}"))
                    markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))
                    addExit = True
                    break
            i = i + 1
        if not addExit:
            markupinline.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ üîô", callback_data=f"toreward_back|{login}|{counter - 10}"))
            markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))
        
        text=f'–í—Å–µ–º –±–∞–Ω–¥–∏—Ç–∞–º –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤—ã–¥–∞–Ω–æ! –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {counter} –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤'
        if user:
            text=f'–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã {user.getName()}:\n{user.getAccessoryReport()}'
        
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)
        return

    if call.data.startswith("toreward_back"):
        # toreward_back|{login}|10"
        counter  = int(call.data.split('|')[2])
        login = call.data.split('|')[1]
        user = getUserByLogin(login)
        markupinline = InlineKeyboardMarkup()
        i = 1
        addExit = False
        for acc in getSetting(code='ACCESSORY',name='REWARDS'):
            if user.getAccessory() and acc['value'] in user.getAccessory():
                continue    

            if i <= counter:
                pass
            else:
                markupinline.add(InlineKeyboardButton(f"{acc['value']}", callback_data=f"toreward|{login}|{acc['name']}"))
                if i == counter + 10:
                    if counter == 0:
                        markupinline.add(InlineKeyboardButton(f"–î–∞–ª–µ–µ üîú", callback_data=f"toreward_next|{login}|{counter + 10}"))
                    else:
                        markupinline.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ üîô", callback_data=f"toreward_back|{login}|{counter - 10}"), InlineKeyboardButton(f"–î–∞–ª–µ–µ üîú", callback_data=f"toreward_next|{login}|{counter + 10}"))
                    
                    markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))
                    addExit = True
                    break
            i = i + 1
        if not addExit:
            markupinline.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ üîô", callback_data=f"toreward_next|{login}|{i+10}"))
            markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))

        text=f'–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã {user.getName()}:\n{user.getAccessoryReport()}'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)
        return

    bot.answer_callback_query(call.id, "–¢—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä")
    login = call.data.split('|')[1]
    user = getUserByLogin(login)
    
    for acc in getSetting(code='ACCESSORY', name='REWARDS'):
        if acc['name'] == call.data.split('|')[2]:
            if login.lower() == '–≤—Å–µ–º':
                for user in list(USERS_ARR):
                    user.addAccessory(acc['value'])
                    updateUser(user)
                send_messages_big(call.message.chat.id, text= '–ë–∞–Ω–¥–∏—Ç—ã!\n' + getResponseDialogFlow(call.message, 'new_accessory_all').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc["value"]}') 
                break
            else:
                user.addAccessory(acc['value'])
                updateUser(user)
                send_messages_big(call.message.chat.id, text=user.getName() + '!\n' + getResponseDialogFlow(call.message, 'new_accessory_add').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc["value"]}') 
                break

    markupinline = InlineKeyboardMarkup()
    counter = 10
    i = 1
    for acc in getSetting(code='ACCESSORY', name='REWARDS'):
        if user and user.getAccessory() and acc['value'] in user.getAccessory():
            continue    

        markupinline.add(InlineKeyboardButton(f"{acc['value']}", callback_data=f"toreward|{login}|{acc['name']}"))
        if i == counter :
            markupinline.add(InlineKeyboardButton(f"–î–∞–ª–µ–µ üîú", callback_data=f"toreward_next|{login}|{counter}"))
            markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"toreward_exit"))
            break
        i = i + 1
    if user:
        text=f'–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã {user.getName()}:\n{user.getAccessoryReport()}'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pickupaccessory"))
def callback_query(call):
    # pickupaccessory|{login}|{acc}

    if isUserBan(call.from_user.username):
        bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è —è–¥—Ä—ë–Ω—ã–π –±–∞–Ω, –¥—Ä—É–∂–∏—â–µ!")
        return

    if not isGoatBoss(call.from_user.username):
        if not isAdmin(call.from_user.username):
            bot.answer_callback_query(call.id, "–¢–µ–±–µ –Ω–µ –ø–æ–ª–æ–∂–µ–Ω–æ!")
            return

    login = call.data.split('|')[1]
    user = getUserByLogin(login)
    markupinline = InlineKeyboardMarkup()

    accessory = ''
    if user.getAccessory() and len(user.getAccessory())>0:
        i = 0
        for acc in user.getAccessory():
            accessory = accessory + f'‚ñ´Ô∏è {acc}\n'
            i = i + 1
    text = '–£ –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!'

    if 'pickupaccessory_exit' in call.data:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–û—Ç—ä—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω!\n–û—Å—Ç–∞–ª–∏—Å—å –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã:\n{accessory}', parse_mode='HTML')
        return

    acc = user.getAccessory()[int(call.data.split('|')[2])]
    bot.answer_callback_query(call.id, "–¢—ã –∑–∞–±—Ä–∞–ª —ç—Ç–æ —Å –ø–æ–ª–∫–∏...")
    
    user.removeAccessory(acc)
    updateUser(user)

    accessory = ''
    if user.getAccessory() and len(user.getAccessory())>0:
        i = 0
        for acc in user.getAccessory():
            accessory = accessory + f'‚ñ´Ô∏è {acc}\n'
            markupinline.add(InlineKeyboardButton(f"{acc}", callback_data=f"pickupaccessory|{login}|{i}"))
            i = i + 1
    text = '–£ –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!'

    if not accessory == '':
        text = getResponseDialogFlow(call.message, None, 'shot_message_pickupaccessory').fulfillment_text + f'\n\n{accessory}\n–ß—Ç–æ –∏–∑—å—è—Ç—å?'
        
    markupinline.add(InlineKeyboardButton(f"–í—ã–π—Ç–∏ ‚ùå", callback_data=f"pickupaccessory_exit|{login}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)

@bot.callback_query_handler(func=lambda call: call.data.startswith("capture_"))
def callback_query(call):
    if isUserBan(call.from_user.username):
        bot.answer_callback_query(call.id, "–£ —Ç–µ–±—è —è–¥—Ä—ë–Ω—ã–π –±–∞–Ω, –¥—Ä—É–∂–∏—â–µ!")
        return
    
    goat = call.data.split('_')[3]
    if not goat == getMyGoatName(call.from_user.username):
        bot.answer_callback_query(call.id, "–≠—Ç–æ –ø–ª–∞–Ω –Ω–µ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!")
        return

    raid_date = datetime.fromtimestamp(float(call.data.split('_')[2]))
    logger.info(f'raid_date: {raid_date}')
    raid_location = int(call.data.split('_')[1])
    logger.info(f'raid_location: {raid_location}')

    myquery = { 
                'rade_date': raid_date.timestamp(),
                'goat': goat
            }
            
    markupinline = InlineKeyboardMarkup()

    if call.data.startswith("capture_0"):
        bot.answer_callback_query(call.id, "–°—ã–∫–ª–æ!")
    else:
        bot.answer_callback_query(call.id, "–¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü—ã!")


    users_onraid = []
    for row in plan_raids.find(myquery):
        users_onraid = row['users']
        if row['rade_location'] == raid_location:
            find_user = False
            for u in users_onraid:
                if call.from_user.username == u:
                    find_user = True
                    break
            if not find_user:
                users_onraid.append(call.from_user.username)
        else:
            for u in users_onraid:
                if call.from_user.username == u:
                    users_onraid.remove(call.from_user.username)
    
        newvalues = { "$set": { 
                        'users': users_onraid
                    }} 
        u = plan_raids.update_one({ 
                    'rade_date': raid_date.timestamp(),
                    'rade_location': row["rade_location"],
                    'goat': goat
                }, newvalues)

    for radeloc in plan_raids.find({
                'rade_date': raid_date.timestamp(),
                'goat': goat}): 
        users_onraid = radeloc['users']
        find = False
        for u in users_onraid:
            if u == call.from_user.username:
                find = True
        
        # if not find:
        markupinline.add(InlineKeyboardButton(f"{radeloc['rade_text']}", callback_data=f"capture_{radeloc['rade_location']}_{raid_date.timestamp()}_{goat}"))
                                
    text = get_raid_plan(raid_date, goat)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)

def send_messages_big(chat_id: str, text: str, reply_markup=None):
    strings = text.split('\n')
    tmp = ''
    msg = None
    for s in strings:
        if len(tmp + s) < 4000:
            tmp = tmp + s +'\n'
        else: 
            msg = bot.send_message(chat_id, text=tmp, parse_mode='HTML', reply_markup=reply_markup)
            tmp = s + '\n'

    msg = bot.send_message(chat_id, text=tmp, parse_mode='HTML', reply_markup=reply_markup)
    return msg

def send_message_to_admin(text: str):
    for adm in getSetting(code='ADMINISTRATOR'):
        if adm.get('chat'):
            send_messages_big(adm.get('chat'), text)

def reply_to_big(message: str, text: str):
    strings = text.split('\n')
    tmp = ''
    msg = types.Message.de_json(message)

    for s in strings:
        if len(tmp + s) < 4000:
            tmp = tmp + s +'\n'
        else: 
            result = bot.reply_to(msg, text=tmp, parse_mode='HTML')
            tmp = s + '\n'

    result = bot.reply_to(msg, text=tmp, parse_mode='HTML')
    return result

def pending_message():
    ids = []
    for pending_message in pending_messages.find(
            {
                '$and' : [
                            {
                                'state': f'WAIT'   
                            }
                            ,
                            { 
                               'pending_date': {
                                   '$lt': datetime.now().timestamp()
                                       }       
                            }
                        ]
            }
        ):
        
        text = pending_message.get('text')
        if text == None:
            text = ''
        if pending_message.get('dialog_flow_text'):
            text = getResponseDialogFlow(None, pending_message.get('dialog_flow_text')).fulfillment_text + '\n' + text
        
        if pending_message.get('reply_message'):
            reply_to_big(pending_message.get('reply_message'), text)
        else:
            send_messages_big(pending_message.get('chat_id'), text, None)
        ids.append(pending_message.get('_id')) 

    for id_str in ids:
        myquery = {"_id": ObjectId(id_str)}
        newvalues = { "$set": { "state": 'CANCEL'} }
        u = pending_messages.update_one(myquery, newvalues)

def ping_on_reade(fuckupusers, chat_id):
    # –ü–∏–Ω–≥—É–µ–º
    if len(fuckupusers) == 0:
        return

    counter = 0
    fusers = []
    fuckupusersReport = f'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã! {getResponseDialogFlow(None, "rade_motivation").fulfillment_text}</b>\nü§ü<b>{fuckupusers[0].getBand()}</b>\n'
    for fu in fuckupusers:
        counter = counter + 1
        fusers.append(fu)
        if fu.isPing():
            fuckupusersReport = fuckupusersReport + f'{counter}. @{fu.getLogin()}\n'
        else:
            fuckupusersReport = fuckupusersReport + f'{counter}. üîï{fu.getLogin()}\n'

        if counter % 5 == 0:
            send_messages_big(chat_id, text=fuckupusersReport)
            fusers = []
            fuckupusersReport = f'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã! {getResponseDialogFlow(None, "rade_motivation").fulfillment_text}</b>\nü§ü<b>{fuckupusers[0].getBand()}</b>\n'

    if len(fusers) > 0:
        send_messages_big(chat_id, text=fuckupusersReport)

def rade():
    tz = config.SERVER_MSK_DIFF
    now_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)

    logger.info('check rade time: now ' + str(now_date))
    
    # –ù–æ–≤—ã–π –≥–æ–¥!
    if now_date.day == 1 and now_date.month == 1 and now_date.hour == 0 and now_date.minute in (0,10,15,20,25,35,35,50) and now_date.second < 15:
        for goat in getSetting(code='GOATS_BANDS'):
            report = ''
            try:
                r = requests.get(f'{config.ANECDOT_URL}={16}', verify=False, timeout=7)
                report = r.text[12:-2]
            except:
                report = '–ß—ë—Ç —è –ø—Ä–∏—É–Ω—ã–ª... –ù–∏—á–µ–≥–æ –≤ –≥–æ–ª–æ–≤—É –Ω–µ –∏–¥–µ—Ç... –° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º!'
            send_messages_big(goat['chats']['info'], report)
            bot.send_sticker(goat['chats']['info'], random.sample(getSetting(code='STICKERS', name='NEW_YEAR'), 1)[0]['value']) 

    # 14 —Ñ–µ–≤—Ä–∞–ª—è!
    if now_date.day == 14 and now_date.month == 2 and now_date.hour == 10 and now_date.minute in (0,10,15,20,25,35,35,50) and now_date.second < 15:
        for goat in getSetting(code='GOATS_BANDS'):
            report = ''
            try:
                r = requests.get(f'{config.ANECDOT_URL}={16}', verify=False, timeout=7)
                report = r.text[12:-2]
            except:
                report = '–ß—ë—Ç —è –ø—Ä–∏—É–Ω—ã–ª... –ù–∏—á–µ–≥–æ –≤ –≥–æ–ª–æ–≤—É –Ω–µ –∏–¥–µ—Ç... –° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º!'
            send_messages_big(goat['chats']['info'], report)
            bot.send_sticker(goat['chats']['info'], random.sample(getSetting(code='STICKERS', name='LOVE_DAY'), 1)[0]['value']) 
    # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    if now_date.hour == 8 and now_date.minute == 0 and now_date.second < 15:
        updateUser(None)
        for user in USERS_ARR:
            if user.getBirthday():
                bday = time.gmtime(user.getBirthday())
                if now_date.day == bday.day and now_date.month == bday.month: 
                    send_messages_big(goat['chats']['info'], f'{user.getNameAndGerb()}!\n{getResponseDialogFlow(None, "happy_birthday").fulfillment_text}')

    # –ü–∏–¥–æ—Ä –¥–Ω—è
    if now_date.hour == 9 and now_date.minute == 0 and now_date.second < 15:
        updateUser(None)
        user_in_game = []
        for user in USERS_ARR:
            usersettings = getUserSetting(user.getLogin(), 'üë®‚Äç‚ù§Ô∏è‚Äçüë®–£—á–∞—Å—Ç–Ω–∏–∫ "–ü–∏–¥–æ—Ä –¥–Ω—è"')
            if usersettings:
                user_in_game.append(user)

        winners = random.sample(user_in_game, 1)
        if len(winners)>0:
            userWin = winners[0]
            
            setting = getSetting(code='REPORTS',name='KILLERS')
            from_date = setting.get('from_date')
            to_date = setting.get('to_date')

            if (not from_date):
                from_date = (datetime(2019, 1, 1)).timestamp() 

            if (not to_date):
                to_date = (datetime.now() + timedelta(minutes=180)).timestamp()
                
            dresult = man_of_day.aggregate([
            {   "$match": {
                    "$and" : [
                        { 
                            "date": {
                                '$gte': from_date,
                                '$lt': to_date
                                    }       
                        }
                        ]
                } 
            }, 
            {   "$group": {
                "_id": "$login", 
                "count": {
                    "$sum": 1}}},
                
            {   "$sort" : { "count" : -1 } }
            ])

            old_pidors = []
            for d in dresult:
                user_login = d.get("_id")  
                user = getUserByLogin(user_login)
                if user:
                    old_pidors.append(user)

            pidor1 = None
            pidor2 = None
            if len(old_pidors)>1:
                pu = random.sample(old_pidors, 1)[0]
                pidor1 = pu.getNameAndGerb()
                old_pidors.remove(pu)
                pidor2 = random.sample(old_pidors, 1)[0].getNameAndGerb()
            else:
                pidor1 = random.sample(list(USERS_ARR), 1)[0].getNameAndGerb()
                pidor2 = random.sample(list(USERS_ARR), 1)[0].getNameAndGerb()

            text = f'üéäüéâüçæ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í –∫–æ–Ω–∫—É—Ä—Å–µ "üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë® –ü–∏–¥–æ—Ä –¥–Ω—è" —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–∂–¥–∞–µ—Ç...\n{userWin.getName()} (@{userWin.getLogin()})!!!\n\nüë¨ –î–≤–∞ –±—ã–≤–∞–ª—ã—Ö –ø–∏–¥–æ—Ä–∞, {pidor1} –∏ {pidor2}, –ø–æ–¥ –≤–∑–¥–æ—Ö–∏ —Ç–æ–ª–ø—ã –Ω–∞–¥–µ–≤–∞—é—Ç –Ω–∞ —Ç–≤–æ—é –≥–æ–ª–æ–≤—É üëë –∑–æ–ª–æ—Ç—É—é –∫–æ—Ä–æ–Ω—É –∏, –ª–∞—Å–∫–æ–≤–æ —à–ª–µ–ø–∞—è —Ç–µ–±—è –ø–æ –ø–æ–ø–µ, —Å–≥–æ–Ω—è—é—Ç —Å –ø–æ–º–æ—Å—Ç–∞!\nüéÅ –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!'
            chat = getMyGoat(userWin.getLogin())['chats']['info']
            send_messages_big(chat, text=text)

            acc = 'üëë "–ü–∏–¥–æ—Ä –¥–Ω—è"'
            for user in USERS_ARR:
                if acc in user.getAccessory():
                    user.removeAccessory(acc)
                    updateUser(user)
                    break
            
            userWin.addAccessory(acc)
            updateUser(userWin)
            send_messages_big(chat, text=userWin.getName() + '!\n' + getResponseDialogFlow(None, 'new_accessory_add').fulfillment_text + f'\n\n‚ñ´Ô∏è {acc}') 
            row = {}
            row.update({'date':now_date.timestamp()})
            row.update({'login':userWin.getLogin()})
            row.update({'description':acc})
            man_of_day.insert_one(row)
            send_messages_big(chat, text=report_man_of_day('')) 

    if now_date.hour in (0, 8, 16) and now_date.minute in (0, 30, 50) and now_date.second < 15:
        updateUser(None)
        for goat in getSetting(code='GOATS_BANDS'):
            if getPlanedRaidLocation(goat['name'], planRaid = True)['rade_location']:
                report = radeReport(goat, True)
                send_messages_big(goat['chats']['secret'], text=f'<b>{str(60-now_date.minute)}</b> –º–∏–Ω—É—Ç –¥–æ —Ä–µ–π–¥–∞!\n' + report)

    if now_date.hour in (1, 9, 17) and now_date.minute == 0 and now_date.second < 15:
        logger.info('Rade time now!')
        updateUser(None)
        for goat in getSetting(code='GOATS_BANDS'):
            if getPlanedRaidLocation(goat['name'], planRaid = False)['rade_location']:
                report = radeReport(goat)
                send_messages_big(goat['chats']['secret'], text='<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–π–¥–∞</b>\n' + report)
                saveRaidResult(goat)
                statistic(goat['name'])

    if now_date.hour in (1, 9, 17) and now_date.minute == 5 and now_date.second < 15:
        logger.info('Clear raid info!')
        for goat in getSetting(code='GOATS_BANDS'):
            registered_users.update_many(
                {'band':{'$in':getGoatBands(goat.get('name'))}},
                { '$set': { 'raidlocation': None} }
            )
        updateUser(None)

def getPlanedRaidLocation(goatName: str, planRaid = True):
    tz = config.SERVER_MSK_DIFF
    raid_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
    hour = raid_date.hour

    if planRaid and raid_date.hour >= 17:
        raid_date = raid_date + timedelta(days=1)

    if raid_date.hour >=1 and raid_date.hour <9:
        hour = 9
        if not planRaid:
            hour = 1
    elif raid_date.hour >=9 and raid_date.hour <17:
        hour = 17
        if not planRaid:
            hour = 9
    if raid_date.hour >=17 or raid_date.hour <1:
        hour = 1
        if not planRaid:
            hour = 17

    raidNone = {}
    raidNone.update({'rade_date': (raid_date.replace(hour=hour, minute=0, second=0, microsecond=0)).timestamp()})
    raidNone.update({'rade_location': None})
    raidNone.update({'rade_text': None})

    for raid in plan_raids.find({
                                '$and' : 
                                [
                                    {
                                        'rade_date': {
                                        '$gte': (raid_date.replace(hour=0, minute=0, second=0, microsecond=0)).timestamp(),
                                        '$lt': (raid_date.replace(hour=23, minute=59, second=59, microsecond=0)).timestamp(),
                                        }},
                                    {
                                        'goat': goatName
                                    }
                                ]
                            }):
        if datetime.fromtimestamp(raid.get('rade_date')).hour == hour:
            return raid
    return raidNone

def saveRaidResult(goat):
    logger.info(f"saveRaidResult : {goat.get('name')}")
    raid = getPlanedRaidLocation(goat['name'], planRaid=False)
    location = raid.get('rade_location')
    raiddate = raid.get('rade_date')

    for band in goat.get('bands'):
        for user in list(USERS_ARR):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –±–∞–Ω–¥–∞–º
            if user.getBand() and user.getBand() == band.get('name'):
                row = {}
                row.update({'date': raiddate})
                row.update({'login': user.getLogin()})
                row.update({'band': band.get('name')})
                row.update({'goat': goat.get('name')})
                row.update({'planed_location': location})
                row.update({'planed_location_text': raid.get('rade_text')})
                row.update({'user_location': None})
                row.update({'on_raid': False})
                row.update({'on_planed_location': False})
                if user.getRaidLocation():
                    row.update({'on_raid': True}) 
                    row.update({'user_location': user.getRaidLocation()})    
                    if location and user.getRaidLocation() == location:
                        row.update({'planed_location': True})
                newvalues = { "$set": row }
                result = report_raids.update_one({"login": f"{user.getLogin()}", 'date': raiddate}, newvalues)
                if result.matched_count < 1:
                    report_raids.insert_one(row)

def radeReport(goat, ping=False):

    raidInfo = getPlanedRaidLocation(goat.get('name'))
    planed_raid_location = raidInfo['rade_location']
    planed_raid_location_text = raidInfo['rade_text']
    goat_report = {}
    goat_report.update({'name': goat.get('name')})
    goat_report.update({'chat': goat['chats']['secret']})
    goat_report.update({'bands': []})

    for band in goat.get('bands'):
        band_arr = {}
        band_arr.update({'name': band.get('name')})
        band_arr.update({'weight_all': 0})
        band_arr.update({'weight_on_rade': 0})
        band_arr.update({'counter_all': 0})
        band_arr.update({'counter_on_rade': 0})
        band_arr.update({'usersonrade': []})
        band_arr.update({'usersoffrade': []})


        for user in list(USERS_ARR):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –∫–æ–∑–ª–∞–º
            if user.getBand() and user.getBand() == band.get('name'):
                band_arr.update({'weight_all': band_arr.get('weight_all') + user.getRaidWeight()})
                band_arr.update({'counter_all': band_arr.get('counter_all') + 1}) 
                if user.getRaidLocation():
                    band_arr.update({'weight_on_rade': band_arr.get('weight_on_rade') + user.getRaidWeight()})
                    band_arr.update({'counter_on_rade': band_arr.get('counter_on_rade') + 1}) 
                    band_arr.get('usersonrade').append(user)
                else:
                    band_arr.get('usersoffrade').append(user)
        goat_report.get('bands').append(band_arr)

    report = f'üêê<b>{goat_report.get("name")}</b>\n'
    if planed_raid_location_text:
        report = report + f'{planed_raid_location_text}\n'
    report = report + '\n'
    
    for bands in goat_report.get('bands'):
        report = report + f'ü§ü<b>{bands.get("name")}</b>\n'
        if bands.get("weight_all") > 0:
            report = report + f'üë§{bands.get("counter_on_rade")}/{bands.get("counter_all")} üèãÔ∏è‚Äç‚ôÇÔ∏è{bands.get("weight_on_rade")}/{bands.get("weight_all")} <b>{str(int(bands.get("weight_on_rade")/bands.get("weight_all")*100))}</b>%\n'
        else:
            report = report + f'üë§{bands.get("counter_on_rade")}/{bands.get("counter_all")} üèãÔ∏è‚Äç‚ôÇÔ∏è<b>0</b>%\n'
        report = report + f'\n'

        if len(bands.get("usersonrade")):
            report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–Ω–∞ —Ä–µ–π–¥–µ</b>:\n'
            counter = 0            
            for u in bands.get("usersonrade"):
                counter = counter + 1
                location = str(u.getRaidLocation())
                if u.getRaidLocation() == 1:
                    location = '?'
                if planed_raid_location:
                    if planed_raid_location == u.getRaidLocation():
                        location = '‚úîÔ∏è' + location
                report = report + f'{counter}. {u.getNameAndGerb()} üìç{location}–∫–º\n'
            report = report + f'\n'
        if ping:
            if planed_raid_location:
                ping_on_reade(bands.get("usersoffrade"), goat['chats']['secret'] )
    return report

def statistic(goatName: str):
    report = f'üêê<b>{goatName}</b>\n\n'
    report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–†–µ–π–¥–µ—Ä—ã</b>:\n'

    setting = getSetting(code='REPORTS', name='RAIDS')
    from_date = setting.get('from_date')
    to_date = setting.get('to_date')

    if (not from_date):
        from_date = (datetime(2019, 1, 1)).timestamp() 

    if (not to_date):
        to_date = (datetime.now() + timedelta(minutes=180)).timestamp()

    dresult = report_raids.distinct('date', {"$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]})

    raid_counter = len(dresult)
    report =  f'üëä<b>{raid_counter}</b> —Ä–µ–π–¥–æ–≤\n' + report

    dresult = report_raids.aggregate([
        {   "$match": {
                "$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "on_raid": True
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]
            }
        }, 
        {   
            "$group": 
                {
                    "_id": "$login",
                    "count": 
                        {
                            "$sum": 1
                        }
                }
        },    
        {   
            "$sort" : { "count" : -1 } 
        }
    ])
    
    report_boss = ''
    for d in dresult:
        name = d.get("_id")
        user = getUserByLogin(name)
        count = d.get("count")

        if isGoatBoss(name):
            report_boss = f'üòé –Ω–∞—à –±–æ—Å—Å <b>{user.getName()}</b> –ø–æ—Å–µ—Ç–∏–ª —Ä–µ–π–¥—ã {count} —Ä–∞–∑. –°–∫–∞–∂–∏—Ç–µ –∑–∞ —ç—Ç–æ –µ–º—É "–°–ø–∞—Å–∏–±–æ!" –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.\n'
            continue
        
        if user:
            name = user.getName().strip()
        report = report + f'{count} {name}\n'


    dresult = report_raids.aggregate([
        {   "$match": {
                "$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "on_raid": False
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]
            }
        }, 
        {   
            "$group": 
                {
                    "_id": "$login",
                    "count": 
                        {
                            "$sum": 1
                        }
                }
        },    
        {   
            "$sort" : { "count" : -1 } 
        }
    ])
    
    bad_raid_counter = raid_counter
    hrenraid = []

    report = report + f'\nü§¨ <b>–•—Ä–µ–Ω–µ–π–¥–µ—Ä—ã</b>:\n'
    j = 0
    for d in dresult:
        name = d.get("_id")
        count = d.get("count")
        if j == 0:
            bad_raid_counter = count

        if isGoatBoss(name):
            report_boss = report_boss + f'–ï—â–µ –Ω–∞—à –±–æ—Å—Å –Ω–µ –±—ã–ª –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–π–¥–∞—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—ã–ª –∑—è–Ω—è—Ç –ø–µ—Ä–µ–ø–∏—Å—å—é —Ö—Ä–µ–Ω–µ–π–¥–µ—Ä–æ–≤, –∑–∞–±–∏–≤—à–∏—Ö –Ω–∞ –æ–±—â–∏–µ —Ü–µ–ª–∏! –≠—Ç–æ, –Ω–∞–¥–µ—é—Å—å, –≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ?!\n'
            report_boss = '\n'+report_boss
            continue
        user = getUserByLogin(name)
        login = name
        if user:
            name = user.getName().strip()

        if bad_raid_counter == count:
            hrenraid.append(f'@{login} {name}\n')
        else:
            report = report + f'{count} {name} \n'
        j = j + 1

    hrenraid_report = ''
    i = 0
    for s in hrenraid:
        if i == 0:
            hrenraid_report = f'\nüö™ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã—Ö–æ–¥</b>:\n'    
        
        hrenraid_report = hrenraid_report + s;
        i = i + 1

    report = report + hrenraid_report + report_boss + f'\n' 
    report = report + '‚è∞ c ' + time.strftime("%d-%m-%Y", time.gmtime(from_date)) + ' –ø–æ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(to_date))

    return report                                 

# 5 secund
def pending_job():
    while True:
        pending_message()
        time.sleep(5)

# 15 secund
def rade_job():
    while True:
        rade()
        time.sleep(15)


def flex_job(counter: int, chatid: str):
    send_messages_big(chatid, f'–©–∞ –∑–∞–µ–±–∞—à—É {counter} —Å—Ç–∏–∫–µ—Ä–æ–≤!')
    bot.send_sticker(chatid, random.sample(getSetting(code='STICKERS', name='BOT_GO_FLEX'), 1)[0]['value'])
    for i in range(0, counter):
        bot.send_sticker(chatid, random.sample(getSetting(code='STICKERS', name='BOT_FLEX'), 1)[0]['value'])
        time.sleep(random.randint(500,2000) / 1000)
    bot.send_sticker(chatid, random.sample(getSetting(code='STICKERS', name='BOT_END_FLEX'), 1)[0]['value'])
    send_messages_big(chatid, f'–•–æ—Ä–æ—à–æ, –∑–∞–µ–±–∞—à–∏–ª {counter} —Å—Ç–∏–∫–µ—Ä–æ–≤!')

def main_loop():
    if (config.POLLING):
        bot.remove_webhook()
        bot.polling(none_stop=True)
        while 1:
            time.sleep(3)
    else:
        app = web.Application()
        # Process webhook calls
        async def handle(request):
            request_body_dict = await request.json()
            update = telebot.types.Update.de_json(request_body_dict)
            bot.process_new_updates([update])
            return web.Response()


        app.router.add_post('/', handle)
        
        # Remove webhook, it fails sometimes the set if there is a previous webhook
        bot.remove_webhook()
        # Set webhook
        bot.set_webhook(url=f"https://{config.WEBHOOK_HOST}/bot/{str(config.WEBHOOK_PORT)[3:4]}")
        # Build ssl context
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
        context.load_cert_chain(config.WEBHOOK_SSL_CERT, config.WEBHOOK_SSL_PRIV)
        # Start aiohttp server
        web.run_app(
            app,
            host=config.WEBHOOK_LISTEN,
            port=config.WEBHOOK_PORT,
            ssl_context=context
        )

if __name__ == '__main__': 
    try:
        # proccess = Process(target=fight_job, args=())
        # proccess.start() # Start new thread

        proccessPending_messages = Process(target=pending_job, args=())
        proccessPending_messages.start() # Start new thread

        proccessRade = Process(target=rade_job, args=())
        proccessRade.start() # Start new thread 

        main_loop()      
    except KeyboardInterrupt:
        print('\nExiting by user request.\n')
        sys.exit(0)