#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import config
import users 
import wariors
import tools

import logging
import ssl

from aiohttp import web
from yandex_geocoder import Client

import telebot
from telebot import apihelper
from telebot import types
from telebot.types import Message
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import apiai

import time
from datetime import datetime
from datetime import timedelta
from dateutil.parser import parse
import timezonefinder, pytz

import threading
from multiprocessing import Process

import sys
import json
import requests

import random
from random import randrange

import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["jugidb"]
registered_users = mydb["users"]
registered_wariors = mydb["wariors"]
battle          = mydb["battle"]
competition     = mydb["competition"]
settings        = mydb["settings"]
pending_messages = mydb["pending_messages"]
plan_raids      = mydb["rades"]
report_raids    = mydb["report_raids"]

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)
bot = telebot.TeleBot(config.TOKEN)

USERS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
for x in registered_users.find():
    USERS_ARR.append(users.importUser(x))

WARIORS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—É—Å—Ç–æ—à–∏
for x in registered_wariors.find():
    WARIORS_ARR.append(wariors.importWarior(x))

SETTINGS_ARR = [] # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
for setting in settings.find():
    SETTINGS_ARR.append(setting)

def getSetting(code: str, name=None):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ """
    result = settings.find_one({'code': code})
    if (result):
        if name:
            for arr in result.get('value'):
                if arr['name'] == name:
                    return arr['value'] 
        else:
            return result.get('value')

ADMIN_ARR = []
for adm in list(getSetting('ADMINISTRATOR')):
    ADMIN_ARR.append(adm)

def isAdmin(login: str):
    for adm in list(ADMIN_ARR):
        if login.lower() == adm.get('login').lower(): return True
    return False

def getAdminChat(login: str):
    for adm in list(ADMIN_ARR):
        if login.lower() == adm.get('login').lower(): return adm.get('chat')
    return None

def isRegisteredUserName(name: str):
    name = tools.deEmojify(name)

    for user in list(USERS_ARR):
        if name.lower() == user.getName().lower(): return True
    return False

def isRegisteredUserLogin(login: str):
    for user in list(USERS_ARR):
        try:
            if login.lower() == user.getLogin().lower(): 
                return True
        except:
            pass        
    return False

def isGoatBoss(login: str):
    for goat in getSetting('GOATS_BANDS'):
        if goat['boss'] == login:
            return True
    return False

def isBandBoss(login: str):
    for goat in getSetting('GOATS_BANDS'):
        for band in goat['bands']:
            if band['boss'] == login:
                return True
    return False

def getMyBands(login: str):
    user = getUserByLogin(login)
    if not user:
        return None

    for goat in getSetting('GOATS_BANDS'):
        for band in goat['bands']:
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                return goat['bands']
    return None        

def getMyBandsName(login: str):
    user = getUserByLogin(login)
    if not user:
        return None
    
    for goat in getSetting('GOATS_BANDS'):
        find = False
        bands = []
        for band in goat['bands']:
            bands.append(band.get('name'))
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                find = True
        if find:
            return bands
    return None     

def getMyGoat(login: str):
    user = getUserByLogin(login)
    if not user:
        return None

    for goat in getSetting('GOATS_BANDS'):
        for band in goat['bands']:
            if user.getBand() and user.getBand().lower() == band.get('name').lower():
                return goat['name']

    return None 

def getGoatBands(goatName: str):
    for goat in getSetting('GOATS_BANDS'):
        if goat.get('name') == goatName:
            bands = []
            for band in goat['bands']:
                bands.append(band.get('name'))
            return bands
    return None 

def isUsersBand(login: str, band: str):
    bands = getMyBands(login)
    if bands == None: 
        return False
    for b in bands:
        if b.get('name') == band:
            return True
    return False

def hasAccessToWariors(login: str):
    user = getUserByLogin(login)
    if not user:
        return False

    for band in getSetting('BANDS_ACCESS_WARIORS'):
        if user.getBand() and band.get('band').lower() == user.getBand().lower():
            return True

    return False

def getUserByLogin(login: str):
    for user in list(USERS_ARR):
        try:
            if login.lower() == user.getLogin().lower(): return user
        except:
            pass
    return None

def getUserByName(name: str):
    for user in list(USERS_ARR):
        if name.lower().strip() == user.getName().lower().strip(): return user
    return None

def updateUser(newuser: users.User):
    if newuser == None:
        pass
    else:
        newvalues = { "$set": json.loads(newuser.toJSON()) }
        z = registered_users.update_one({"login": f"{newuser.getLogin()}"}, newvalues)

    USERS_ARR.clear()
    for x in registered_users.find():
        USERS_ARR.append(users.importUser(x))

def isUserBan(login: str):
    userIAm = getUserByLogin(login)
    if userIAm:
        if userIAm.getTimeBan():
            tz = config.SERVER_MSK_DIFF
            date_for = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
            if date_for.timestamp() < userIAm.getTimeBan():
                return True
            else:
                userIAm.setTimeBan(None)
                updateUser(userIAm)
    return False

def getWariorFraction(string: str):
    if (string.startswith('‚öôÔ∏è')):
        return '‚öôÔ∏è–£–±–µ–∂–∏—â–µ 4'
    elif (string.startswith('üî™')):
        return 'üî™–ì–æ–ª–æ–≤–æ—Ä–µ–∑—ã'
    elif (string.startswith('üí£')):
        return 'üí£–ú–µ–≥–∞—Ç–æ–Ω–Ω–∞'
    elif (string.startswith('‚öõÔ∏è')):
        return '‚öõÔ∏è–†–µ—Å–ø—É–±–ª–∏–∫–∞'
    elif (string.startswith('üëô')):
        return 'üëô–ö–ª—É–± –±–∏–∫–∏–Ω–∏'

def getWariorByName(name: str, fraction: str):
    name = tools.deEmojify(name)
    for warior in list(WARIORS_ARR):
        if name == warior.getName() and fraction == warior.getFraction(): 
            return warior
    return None

def isKnownWarior(name: str, fraction: str):
    for warior in list(WARIORS_ARR):
        if warior.getName() and name.lower() == warior.getName().lower() and warior.getFraction() == fraction: 
            return True
    return False

def update_warior(warior: wariors.Warior):
    if warior == None:
        pass
    else:
        if isKnownWarior(warior.getName(), warior.getFraction()):
            wariorToUpdate = getWariorByName(warior.getName(), warior.getFraction())
            updatedWarior = wariors.mergeWariors(warior, wariorToUpdate)

            newvalues = { "$set": json.loads(updatedWarior.toJSON()) }
            z = registered_wariors.update_one({
                "name": f"{updatedWarior.getName()}", 
                "fraction": f"{updatedWarior.getFraction()}"
                }, newvalues)
        else:
            registered_wariors.insert_one(json.loads(warior.toJSON()))

    WARIORS_ARR.clear()
    for x in registered_wariors.find():
        WARIORS_ARR.append(wariors.importWarior(x))
        
def get_raid_plan(raid_date, goat):
    plan_for_date = '–ü–ª–∞–Ω —Ä–µ–π–¥–æ–≤ –Ω–∞ ' + time.strftime("%d-%m-%Y", time.gmtime( raid_date.timestamp() )) + '\n'
    find = False
    for raid in plan_raids.find({
                                '$and' : 
                                [
                                    {
                                        'rade_date': {
                                        '$gte': (raid_date.replace(hour=0, minute=0, second=0, microsecond=0)).timestamp(),
                                        '$lt': (raid_date.replace(hour=23, minute=59, second=59, microsecond=0)).timestamp(),
                                        }},
                                    {
                                        'goat': goat
                                    }
                                ]
                            }):
        t = datetime.fromtimestamp(raid.get('rade_date') ) 
        plan_for_date = plan_for_date + str(t.hour).zfill(2)+':'+str(t.minute).zfill(2) + ' ' + raid.get('rade_text') + '\n'
        find = True

    if find == False:
        plan_for_date = plan_for_date + '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–π–¥–æ–≤'

    return plan_for_date

def setSetting(code: str, value: str):

    """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ """
    myquery = { "code": code }
    newvalues = { "$set": { "value": json.dumps(value) } }
    u = settings.update_one(myquery, newvalues)

    SETTINGS_ARR.clear() # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    for setting in settings.find():
        SETTINGS_ARR.append(setting)
    return True

def getButtonsMenu(list_buttons):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
    groups_names = []
    for group in list_buttons:
        groups_names.append(types.KeyboardButton(f'{group}'))
    markup.add(*groups_names)
    return markup

def build_menu(buttons, n_cols, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu

def write_json(data, filename = "./pips.json"):
    with open(filename, 'a', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def getResponseDialogFlow(text):
    if '' == text.strip():
        text = '–≥–æ–ª–æ—Å!'
    request = apiai.ApiAI(config.AI_TOKEN).text_request() # –¢–æ–∫–µ–Ω API –∫ Dialogflow
    request.lang = 'ru' # –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–∞–Ω –∑–∞–ø—Ä–æ—Å
    request.session_id = 'BatlabAIBot' # ID –°–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞ (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É—á–∏—Ç—å –±–æ—Ç–∞)
    request.query = text # –ü–æ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç —é–∑–µ—Ä–∞
    
    # contextStr = '[{"name":"sss", "lifespan":1, "parameters":{"s": "1"}}]';
    # contextObj = json.loads(contextStr);
    # request.contexts = contextObj
    # print(request.contexts)
    responseJson = json.loads(request.getresponse().read().decode('utf-8'))
    response = responseJson['result']['fulfillment']['speech'] # –†–∞–∑–±–∏—Ä–∞–µ–º JSON –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ - –ø—Ä–∏—Å—ã–ª–∞–µ–º —é–∑–µ—Ä—É, –µ—Å–ª–∏ –Ω–µ—Ç - –±–æ—Ç –µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª
    return response

@bot.message_handler(content_types=['new_chat_members', 'left_chat_members'])
def send_welcome_and_dismiss(message):
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(3)
    response = getResponseDialogFlow(message.content_type)
    if response:
        bot.send_message(message.chat.id, text=response)

# Handle all other messages
@bot.inline_handler(lambda query: query.query)
def default_query(inline_query):
    if not hasAccessToWariors(inline_query.from_user.username):
        r = types.InlineQueryResultArticle(id=0, title = '–•—Ä–µ–Ω–∞ –Ω–∞–¥–æ? –¢—ã –Ω–µ –∏–∑ –Ω–∞—à–∏—Ö –±–∞–Ω–¥!', input_message_content=types.InputTextMessageContent(getResponseDialogFlow('i_dont_know_you')), description=getResponseDialogFlow('i_dont_know_you'))
        bot.answer_inline_query(inline_query.id, [r], cache_time=3060)
        return
    
    try:
            result = []
            i = 0
            for x in registered_wariors.find({'$or':[
                    {'name':{'$regex':inline_query.query, '$options':'i'}},
                    {'band':{'$regex':inline_query.query, '$options':'i'}}]
                }):
                warior = wariors.importWarior(x)
                r = types.InlineQueryResultArticle(id=i, title = f'{warior.getFractionSmall()}{warior.getName()}',  
                                                            input_message_content=types.InputTextMessageContent('–î–∂—É, –ø—Ä–æ—Ñ–∏–ª—å @'+warior.getName()), 
                                                            description=warior.getProfileInline())
                result.append(r)
                i = i + 1
            bot.answer_inline_query(inline_query.id, result, cache_time=30)
    except Exception as e:
        print(e)

# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    response = getResponseDialogFlow('start')
    if response:
        bot.send_message(message.chat.id, text=response)

# Handle all other messages
@bot.message_handler(content_types=['document'])
def get_message_photo(message):
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow('user_banned'))
        return

# Handle all other messages
@bot.message_handler(content_types=["photo"])
def get_message_photo(message):
    #write_json(message.json)

    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow('user_banned'))
        return

    if (message.forward_from and message.forward_from.username == 'WastelandWarsBot'):
        
        privateChat = ('private' in message.chat.type)
        ww = wariors.fromPhotoToWarioirs(message.forward_date, message.caption, message.photo[0].file_id)
        wariorShow = None
        for warior in ww:
            s = f'‚è∞{tools.getTimeEmoji(warior.getTimeUpdate())} ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(warior.getTimeUpdate()))
            print(warior.getName() + ' ' + s)
            update_warior(warior)
            if not isRegisteredUserName(warior.getName()):
                wariorShow = warior
        
        if privateChat:
            if not wariorShow == None: 
                if (wariorShow and wariorShow.photo):
                    bot.send_photo(message.chat.id, wariorShow.photo, wariorShow.getProfile())
                else:
                    send_messages_big(message.chat.id, text=wariorShow.getProfile())
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
    
# Handle all other messages
@bot.message_handler(content_types=["sticker"])
def get_message_stiker(message):
    #write_json(message.json)
    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        send_messages_big(message.chat.id, text=f'{message.from_user.username} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å—Ç–∏–∫–µ—Ä–Ω—É—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow('user_banned'))
        return

    privateChat = ('private' in message.chat.type)
    if privateChat:
        send_messages_big(message.chat.id, text=message.sticker.file_id)

# Handle '/fight'
@bot.message_handler(commands=['fight'])
def send_welcome(message):
    privateChat = ('private' in message.chat.type)
    if not privateChat:
        return

    list_buttons = []
    isReady = True
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):
        if cuser.get('state') == 'WAIT':
            #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
            bot.send_message(message.chat.id, text='–¢—ã —Å–∞–º –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
            return

    counter_rabbit = 0
    counter_urban = 0
    for cuser in competition.find({'state': 'READY'}):
        if (cuser.get('band') == 'üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ'):
            counter_urban = counter_urban + 1
        if (cuser.get('band') == 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏'):
            counter_rabbit = counter_rabbit + 1

    if counter_urban >= 1 and counter_rabbit >= 1:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        
        myquery = {'state': 'READY'}
        newvalues = { '$set': { 'state': 'FIGHT' } }
        u = competition.update_many(myquery, newvalues)

        bot.send_message(message.chat.id, text='–ë–æ–π —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        bot.send_message(message.chat.id, text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–π—Ü–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–∑ –±–∞–Ω–¥!', reply_markup=getButtonsMenu(list_buttons) )

# '‚úÖ –ì–æ—Ç–æ–≤–æ'
@bot.message_handler(func=lambda message: message.text and '‚úÖ –ì–æ—Ç–æ–≤–æ' in message.text and message.chat.type == 'private', content_types=['text'])
def ok_message(message: Message):

    list_buttons = []
 
    isReady = True
    for cuser in competition.find({
                                    'login': message.from_user.username, 
                                    'state': 'WAIT'
                                    }):
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        isReady = False

    if isReady:
        bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        myquery = {'login': message.from_user.username, 
                     'state': 'WAIT'}
        newvalues = { '$set': { 'state': 'READY' } }
        u = competition.update_one(myquery, newvalues)
        bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ...', reply_markup=getButtonsMenu(list_buttons) )


# üé≤'‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ' 'üõ° –ó–∞—â–∏—Ç–∞' 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è'
@bot.message_handler(func=lambda message: message.text and message.text in ('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ', 'üõ° –ó–∞—â–∏—Ç–∞', 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')  and message.chat.type == 'private', content_types=['text'])
def chose_strategy_message(message: Message):

    etalone = []
    etalone.append('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ')
    etalone.append('üõ° –ó–∞—â–∏—Ç–∞')
    etalone.append('üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')

    real = []

    list_buttons = []
 
    isReplay = False
    isReady = False
    isBand = False
    isStrategy = False
    lenStr = 0
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True
        
        if cuser.get('band'):
            isBand = True

        if cuser.get('strategy'):
            isStrategy = True
            lenStr = len(cuser.get('strategy'))
            real = cuser.get('strategy')

    if lenStr >= 3:
        if not isBand:
            list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
            bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –±–∞–Ω–¥—É!', reply_markup=getButtonsMenu(list_buttons) )
        else:
            if isReady:
                #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
                list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
                bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )
            else:
                list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
                bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )
    elif  lenStr == 0:
        for x in etalone:
            if x == message.text:
                pass
            else:
                list_buttons.append(x)
        real.append(message.text)
        
        myquery = {'login': message.from_user.username, 
                                    '$or': [
                                                {'state': 'WAIT'},
                                                {'state': 'READY'}]    
                                    }
        newvalues = { '$set': { 'strategy': real } }
        u = competition.update_one(myquery, newvalues)
        bot.send_message(message.chat.id, text='–î–∞–ª—å—à–µ...', reply_markup=getButtonsMenu(list_buttons) )
    else: # 1 - 2
        real.append(message.text)
        myquery = {'login': message.from_user.username, 
                                    # 'chat': message.chat.id,   
                                    '$or': [
                                                {'state': 'WAIT'},
                                                {'state': 'READY'}]    
                                    }

        newvalues = { '$set': { 'strategy':  real} }
        u = competition.update_one(myquery, newvalues)

        for x in etalone:
            find = False
            for z in real:
                if z == x:
                    find = True;
                    break;
            if not find: list_buttons.append(x)
        if len(list_buttons) == 0:
            if not isBand:
                list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –±–∞–Ω–¥—É!', reply_markup=getButtonsMenu(list_buttons) )
            else:
                if isReady:
                    #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
                    list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
                    bot.send_message(message.chat.id, text='–ì–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) ) 
                else:
                    list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
                    bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤–æ!', reply_markup=getButtonsMenu(list_buttons) )      
        else:
            bot.send_message(message.chat.id, text='–î–∞–ª—å—à–µ... –ï—â–µ...', reply_markup=getButtonsMenu(list_buttons) )        

# üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è
@bot.message_handler(func=lambda message: message.text and 'üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è' in message.text and message.chat.type == 'private', content_types=['text'])
def strategy_message(message: Message):
        
    list_buttons = []
 
    isReplay = False
    isReady = False
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True

    if isReady:
        #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
    
        bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        list_buttons.append('‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ')
        list_buttons.append('üõ° –ó–∞—â–∏—Ç–∞')
        list_buttons.append('üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è')
        bot.send_message(message.chat.id, text='–í—ã–±–∏—Ä–∞–π', reply_markup=getButtonsMenu(list_buttons) )


# üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ or üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏
@bot.message_handler(func=lambda message: message.text and message.text and message.text in ('üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ', 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏') and message.chat.type == 'private', content_types=['text'])
def my_band_message(message: Message):

    list_buttons = []
 
    isReplay = False
    isStrategy = False
    isReady = False
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('strategy'):
            isStrategy = True
        if cuser.get('state') == 'READY':
            isReady = True

    myquery = {'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }

    newvalues = { '$set': { 'band': message.text } }
    u = competition.update_one(myquery, newvalues)

    if not isStrategy:
        list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
        bot.send_message(message.chat.id, text='–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å–æ —Å–≤–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –±–æ—é!', reply_markup=getButtonsMenu(list_buttons) )
    else:
        if isReady:
            #list_buttons.append('üí∞ –°—Ç–∞–≤–∫–∞')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        
            bot.send_message(message.chat.id, text='–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ!', reply_markup=getButtonsMenu(list_buttons) )
        else:
            list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')
            bot.send_message(message.chat.id, text='–ñ–º–∏ –≥–æ—Ç–æ–≤!', reply_markup=getButtonsMenu(list_buttons) )


# ‚öñÔ∏è –ë–∞–Ω–¥–∞
@bot.message_handler(func=lambda message: message.text and '‚öñÔ∏è –ë–∞–Ω–¥–∞' in message.text  and message.chat.type == 'private', content_types=['text'])
def band_message(message: Message):

    list_buttons = []
 
    isReplay = False
    isBand = False
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'}]    
                                }):                                                
        isReplay = True
        if cuser.get('band'):
            isBand = True
        break

    if not isReplay:
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        bot.send_message(message.chat.id, text='–¢—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=getButtonsMenu(list_buttons) )

    else:
        if not isBand:
            list_buttons.append('üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ')
            list_buttons.append('üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏')
        if not cuser.get('strategy'):
            list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
            
        bot.send_message(message.chat.id, text='–í—ã–±–∏—Ä–∞–π!', reply_markup=getButtonsMenu(list_buttons) )


# '‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π'
@bot.message_handler(func=lambda message: message.text and '‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π' in message.text and message.chat.type == 'private', content_types=['text'])
def register_message(message: Message):
    
    list_buttons = []
    if not isRegisteredUserLogin(message.from_user.username):
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        bot.send_message(message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é! –ë—Ä–æ—Å—å –º–Ω–µ —Å–≤–æ–∏ –ø–∏–ø-–±–æ–π –∏–ª–∏ –∏–¥–∏ –Ω–∞—Ñ–∏–≥!', reply_markup=getButtonsMenu(list_buttons))
        return

    isReplay = False
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]   
                                }):                                                 
        if cuser.get('state') == 'READY':
            list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
            list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
            bot.send_message(message.chat.id, text='–ë–æ–π –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω!', reply_markup=getButtonsMenu(list_buttons) )
            return
        isReplay = True
        

    if not isReplay:
        u = getUserByLogin(message.from_user.username)
        competition.insert_one({'login': message.from_user.username, 
                                'chat': message.chat.id,
                                'date': datetime.now().timestamp(), 
                                'state': 'WAIT',
                                'name': u.getName(),
                                'health': u.getHealth(),
                                'damage': u.getDamage(),
                                'armor': u.getArmor(),
                                'accuracy': u.getAccuracy(),
                                'agility': u.getAgility(),
                                'charisma': u.getCharisma(),
                                'bm': u.getBm(),                                
                                'strategy': None,
                                'band': None,
                                'killedBy': None})

        list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
        list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
        bot.send_message(message.chat.id, text=getResponseDialogFlow('sign_up_for_a_fight'), reply_markup=getButtonsMenu(list_buttons) )
    else:
        if not cuser.get('band'):
            list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
        if not cuser.get('strategy'):
            list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')

        bot.send_message(message.chat.id, text=getResponseDialogFlow('sign_up_replay'), reply_markup=getButtonsMenu(list_buttons) )

# Handle ü§º –í —Ä–∏–Ω–≥
@bot.message_handler(func=lambda message: message.text and 'ü§º –í —Ä–∏–Ω–≥' in message.text and message.chat.type == 'private', content_types=['text'])
def ring_message(message: Message):

    list_buttons = []

    isReplay = False
    isStrategy = False
    isReady = False
    isBand = False
    for cuser in competition.find({'login': message.from_user.username, 
                                # 'chat': message.chat.id,   
                                '$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]   
                                }):                                                 
        isReplay = True
        if cuser.get('state') == 'READY':
            isReady = True

        if cuser.get('strategy'):
            isStrategy = True

        if cuser.get('band'):
            isBand = True

        if isStrategy and isBand and len(cuser.get('strategy')) >= 3 and cuser.get('state') == 'WAIT':
            list_buttons.append('‚úÖ –ì–æ—Ç–æ–≤–æ')     

        if cuser.get('state') == 'WAIT':
            if not cuser.get('band'):
                list_buttons.append('‚öñÔ∏è –ë–∞–Ω–¥–∞')
            if not cuser.get('strategy') or len(cuser.get('strategy')) <3:
                list_buttons.append('üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è')
            break
            

    usersOnCompetition = 'ü§º –í —Ä–∏–Ω–≥–µ:\n\n'
    i = 0
    for cuser in competition.find({'$or': [
                                            {'state': 'WAIT'},
                                            {'state': 'READY'},
                                            {'state': 'FIGHT'}]
                                        }):
        i = i + 1
        band = cuser.get("band")
        state = cuser.get('state')
        if state == 'WAIT':
            state = '‚è≥'
        elif state == 'READY':
            state = '‚úÖ'
        elif state == 'FIGHT':
            state = '‚öî'
        if not band:
            band = '‚ùî'

        usersOnCompetition = usersOnCompetition + f'{i}.{state} {band[0:1]} {cuser.get("name")} üìØ{cuser.get("bm")}\n'

    if i == 0:
        usersOnCompetition = '–ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Ä–∏–Ω–≥–µ! –ó–∞–ø–∏—à–∏—Å—å –ø–µ—Ä–≤—ã–º!\n'
        list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
    else:
        if (not isReplay):
            list_buttons.append('‚öîÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–π')
        list_buttons.append('ü§º –í —Ä–∏–Ω–≥')
        usersOnCompetition = usersOnCompetition + '\n–ù–∞—á–∞—Ç—å –±–æ–π /fight\n' 
    
    usersOnCompetition = usersOnCompetition + '\n' 
    usersOnCompetition = usersOnCompetition + '‚è∞ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(datetime.now().timestamp())) +'\n'

    bot.send_message(message.chat.id, text=usersOnCompetition, reply_markup=getButtonsMenu(list_buttons) ) 

# Handle all other messages
@bot.message_handler(func=lambda message: True, content_types=['text'])
def main_message(message):
    #write_json(message.json)
    logger.info('message.from_user.username: '+message.from_user.username)
    logger.info('message.text: ' + message.text)

    black_list = getSetting('BLACK_LIST', message.from_user.username)
    if black_list:
        send_messages_big(message.chat.id, text=f'{message.from_user.username} –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –±–∞–Ω {black_list}', reply_markup=None)
        send_message_to_admin(f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! \n {message.from_user.username} –Ω–∞–ø–∏—Å–∞–ª –î–∂—É:\n\n {message.text}')
        return

    if isUserBan(message.from_user.username):
        bot.delete_message(message.chat.id, message.message_id)
        user = getUserByLogin(message.from_user.username)
        name = message.from_user.username
        if user:
            name = user.getName()
        send_messages_big(message.chat.id, text=f'{name} —Ö–æ—Ç–µ–ª —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏—à—å:\n' + getResponseDialogFlow('user_banned'), reply_markup=None)
        return


    privateChat = ('private' in message.chat.type)
    callJugi = (privateChat 
                            or message.text.lower().startswith('–¥–∂—É') 
                            or (message.reply_to_message 
                                and message.reply_to_message.from_user.is_bot 
                                and message.reply_to_message.from_user.username in ('FriendsBrotherBot', 'JugiGanstaBot') )
                )

    findUser = isRegisteredUserLogin(message.from_user.username)
    userIAm = getUserByLogin(message.from_user.username)

    logger.info('findUser: ' + str(findUser))
    
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
    if not privateChat:
        markup.add('–î–∂—É, üìã –û—Ç—á–µ—Ç', '–î–∂—É, üìú –ü—Ä–æ—Ñ–∏–ª—å', f'–î–∂—É, ‚è∞ –ø–ª–∞–Ω —Ä–µ–π–¥–∞')
    else:
        markup.add('üìã –û—Ç—á–µ—Ç', 'üìú –ü—Ä–æ—Ñ–∏–ª—å', 'ü§º –í —Ä–∏–Ω–≥', f'‚è∞ –ü–ª–∞–Ω —Ä–µ–π–¥–∞')



    if (message.text.startswith('üìü–ü–∏–ø-–±–æ–π 3000') and 
            '/killdrone' not in message.text and 
            '–¢–û–ü –§–†–ê–ö–¶–ò–ô' not in message.text and 
            '–°–û–î–ï–†–ñ–ò–ú–û–ï –†–Æ–ö–ó–ê–ö–ê' not in message.text and 
            '–ü–†–ò–ü–ê–°–´ –í –†–Æ–ö–ó–ê–ö–ï' not in message.text and 
            '–†–ï–°–£–†–°–´ –∏ –•–õ–ê–ú' not in message.text ):
        if (message.forward_from and message.forward_from.username == 'WastelandWarsBot'):
            if '–¢–û–ü –ò–ì–†–û–ö–û–í:' in message.text:
                ww = wariors.fromTopToWariorsBM(message.forward_date, message, registered_wariors)
                for warior in ww:
                    update_warior(warior)
                send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
                return
            
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow('deceive'))
                return

            user = users.User(message.from_user.username, message.forward_date, message.text)
            if findUser==False:   
                x = registered_users.insert_one(json.loads(user.toJSON()))
                updateUser(None)
                send_message_to_admin(f'‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n {user.getProfile()}')
            else:
                updatedUser = users.updateUser(user, users.getUser(user.getLogin(), registered_users))
                updateUser(updatedUser)
            if privateChat:
                send_messages_big(message.chat.id, text=getResponseDialogFlow('setpip'))
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('deceive')) 
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and 'FIGHT!' in message.text):
        #write_json(message.json)
        ww = wariors.fromFightToWarioirs(message.forward_date, message, USERS_ARR, battle)
        if ww == None:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('dublicate'))
            return
        for warior in ww:
            update_warior(warior)
        
        send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '/accept' in message.text and '/decline' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            fraction = getWariorFraction(message.text.split(' –∏–∑ ')[1].strip())
            warior = getWariorByName(message.text.split('üë§')[1].split(' –∏–∑ ')[0], fraction)
            if warior == None:
                send_messages_big(message.chat.id, text='–ù–∏—á–µ–≥–æ –æ –Ω–µ–º –Ω–µ –∑–Ω–∞—é!')
            elif (warior and warior.photo):
                bot.send_photo(message.chat.id, warior.photo, warior.getProfile())
            else:
                send_messages_big(message.chat.id, text=warior.getProfile())
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_you_cant'))
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–¢—ã –æ—Ü–µ–Ω–∏–ª –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ–∫—Ä—É–≥.' in message.text and '–†—è–¥–æ–º –∫—Ç–æ-—Ç–æ –µ—Å—Ç—å.' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            strings = message.text.split('\n')
            i = 0
            find = False
            report = ''
            counter = 0
            report_goat_info = ''
            goats = []

            for s in strings:
                if '|' in strings[i]:
                    name = strings[i]
                    fraction = getWariorFraction(strings[i])
                    name = name.replace('‚öôÔ∏è', '@').replace('üî™', '@').replace('üí£', '@').replace('‚öõÔ∏è', '@').replace('üëô', '@')
                    name = name.split('@')[1].split('|')[0].strip()
                    warior = getWariorByName(name, fraction)
                    if warior:
                        if warior.getGoat():
                            findGoat = False
                            for g in goats:
                                if g['name'] == warior.getGoat():
                                   g.update({'counter': g['counter']+1})
                                   findGoat = True
                            
                            if not findGoat:
                                goat = {}
                                goat.update({'counter': 1})
                                goat.update({'name': warior.getGoat()})
                                goats.append(goat)

                        find = True
                        report = report + f'{warior.getProfileSmall()}\n'
                    else:
                        counter = counter + 1    
                if '...–ò –µ—â–µ' in strings[i]:
                    live = int(strings[i].split('...–ò –µ—â–µ')[1].split('–≤—ã–∂–∏–≤—à–∏—Ö')[0].strip())
                    counter = counter + live
                i = i + 1
            if counter > 0:
                report = report + f'...–ò –µ—â–µ {str(counter)} –≤—ã–∂–∏–≤—à–∏—Ö.'
            
            if len(goats) > 0:
                for goat in goats:
                    report_goat_info = report_goat_info + f'üêê {goat["name"]}: <b>{goat["counter"]}</b>\n'
                report_goat_info = report_goat_info + '\n'

            if not find:
                send_messages_big(message.chat.id, text='–ù–µ –Ω–∞—à–µ–ª –Ω–∏–∫–æ–≥–æ!')
            else:
                send_messages_big(message.chat.id, text=report_goat_info + report)
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_you_cant'))
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–¢—ã –∑–∞–Ω—è–ª –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ' in message.text and '–†–µ–π–¥ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow('deceive'))
                return

            u = getUserByLogin(message.from_user.username)
            u.setRaidLocation(1)
            updateUser(u)
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_you_cant'))
        return
    elif (message.forward_from and message.forward_from.username == 'WastelandWarsBot' and '–ü–∞–Ω–µ–ª—å –±–∞–Ω–¥—ã.' in message.text):
        #write_json(message.json)
        if hasAccessToWariors(message.from_user.username):
            if message.forward_date < (datetime.now() - timedelta(minutes=5)).timestamp():
                send_messages_big(message.chat.id, text=getResponseDialogFlow('deceive'))
                return

            strings = message.text.split('\n')
            i = 0
            band = ''
            allrw = 0
            allcounter = 0
            onraidrw = 0
            onraidcounter = 0
            onraidReport = ''
            report = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π–¥–µ—Ä–∞—Ö!\n'
            fuckupraidrw = 0
            fuckupraidcounter = 0
            fuckupusersReport = ''
            fuckupusers = []
            alianusersReport = ''
            aliancounter = 0

            # ü§òüëäüèÖ
            for s in strings:
                if 'üèÖ' in strings[i] and 'ü§ò' in strings[i]:
                    band = strings[i].split('ü§ò')[1].split('üèÖ')[0].strip()
                    if not isUsersBand(message.from_user.username, band):
                        send_messages_big(message.chat.id, text=f'–¢—ã –ø—Ä–∏–Ω–µ—Å –ø–∞–Ω–µ–ª—å –±–∞–Ω–¥—ã {band}\n' + getResponseDialogFlow('not_right_band'))
                        return
                    registered_users.update_many(
                        {'band': band},
                        { '$set': { 'raidlocation': None} }
                    )
                    updateUser(None)

                if 'üëÇ' in strings[i]:
                    name = strings[i]
                    name = name.replace('‚öôÔ∏è', '@').replace('üî™', '@').replace('üí£', '@').replace('‚öõÔ∏è', '@').replace('üëô', '@')
                    name = name.split('@')[1].split('üëÇ')[0].strip()
                    u = getUserByName(name)

                    spliter = ''
                    km = ''
                    if 'üìç' in strings[i]:
                        km =  int(strings[i].split('üìç')[1].split('km')[0].strip())
                        spliter = 'üìç'

                    elif 'üëü' in strings[i]:
                        km =  int(strings[i].split('üëü')[1].split('km')[0].strip())
                        spliter = 'üëü'
                    else:
                        km =  int(strings[i].split('üëä')[1].split('km')[0].strip())
                        spliter = 'üëä'


                    if u:
                        allrw = allrw + u.getRaidWeight()
                        allcounter = allcounter + 1
                        
                        if 'üëä' in strings[i]:
                            onraidrw = onraidrw + u.getRaidWeight()
                            u.setRaidLocation(km)
                            updateUser(u)
                            onraidcounter = onraidcounter + 1
                            onraidReport = onraidReport + f'{onraidcounter}.üèãÔ∏è‚Äç‚ôÇÔ∏è{u.getRaidWeight()} {u.getName()} {spliter}{km}–∫–º\n'

                        else:
                            fuckupraidrw = fuckupraidrw + u.getRaidWeight()
                            fuckupraidcounter = fuckupraidcounter + 1
                            fuckupusers.append(u)
                            fuckupusersReport = fuckupusersReport + f'{fuckupraidcounter}.üèãÔ∏è‚Äç‚ôÇÔ∏è{u.getRaidWeight()} {u.getName()} {spliter}{km}–∫–º\n' 
                    else:
                        aliancounter  = aliancounter + 1
                        alianusersReport = alianusersReport + f'{aliancounter}. {name} {spliter}{km}–∫–º\n'
                        
                i = i + 1
            
            report = report + f'ü§ò <b>{band}</b>\n\n' 
            if onraidcounter > 0:
                report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–Ω–∞ —Ä–µ–π–¥–µ</b>: <b>{onraidcounter}/{allcounter}</b>\n'
                report = report + onraidReport
                report = report + f'\n<b>–û–±—â–∏–π –≤–µ—Å</b>: üèãÔ∏è‚Äç‚ôÇÔ∏è{onraidrw}/{allrw} <b>{str(int(onraidrw/allrw*100))}%</b>\n'
            report = report + '\n'
            if fuckupraidrw > 0:
                report = report + 'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã –≤ –ø—Ä–æ—ë–±–µ</b>:\n'
                report = report + fuckupusersReport
            report = report + '\n'
            if alianusersReport == '':
                pass
            else:
                report = report + 'üêÄ <b>–ö—Ä—ã—Å—ã –≤ –±–∞–Ω–¥–µ</b> (–Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):\n'
                report = report + alianusersReport
            
            if onraidcounter > 0 or aliancounter > 0:
                bot.delete_message(message.chat.id, message.message_id)
                send_messages_big(message.chat.id, text=report)
                
                # ping_on_reade(fuckupusers, message.chat.id)
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow('no_one_on_rade'))
        else:
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_you_cant'))
        return

    if not findUser:
        r = random.random()
        if (r <= float(getSetting('PROBABILITY','I_DONT_KNOW_YOU'))):
            send_messages_big(message.chat.id, text=getResponseDialogFlow('i_dont_know_you'))

    if hasAccessToWariors(message.from_user.username):
        #write_json(message.json)
        if (callJugi and (message.text and ('–∞–Ω–µ–∫–¥–æ—Ç' in message.text.lower() or '—Ç–æ—Å—Ç' in message.text.lower()))) :
            type_joke = 11
            if ('–∞–Ω–µ–∫–¥–æ—Ç' in message.text.lower()):
                type_joke = 11
            elif ('—Ç–æ—Å—Ç' in message.text.lower()):
                type_joke = 16  
            bot.send_chat_action(message.chat.id, 'typing')
            report = ''
            try:
                r = requests.get(f'{config.ANECDOT_URL}={type_joke}', verify=False, timeout=7)
                report = r.text[12:-2]
            except:
                report = '–ß—ë—Ç —è –ø—Ä–∏—É–Ω—ã–ª... –ù–∏—á–µ–≥–æ –≤ –≥–æ–ª–æ–≤—É –Ω–µ –∏–¥–µ—Ç... –î–∞–≤–∞–π –ø–æ–∑–∂–µ.'
            
            send_messages_big(message.chat.id, report)

        elif (callJugi 
                    and message.reply_to_message
                    and message.text 
                    and ('—ç—Ç–æ –∑–∞–ª—ë—Ç' in message.text.lower() or '—ç—Ç–æ –∑–∞–ª–µ—Ç' in message.text.lower())
                ):
            login = message.reply_to_message.from_user.username

            if config.BOT_LOGIN == login:
                login = message.from_user.username

            user = getUserByLogin(login)
            if not user:
                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                return

            if not user.getBand():
                send_messages_big(message.chat.id, text=f'–£ –±–∞–Ω–¥–∏—Ç–∞ {login} –Ω–µ—Ç –±–∞–Ω–¥—ã!')
                return

            if not isUsersBand(message.from_user.username, user.getBand()):
                if not isAdmin(message.from_user.username):
                    send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                    return
            sec = int(randrange(int(getSetting('PROBABILITY','FUNY_BAN'))))
            tz = config.SERVER_MSK_DIFF
            ban_date = datetime.now() + timedelta(seconds=sec, hours=tz.hour)
            
            user.setTimeBan(ban_date.timestamp())
            report = f'{user.getName()} –±—É–¥–µ—Ç –≤—ã–ø–∏—Å–∞–Ω –±–∞–Ω! –ó–ª–æ–π –î–∂—É –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ ‚è∞{sec} —Å–µ–∫—É–Ω–¥(—ã) –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!'
            updateUser(user)
            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs') + f'\n{report}')
    
        elif (callJugi and '—Å—Ç–∞—Ç—É—Å ' in message.text.lower() and ' @' in message.text):
            login = message.text.split('@')[1].split(' ')[0].strip()
            
            findLogin = False
            for x in registered_users.find({"login": f"{login}"}):
                findLogin = True

            if (isAdmin(message.from_user.username) or message.from_user.username == login):
                pass
            else:
                findLogin = False

            newvalues = { "$set": { "status": message.text.split(login)[1].strip() } }
            if not findLogin:
                registered_users.update_one({"login": f"{message.from_user.username}"}, newvalues)
                send_messages_big(message.chat.id, text="–ò–∑-–∑–∞ —Å–≤–æ–µ–π –∫—Ä–∏–≤–æ—Ä–∫—É–∫–æ—Å—Ç–∏ —Ç—ã –≤—å–µ–±–∞–ª —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–º—É —Å–µ–±–µ. –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å '" + message.text.split(login)[1].strip() + "'")
            else:
                registered_users.update_one({"login": f"{login}"}, newvalues)
                send_messages_big(message.chat.id, text='‚úÖ –ì–æ—Ç–æ–≤–æ')
            
            updateUser(None)
            
        elif (callJugi and '–ø—Ä–æ—Ñ–∏–ª—å @' in message.text.lower()):

            name = tools.deEmojify(message.text.split('@')[1].strip())
            if isAdmin(message.from_user.username):
                login = message.text.split('@')[1].strip()
                if (isRegisteredUserName(name) or isRegisteredUserLogin(login)):
                    user = getUserByLogin(login)
                    if not user:
                        user = getUserByName(name)
                    if user:
                        send_messages_big(message.chat.id, text=user.getProfile())
                else:
                    send_messages_big(message.chat.id, text=f'–í –±–∞–∑–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–Ω—ã—Ö –±–∞–Ω–¥–∏—Ç–æ–≤ {login} –Ω–µ –Ω–∞–π–¥–µ–Ω')

            for x in registered_wariors.find({'name':f'{name}'}):
                warior = wariors.importWarior(x)
                if (warior and warior.photo):
                    try:
                        bot.send_photo(message.chat.id, warior.photo, warior.getProfile())
                    except:
                        send_messages_big(message.chat.id, text=warior.getProfile())
                else:
                    send_messages_big(message.chat.id, text=warior.getProfile())
                    
        elif (callJugi and '—É–≤–æ–ª–∏—Ç—å @' in message.text.lower()):
            if not isGoatBoss(message.from_user.username):
                if not isAdmin(message.from_user.username):
                    send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_not_goat_boss'))
                    return

            login = message.text.split('@')[1].strip()
            user = getUserByLogin(login)
            if not user:
                send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                return

            if not isAdmin(message.from_user.username):
                if not isUsersBand(message.from_user.username, user.getBand()):
                    send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                    return

            myquery = { "login": f"{login}" }
            doc = registered_users.delete_one(myquery)
            updateUser(None)
            
            myquery = { "name": f"{login}" }
            war = registered_wariors.delete_one(myquery)

            if doc.deleted_count == 0:
                send_messages_big(message.chat.id, text=f'{login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–Ω–¥–∏—Ç–∞—Ö! –£–¥–∞–ª–µ–Ω–æ {war.deleted_count} –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –±–æ–µ–≤!')
            else:                 
                send_messages_big(message.chat.id, text=f'{login} —É–≤–æ–ª–µ–Ω –Ω–∞—Ñ–∏–≥! –£–¥–∞–ª–µ–Ω–æ {doc.deleted_count} –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –±–∞–Ω–¥–∏—Ç–æ–≤ –∏ {war.deleted_count} –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –±–æ–µ–≤!')

        elif (callJugi and '–ø—Ä–æ—Ñ–∏–ª—å' in message.text.lower()):
            user = users.getUser(message.from_user.username, registered_users)
            if user:
                warior = getWariorByName(user.getName(), user.getFraction())
                if (warior and warior.photo):
                    try:
                        bot.send_photo(message.chat.id, warior.photo, user.getProfile())
                    except:
                        send_messages_big(message.chat.id, text=user.getProfile())
                else:
                    send_messages_big(message.chat.id, text=user.getProfile())
            else:
                send_messages_big(message.chat.id, text='–° —Ç–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∫–∞–∫–∞—è-—Ç–æ –±–µ–¥–∞... –ó–≤–æ–Ω–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∏–ø-–±–æ–µ–≤!')

        elif callJugi:
            text = message.text 
            if text.lower().startswith('–¥–∂—É'):
                text = message.text[3:]
            response = getResponseDialogFlow(text)
            if response:
                if (response.startswith('jugi:')):
                    #jugi:ping:–ê—Ä—Ç—Ö–∞—É—Å
                    if 'ping' == response.split(':')[1]:
                        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π —Å –±–∞–Ω–¥–æ–π –•
                        band = response.split(':')[2][1:]
                        if not isUsersBand(message.from_user.username, band):
                            send_messages_big(message.chat.id, text=f'–¢—ã –ø—Ä–æ—Å–∏–ª —Å–æ–±—Ä–∞—Ç—å—Å—è –±–∞–Ω–¥—É{response.split(":")[2]}\n' + getResponseDialogFlow('not_right_band'))
                            return

                        first_string = f'{tools.deEmojify(message.from_user.first_name)} –ø—Ä–æ—Å–∏—Ç —Å–æ–±—Ä–∞—Ç—å—Å—è –±–∞–Ω–¥—É\n<b>{response.split(":")[2]}</b>:\n'
                        usersarr = []
                        for registered_user in registered_users.find({"band": f"{band}"}):
                            user = users.importUser(registered_user)
                            registered_user.update({'weight': user.getRaidWeight()})
                            usersarr.append(registered_user)

                        # –ü–∏–Ω–≥—É–µ–º
                        counter = 0
                        pingusers = []
                        report = f''
                        for pu in sorted(usersarr, key = lambda i: i['weight'], reverse=True):
                            counter = counter + 1
                            pingusers.append(pu)
                            report = report + f'{counter}. @{pu["login"]} üèãÔ∏è‚Äç‚ôÇÔ∏è{pu["weight"]} \n'
                            if counter % 5 == 0:
                                send_messages_big(message.chat.id, text=first_string + report)
                                pingusers = []
                                report = f''

                        if len(pingusers) > 0:
                            send_messages_big(message.chat.id, text=first_string + report)
                    elif 'planrade' == response.split(':')[1]:
                        # jugi:planrade:$date
                        goat = getMyGoat(message.from_user.username)

                        if response.split(response.split(":")[1])[1][1:].strip() == '*':
                            tz = config.SERVER_MSK_DIFF
                            plan_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                            if plan_date.hour > 17:
                                raid_date = plan_date + timedelta(days=1)
                            else:
                                raid_date = plan_date
                        else:
                            raid_date = parse(response.split(response.split(":")[1])[1][1:])

                        plan_str = get_raid_plan(raid_date, goat)
                        msg = send_messages_big(message.chat.id, text=plan_str, reply_markup=markup)
                    elif 'onrade' == response.split(':')[1]:
                        # jugi:onrade:$goat
                        # if not isAdmin(message.from_user.username):
                        #     send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_not_admin'))
                        #     return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoat(message.from_user.username)

                        if not getMyGoat(message.from_user.username) == goatName:
                            send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow('shot_you_cant'))
                            return

                        for goat in getSetting('GOATS_BANDS'):
                            if goatName == goat.get('name'):
                                report = radeReport(goat)
                                send_messages_big(message.chat.id, text=report)
                    elif 'statistic' == response.split(':')[1]:
                        # jugi:statistic:*
                        if not isGoatBoss(message.from_user.username):
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_not_admin'))
                                return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoat(message.from_user.username)

                        if not getMyGoat(message.from_user.username) == goatName:
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow('shot_you_cant'))
                                return

                        report = statistic(goatName)
                        send_messages_big(message.chat.id, text=report) 
                    elif 'clearrade' == response.split(':')[1]:
                        # jugi:clearrade:*
                        if not isAdmin(message.from_user.username):
                            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_not_admin'))
                            return

                        goatName = response.split(':')[2].strip()
                        if goatName == '*':
                            goatName = getMyGoat(message.from_user.username)

                        if not getMyGoat(message.from_user.username) == goatName:
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text='–ù–µ —Ç–≤–æ–π –∫–æ–∑—ë–ª!\n' + getResponseDialogFlow('shot_you_cant'))
                                return
                        registered_users.update_many(
                            {'band':{'$in':getGoatBands(goatName)}},
                            { '$set': { 'raidlocation': None} }
                        )

                        updateUser(None)
                        send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))        
                    elif 'ban' == response.split(':')[1] or 'unban' == response.split(':')[1]:
                        # if not isAdmin(message.from_user.username):
                        #     bot.reply_to(message, text=getResponseDialogFlow('shot_message_not_admin'))
                        #     return

                        # jugi:ban:@gggg –Ω–∞:2019-12-01T13:21:52/2019-12-01T13:31:52
                        ban = ('ban' == response.split(':')[1])
                        login = response.split(':')[2]
                        login = login.replace('@','').split(' ')[0].strip()
                        
                        user = getUserByLogin(login)
                        if not user:
                            send_messages_big(message.chat.id, text=f'–ù–µ—Ç –±–∞–Ω–¥–∏—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º {login}!')
                            return

                        if not user.getBand():
                            send_messages_big(message.chat.id, text=f'–£ –±–∞–Ω–¥–∏—Ç–∞ {login} –Ω–µ—Ç –±–∞–Ω–¥—ã!')
                            return

                        if not isUsersBand(message.from_user.username, user.getBand()):
                            if not isAdmin(message.from_user.username):
                                send_messages_big(message.chat.id, text=f'–ë–∞–Ω–¥–∏—Ç {login} –Ω–µ –∏–∑ –±–∞–Ω–¥ —Ç–≤–æ–µ–≥–æ –∫–æ–∑–ª–∞!')
                                return

                        time_str = response.split(response.split(':')[2])[1][1:]
                        date_for = None
                        if ban:
                            if not '/' in time_str:
                                send_messages_big(message.chat.id, text=f'–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                                return
                            try:
                                date_for = parse(time_str.split('/')[1].strip())
                            except:
                                send_messages_big(message.chat.id, text=f'–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!')
                                return

                        report = ''
                        if ban:
                            user.setTimeBan(date_for.timestamp())
                            report = f'{user.getName()} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞—Ö—Ä–µ–Ω –¥–æ\n'+'‚è∞' + time.strftime("%H:%M:%S %d-%m-%Y", time.gmtime(date_for.timestamp()))
                        else:
                            user.setTimeBan(None)
                            report = f'{user.getName()} —Ä–∞–∑–±–∞–Ω–µ–Ω. –ì–æ–≤–æ—Ä–∏, –¥–æ—Ä–æ–≥–æ–π!'
                        updateUser(user)

                        user = getUserByLogin(user.getLogin())
                        send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs') + f'\n{report}')
                    elif 'rade' == response.split(':')[1]:
                        if isGoatBoss(message.from_user.username) or isAdmin(message.from_user.username):
                            pass
                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_not_goat_boss'))
                            return
                        
                        goat = getMyGoat(message.from_user.username)
                        #   0    1        2         3        4     
                        # jugi:rade:$radelocation:$bool:$date-time
                        raid_date = parse(response.split(response.split(":")[3])[1][1:])
                        if raid_date.hour not in (1, 9, 17):
                            send_messages_big(message.chat.id, text='–†–µ–π–¥—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ 1:00, 9:00, 17:00!\n–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!')
                            return 

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É
                        tz = config.SERVER_MSK_DIFF
                        dt = raid_date - timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                        if (dt.timestamp() < datetime.now().timestamp()):
                            msg = send_messages_big(message.chat.id, text=getResponseDialogFlow('timeisout'))
                            return

                        rade_text = response.split(":")[2]
                        rade_location = int(response.split(":")[2].split('üìç')[1].split('–∫–º')[0].strip())

                        if eval(response.split(":")[3]):
                            myquery = { 
                                        "rade_date": raid_date.timestamp(), 
                                        "goat": goat
                                    }
                            newvalues = { "$set": { 
                                            'rade_date': raid_date.timestamp(),
                                            'rade_text': rade_text,
                                            'rade_location': rade_location,
                                            'state': 'WAIT',
                                            'chat_id': message.chat.id,
                                            'login': message.from_user.username,
                                            'goat': goat
                                        } } 
                            u = plan_raids.update_one(myquery, newvalues)

                            if u.matched_count == 0:
                                plan_raids.insert_one({ 
                                    'create_date': datetime.now().timestamp(), 
                                    'rade_date': raid_date.timestamp(),
                                    'rade_text': rade_text,
                                    'rade_location': rade_location,
                                    'state': 'WAIT',
                                    'chat_id': message.chat.id,
                                    'login': message.from_user.username,
                                    'goat': goat})
                        else:
                            plan_raids.delete_one({
                                            'rade_date': raid_date.timestamp(),
                                            })

                        plan_str = get_raid_plan(raid_date, goat)
                        msg = send_messages_big(message.chat.id, text=plan_str)                                 
                    elif 'getchat' == response.split(':')[1]:
                        send_messages_big(message.chat.id, text=f'Id —á–∞—Ç–∞ {message.chat.id}')
                    elif 'capture' == response.split(':')[1]:
                            #   0    1        2       3     4
                            # jugi:capture:$bands:$Dangeon:$time
                            band = response.split(':')[2][1:]
                            if not isUsersBand(message.from_user.username, band):
                                send_messages_big(message.chat.id, text=f'–¢—ã –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–≤–∞—Ç—å –Ω–∞ –∑–∞—Ö–≤–∞—Ç –±–∞–Ω–¥—É {response.split(":")[2]}\n' + getResponseDialogFlow('not_right_band'))
                                return  

                            time_str = response.split(response.split(":")[3])[1][1:]
                            dt = parse(time_str)
                            time_str = str(dt.hour).zfill(2)+':'+str(dt.minute).zfill(2)

                            first_string = f'<b>–ó–∞—Ö–≤–∞—Ç!</b> {response.split(":")[2]} {time_str} <b>{response.split(":")[3]}</b>\n'
                            
                            usersarr = []
                            for registered_user in registered_users.find({"band": f"{band}"}):
                                user = users.importUser(registered_user)
                                registered_user.update({'weight': user.getRaidWeight()})
                                usersarr.append(registered_user)

                            # –ü–∏–Ω–≥—É–µ–º
                            counter = 0
                            pingusers = []
                            report = f''
                            for pu in sorted(usersarr, key = lambda i: i['weight'], reverse=True):
                                counter = counter + 1
                                pingusers.append(pu)
                                report = report + f'{counter}. @{pu["login"]} üèãÔ∏è‚Äç‚ôÇÔ∏è{pu["weight"]} \n'
                                if counter % 5 == 0:
                                    send_messages_big(message.chat.id, text=first_string + report)
                                    pingusers = []
                                    report = f''

                            if len(pingusers) > 0:
                                send_messages_big(message.chat.id, text=first_string + report)

                            if not privateChat:
                                bot.pin_chat_message(message.chat.id, msg.message_id)
                    elif 'remind' == response.split(':')[1]:
                        # jugi:remind:2019-11-04T17:12:00+02:00
                        if not userIAm.getLocation():
                            send_messages_big(message.chat.id, text='–Ø –Ω–µ –∑–Ω–∞—é –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ "–Ø –∏–∑ –û–¥–µ—Å—Å—ã" –∏–ª–∏ "–Ø –∏–∑ –ú–æ—Å–∫–≤—ã" –∏ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ò–Ω–∞—á–µ, —è –±—É–¥—É –¥—É–º–∞—Ç—å, —á—Ç–æ —Ç—ã –∂–∏–≤–µ—à—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–æ—è—Å–µ –ø–æ –ì—Ä–∏–Ω–≤–∏—á—É, –∞ —ç—Ç–æ +3 —á–∞—Å–∞ –∫ –ú–æ—Å–∫–≤–µ, +2 –∫ –ö–∏–µ–≤—É –∏ —Ç.–¥. –ò —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º-–ª–∏–±–æ!')
                            return
                        if not userIAm.getTimeZone():
                            send_messages_big(message.chat.id, text='–í—Ä–æ–¥–µ, –≥–æ—Ä–æ–¥ –∑–Ω–∞—é, –∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∑–∞–±—ã–ª. –ù–∞–ø–∏—à–∏ –º–Ω–µ –µ—â–µ —Ä–∞–∑ "–Ø –∏–∑ –û–¥–µ—Å—Å—ã" –∏–ª–∏ "–Ø –∏–∑ –ú–æ—Å–∫–≤—ã"!` ')
                            return
                                                
                        time_str = response.split(response.split(":")[1])[1][1:]
                        dt = parse(time_str)
                        tz = datetime.strptime(userIAm.getTimeZone(),"%H:%M:%S")
                        dt = dt - timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
                        if (dt.timestamp() < datetime.now().timestamp()):
                            msg = send_messages_big(message.chat.id, text=getResponseDialogFlow('timeisout'))
                            return

                        reply_message = None
                        if message.reply_to_message:
                            reply_message = message.reply_to_message.json

                        pending_messages.insert_one({ 
                            'chat_id': message.chat.id,
                            'reply_message': reply_message,
                            'create_date': datetime.now().timestamp(), 
                            'state': 'WAIT',
                            'pending_date': dt.timestamp(),
                            'dialog_flow_text': 'remindme',
                            'text': None})
                        
                        msg = send_messages_big(message.chat.id, text=getResponseDialogFlow('shot_message_zbs'))
                    elif 'sticker' == response.split(':')[1]: 
                        #jugi:sticker:CAADAgADawgAAm4y2AABx_tlRP2FVS8WBA:–ú–∏-–º–∏-–º–∏
                        photo = response.split(':')[2]
                        text = response.split(':')[3]
                        bot.send_message(message.chat.id, text=text)   
                        bot.send_sticker(message.chat.id, photo)   
                    elif 'tobeornottoby' == response.split(':')[1]:
                        #jugi:tobeornottoby
                        r = random.random()
                        if (r <= 0.5):
                            bot.send_message(message.chat.id, text='–ë—ã—Ç—å, –µ–ø—Ç–∞!')
                        else:
                            bot.send_message(message.chat.id, text='–•–ó, —è –±—ã –Ω–µ —Ä–∏—Å–∫–Ω—É–ª...')
                    elif 'setlocation' == response.split(':')[1]:
                        #jugi:setlocation:–ú–æ—Å–∫–≤–∞
                        Client.PARAMS = {"format": "json", "apikey": config.YANDEX_GEOCODING_API_KEY}
                        location = Client.coordinates(response.split(':')[2])
                        if location:
                            tf = timezonefinder.TimezoneFinder()
                            timezone_str = tf.certain_timezone_at(lat=float(location[1]), lng=float(location[0]))
                            if timezone_str is None:
                                send_messages_big(message.chat.id, text=getResponseDialogFlow('understand'))
                            else:
                                # Display the current time in that time zone
                                timezone = pytz.timezone(timezone_str)
                                dt = datetime.utcnow()
                                userIAm.setLocation(response.split(':')[2])
                                userIAm.setTimeZone(str(timezone.utcoffset(dt)))
                                updateUser(userIAm)
                                send_messages_big(message.chat.id, text='–ö—Ä—É—Ç–æ!\n–≠—Ç–æ ' + str(timezone.utcoffset(dt)) + ' –∫ –ì—Ä–∏–Ω–≤–∏—á—É!')

                        else:
                            send_messages_big(message.chat.id, text=getResponseDialogFlow('understand'))
                    elif 'rating' == response.split(':')[1]:
                        report = ''
                        report = report + f'üèÜ–¢–û–ü 5 –£–ë–ò–ô–¶ üêê<b>{getMyGoat(userIAm.getLogin())}</b>\n'
                        report = report + '\n'
                        setting = getSetting('REPORTS','KILLERS')
                        from_date = setting.get('from_date')
                        to_date = setting.get('to_date')

                        if (not from_date):
                            from_date = (datetime(2019, 1, 1)).timestamp() 

                        if (not to_date):
                            to_date = (datetime.now() + timedelta(minutes=180)).timestamp()

                        dresult = battle.aggregate([
                            {   "$match": {
                                    "$and" : [
                                        { 
                                            "date": {
                                                '$gte': from_date,
                                                '$lt': to_date
                                                    }       
                                        },
                                        {
                                            "band": {'$in': getMyBandsName(userIAm.getLogin())}   
                                        }]
                                }
                            }, 
                            {   "$group": {
                                "_id": "$winnerWarior", 
                                "count": {
                                    "$sum": 1}}},
                                
                            {   "$sort" : { "count" : -1 } }
                            ])

                        findInWinner = 0
                        i = 0
                        for d in dresult:
                            user_name = d.get("_id")   
                            if not isRegisteredUserName(user_name): continue

                            i = i + 1
                            if i == 1:
                                emoji = 'ü•á '
                            elif i == 2:
                                emoji = 'ü•à '    
                            elif i == 3:
                                emoji = 'ü•â '
                            else:
                                emoji = ''
                            
                            if user_name == tools.deEmojify(message.from_user.first_name):
                                user_name = f'<b>{user_name}</b>'
                                findInWinner = i

                            if i <= 5: report = report + f'{i}. {emoji}{user_name}: {d.get("count")}\n' 

                        if (i == 0): 
                            report = report + f'–ú–∏—Ä! –ü–∏—Å! ‚úåÔ∏èüå∑üê£\n'
                        else:
                            if (findInWinner > 5): report = report + f'\nüëπ –¢–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {findInWinner}!\n'
                        #==========================================    
                        report = report + f'\n' 
                        report = report + f'‚ö∞Ô∏è–¢–û–ü 5 –ù–ï–£–î–ê–ß–ù–ò–ö–û–í\n' 
                        report = report + '\n'
                        dresult = battle.aggregate([
                            {   "$match": {
                                    "$and" : [
                                        { 
                                            "date": {
                                                '$gte': from_date,
                                                '$lt': to_date
                                                    }       
                                        },
                                        {
                                            "band": {'$in': getMyBandsName(userIAm.getLogin())}    
                                        }]
                                } 
                            }, 
                            {   "$group": {
                                "_id": "$loseWarior", 
                                "count": {
                                    "$sum": 1}}},
                                
                            {   "$sort" : { "count" : -1 } }
                            ])

                        findInLoser = 0
                        i = 0
                        for d in dresult:
                            user_name = d.get("_id")  
                            if not isRegisteredUserName(user_name): continue
                            
                            i = i + 1
                            if i == 1:
                                emoji = 'üëª '
                            elif i == 2:
                                emoji = 'üíÄÔ∏è '    
                            elif i == 3:
                                emoji = '‚ò†Ô∏è '
                            else:
                                emoji = ''

                            if user_name == tools.deEmojify(message.from_user.first_name):
                                user_name = f'<b>{user_name}</b>'
                                findInLoser = i

                            if i <= 5: report = report + f'{i}. {emoji}{user_name}: {d.get("count")}\n' 
                             

                        if (i == 0): 
                            report = report + f'–ú—ã –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã ‚úåÔ∏èüëªüíÄ‚ò†Ô∏è\n'
                        else:
                            if (findInLoser > 5): report = report + f'\nüß∏ –¢–≤–æ–µ –º–µ—Å—Ç–æ - {findInLoser}!\n'
                        report = report + f'\n' 
                        report = report + '‚è∞ c ' + time.strftime("%d-%m-%Y", time.gmtime(from_date)) + ' –ø–æ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(to_date))
                        
                        send_messages_big(message.chat.id, text=report)
                else:
                    try:
                        
                        send_messages_big(message.chat.id, text=response, reply_markup=markup)
                    except:
                        logger.info("Error!")
            else:
                send_messages_big(message.chat.id, text=getResponseDialogFlow('understand'))
        return
    else:
        logger.info(getResponseDialogFlow('you_dont_our_band_gangster'))
        return

def insert_dash(string, index, char):
    return string[:index] + char + string[index:]

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data in ("capture_yes", "capture_no"):
        markupinline = InlineKeyboardMarkup()
        markupinline.row_width = 2
        markupinline.add(InlineKeyboardButton("–ò–¥—É!", callback_data="capture_yes"),
        InlineKeyboardButton("–ù–∞—Ö–µ—Ä!", callback_data="capture_no"))
        boldstring = []
        text = call.message.text

        # print(text)
        # for s in call.message.entities:
        #     print(s)
        #     if s.type == 'bold':
        #         print(s)
        #         print(text[s.offset : s.offset+s.length])
                
        #         boldstring.append(text[s.offset : s.offset+s.length])

        # for z in boldstring:
        #     print(z)
        #     print(z.decode('ascii') )
        #     #text = text.replace(z, f'<b>{z}</b>')

        if call.data == "capture_yes" :
            bot.answer_callback_query(call.id, "–¢—ã –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü—ã!")
            text = text.replace(f'@{call.from_user.username}', f'<b>@{call.from_user.username}</b>')

        elif call.data == "capture_no":
            bot.answer_callback_query(call.id, "–°—ã–∫–ª–æ!")
            text = text.replace(f'<b>@{call.from_user.username}</b>', f'@{call.from_user.username}')

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode='HTML', reply_markup=markupinline)

def send_messages_big(chat_id: str, text: str, reply_markup=None):
    strings = text.split('\n')
    tmp = ''
    msg = None
    for s in strings:
        if len(tmp + s) < 4000:
            tmp = tmp + s +'\n'
        else: 
            msg = bot.send_message(chat_id, text=tmp, parse_mode='HTML', reply_markup=reply_markup)
            tmp = s + '\n'

    msg = bot.send_message(chat_id, text=tmp, parse_mode='HTML', reply_markup=reply_markup)
    return msg

def send_message_to_admin(text: str):
    for adm in ADMIN_ARR:
        if adm.get('chat'):
            send_messages_big(adm.get('chat'), text)

def reply_to_big(message: str, text: str):
    strings = text.split('\n')
    tmp = ''
    msg = types.Message.de_json(message)

    for s in strings:
        if len(tmp + s) < 4000:
            tmp = tmp + s +'\n'
        else: 
            result = bot.reply_to(msg, text=tmp, parse_mode='HTML')
            tmp = s + '\n'

    result = bot.reply_to(msg, text=tmp, parse_mode='HTML')
    return result

def fight():
    #logger.info('Calculate fight')

    bands = ['üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ', 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏']
    figthers_rabbit = []
    figthers_urban = []
    fighters = [figthers_rabbit, figthers_urban]
    max_damage = 0
    min_damage = 10000000
    max_armor = 0
    findFighters = False
    for fighter in competition.find({'state': 'FIGHT'}):
        if fighter.get('band') == 'üé© –ì–æ—Ä–æ–¥—Å–∫–∏–µ':
            figthers_urban.append(fighter)
        if fighter.get('band') == 'üêá –ú–µ—Ä—Ç–≤—ã–µ –∫—Ä–æ–ª–∏–∫–∏':
            figthers_rabbit.append(fighter)
        if max_damage < int(str(fighter.get('damage')).split(' ')[0]): max_damage = int(str(fighter.get('damage')).split(' ')[0])
        if max_armor < int(str(fighter.get('armor')).split(' ')[0]): max_armor = int(str(fighter.get('armor')).split(' ')[0])
        if min_damage > int(str(fighter.get('damage')).split(' ')[0]): min_damage = int(str(fighter.get('damage')).split(' ')[0])
        findFighters = True

    if not findFighters:
        return

    # –ö–∞–∫—è –±–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–π

    band1 = random.sample(fighters,  1)[0]
    fighters.remove(band1)
    band2 = random.sample(fighters,  1)[0]
 
    first = band1
    second = band2

    bot.send_message(fighter.get('chat'), text=f'–ë–∞–Ω–¥–∞ <b>{band1[0].get("band")}</b> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–∞–ø–∞–ª–∞ –ø–µ—Ä–≤–æ–π!', parse_mode='HTML')

    killed = []
    j = 0
    
    while True:
        j = j + 1
        doExit = False
        if len(first) == 0 or len(second) == 0:
            break

        f1 = random.sample(first,  1)[0]
        f2 = random.sample(second,  1)[0]         

        health1 = float(f1.get('health').split(' ')[0])
        health2 = float(f2.get('health').split(' ')[0])

        doBreak = False
        vs_log = '<b>‚öî –•–û–î –ë–ò–¢–í–´:</b>\n\n'
        vs_log = f'‚ù§{f1.get("health")} <b>{f1.get("band")[0:1]} {f1.get("name")}</b>\nvs\n‚ù§{f2.get("health")} <b>{f2.get("band")[0:1]} {f2.get("name")}</b>\n\n'
        damage = 0

        for i in range(0, 3):
            strategy1 = f1.get('strategy')[i]
            strategy2 = f2.get('strategy')[i]

            damage1 = float(str(f1.get('damage')).split(' ')[0])
            damage2 = float(str(f2.get('damage')).split(' ')[0])

            armor1 = float(str(f1.get('armor')).split(' ')[0])
            armor2 = float(str(f2.get('armor')).split(' ')[0])
            fight_str = ''


            # ‚öî 1024 vs ‚öî 800
            # üõ° 276  vs üõ° 300
            # ‚ù§ 650  vs ‚ù§ 500

            #1 - 1024

            #1 - 800


            if strategy1 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    damage1 = damage1 * 1
                    damage2 = damage2 * 1
                    fight_str = '‚öî‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    damage1 = damage1 * 1
                    armor2 = armor2 * 4
                    fight_str = '‚öîüõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    damage2 = damage2 * 0
                    fight_str = '‚öîüòé'
            if strategy1 == 'üõ° –ó–∞—â–∏—Ç–∞':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    armor1 = armor1 * 4
                    damage2 = damage2 * 1
                    fight_str = 'üõ°‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    armor1 = armor1 * 4
                    armor2 = armor2 * 4
                    fight_str = 'üõ°üõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    armor2 = armor2 * 0  
                    fight_str = 'üõ°üòé'
            if strategy1 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                if strategy2 == '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ':
                    damage2 = damage2 * 0
                    fight_str = 'üòé‚öî'
                if strategy2 == 'üõ° –ó–∞—â–∏—Ç–∞':
                    armor2 = armor2 * 0
                    fight_str = 'üòéüõ°'
                if strategy2 == 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è':
                    armor1 = armor1 * random.random()  
                    armor2 = armor2 * random.random()  
                    damage1 = damage1 * random.random()  
                    damage2 = damage2 * random.random()  
                    fight_str = 'üòéüòé'

            # health1 = health1 -  ( (–£—Ä–æ–Ω2-–ó–∞—â–∏—Ç–∞1) / –ú–∞—Ö–£—Ä–æ–Ω) * –ú–∏–Ω–£—Ä–æ–Ω * 0.1)
            # health2 = health2 -  ( (–£—Ä–æ–Ω1-–ó–∞—â–∏—Ç–∞2) / –ú–∞—Ö–£—Ä–æ–Ω) * –ú–∏–Ω–£—Ä–æ–Ω * 0.1)
            #
            # '‚öî –ù–∞–ø–∞–¥–µ–Ω–∏–µ', 'üõ° –ó–∞—â–∏—Ç–∞', 'üòé –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è'

            # print(f'{j} health1  = {health1} -  ( ({damage2}-{armor1}) / {max_damage}) * {min_damage} = {health1}: {(damage2-armor1)/max_damage*min_damage*0.1})')
            # print(f'{j} health2  = {health2} -  ( ({damage1}-{armor2}) / {max_damage}) * {min_damage} = {health1}: {(damage1-armor2)/max_damage*min_damage*0.1})')
            dmg1 = (damage2-armor1)/max_damage*min_damage*0.35
            dmg2 = (damage1-armor2)/max_damage*min_damage*0.35
            
            if int(dmg1) > int(dmg2):
                damage = dmg1-dmg2
                health2 = health2 - damage
                f2.update({'health': str(int(health2))})
                vs_log = vs_log + f'{fight_str} ‚ù§{f2.get("health")} üí•{str(int(damage))} <b>{f1.get("band")[0:1]} {f1.get("name")}</b> {getResponseDialogFlow("you_win")}\n'
                if int(f2.get("health")) <= 0:
                    killed.append(f2)
                    second.remove(f2)
                    f2.update({'killedBy': f'{f1.get("band")[0:1]} {f1.get("name")}'})
                    break
            elif int(dmg1) == int(dmg2): 
                damage = 0
                vs_log = vs_log + f'{fight_str} {getResponseDialogFlow("draw_competition")}\n'
            else:
                damage = dmg2-dmg1
                health1 = health1 - damage
                f1.update({'health': str(int(health1))})
                vs_log = vs_log + f'{fight_str} ‚ù§{f1.get("health")} üí•{str(int(damage))} <b>{f2.get("band")[0:1]} {f2.get("name")}</b> {getResponseDialogFlow("you_win")}\n'
                if int(f1.get("health")) <= 0:
                    killed.append(f1)
                    first.remove(f1)
                    f1.update({'killedBy': f'{f2.get("band")[0:1]} {f2.get("name")}'})
                    break

        if int(f1.get('health')) <= 0:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'‚ò†Ô∏è {f1.get("health")} <b>{f1.get("band")[0:1]} {f1.get("name")}</b> {getResponseDialogFlow("you_deadman")}\n'
        elif int(f2.get('health')) <= 0:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'‚ò†Ô∏è {f2.get("health")} <b>{f2.get("band")[0:1]} {f2.get("name")}</b> {getResponseDialogFlow("you_deadman")}\n'
        else:
                vs_log = vs_log + f'\n'
                vs_log = vs_log + f'{getResponseDialogFlow("draw_competition")}\n'

        send_messages_big(chat_id = f1.get('chat'), text=vs_log)
        send_messages_big(chat_id = f2.get('chat'), text=vs_log)
        time.sleep(5)

    fight_log = '<b>–ò–¢–û–ì–ò –ë–û–Ø:</b>\n\n'
 
    winners = []
    if len(first) == 0:
        winners = second 
    if len(second) == 0:
        winners = first
    
    if (len(winners)>0):
        fight_log = fight_log + f'–ü–æ–±–µ–¥–∏–ª–∞ –±–∞–Ω–¥–∞ <b>{winners[0].get("band")}</b>\n'
        m = 0
        for winFigther in winners:
            m = m + 1
            fight_log = fight_log + f'{m}. ‚ù§{winFigther.get("health")} <b>{winFigther.get("band")[0:1]} {winFigther.get("name")}</b> \n'
    else:
        fight_log = fight_log + f'–í–°–ï –£–ú–ï–†–õ–ò!\n'

    fight_log = fight_log + f'\n'
    z = 0
    for deadman in killed:
        z = z+1
        fight_log = fight_log + f'{z}. ‚ò†Ô∏è{deadman.get("health")} <b>{deadman.get("band")[0:1]} {deadman.get("name")}</b> —É–±–∏—Ç –±–æ–π—Ü–æ–º <b>{deadman.get("killedBy")}</b>\n'

    fight_log = fight_log + f'\n'
    fight_log = fight_log + '‚è∞ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(datetime.now().timestamp())) +'\n'

    for fighter in competition.find({'state': 'FIGHT'}):
        send_messages_big(chat_id = fighter.get('chat'), text=fight_log)

    z = 0
    for deadman in killed:
        z = z+1
        myquery = { 'login': deadman.get('login'), 'state' : 'FIGHT'}
        newvalues = { '$set': { 'state': 'CANCEL', 'health': deadman.get('health'), 'killedBy': deadman.get('killedBy') } }
        u = competition.update_one(myquery, newvalues)

    for winner in winners:  
        myquery = { 'login': winner.get('login'), 'state' : 'FIGHT'}
        newvalues = { '$set': { 'state': 'CANCEL', 'health': winner.get('health') } }
        u = competition.update_one(myquery, newvalues)        

def pending_message():
    ids = []
    for pending_message in pending_messages.find(
            {
                '$and' : [
                            {
                                'state': f'WAIT'   
                            }
                            ,
                            { 
                               'pending_date': {
                                   '$lt': datetime.now().timestamp()
                                       }       
                            }
                        ]
            }
        ):
        text = pending_message.get('text')
        if pending_message.get('dialog_flow_text'):
            text = getResponseDialogFlow(pending_message.get('dialog_flow_text'))
        
        if pending_message.get('reply_message'):
            reply_to_big(pending_message.get('reply_message'), text)
        else:
            send_messages_big(pending_message.get('chat_id'), text, None)
        ids.append(pending_message.get('_id')) 

    for id_str in ids:
        myquery = {"_id": ObjectId(id_str)}
        newvalues = { "$set": { "state": 'CANCEL'} }
        u = pending_messages.update_one(myquery, newvalues)

def ping_on_reade(fuckupusers, chat_id):
    # –ü–∏–Ω–≥—É–µ–º
    if len(fuckupusers) == 0:
        return

    counter = 0
    fusers = []
    fuckupusersReport = f'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã! {getResponseDialogFlow("rade_motivation")}</b>\nü§ü<b>{fuckupusers[0].getBand()}</b>\n'
    for fu in fuckupusers:
        counter = counter + 1
        fusers.append(fu)
        fuckupusersReport = fuckupusersReport + f'{counter}. @{fu.getLogin()}\n' 
        if counter % 5 == 0:
            send_messages_big(chat_id, text=fuckupusersReport)
            fusers = []
            fuckupusersReport = f'üê¢ <b>–ë–∞–Ω–¥–∏—Ç—ã! {getResponseDialogFlow("rade_motivation")}</b>\nü§ü<b>{fuckupusers[0].getBand()}</b>\n'

    if len(fusers) > 0:
        send_messages_big(chat_id, text=fuckupusersReport)

def rade():
    tz = config.SERVER_MSK_DIFF
    now_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
    
    # 497065022 goat['chat'] –î–∂—É
    # goat['chat']

    logger.info('check rade time: now ' + str(now_date))
    
    if now_date.day == 28 and now_date.month == 12 and now_date.hour == 0 and now_date.minute in (0,1,2,3,4,5,6,7,8,9, 38,39,40) and now_date.second < 15:
        for goat in getSetting('GOATS_BANDS'):
            bot.send_message(goat['chat'], text='–° –Ω–æ–≤—ã–º –≥–æ–¥–æ–º!')
            getSetting('STICKERS','NEW_YEAR')
            bot.send_sticker(497065022, random.sample(getSetting('STICKERS','NEW_YEAR'), 1)[0]['value']) 

    if now_date.hour in (0, 8, 16) and now_date.minute in (0, 30, 50) and now_date.second < 15:
        
        updateUser(None)
        for goat in getSetting('GOATS_BANDS'):
            if getPlanedRaidLocation(goat['name'], planRaid = True)['rade_location']:
                report = radeReport(goat, True)
                send_messages_big(goat['chat'], text=f'<b>{str(60-now_date.minute)}</b> –º–∏–Ω—É—Ç –¥–æ —Ä–µ–π–¥–∞!\n' + report)

    if now_date.hour in (1, 9, 17) and now_date.minute == 0 and now_date.second < 15:
        logger.info('Rade time now!')
        updateUser(None)
        for goat in getSetting('GOATS_BANDS'):
            if getPlanedRaidLocation(goat['name'], planRaid = False)['rade_location']:
                report = radeReport(goat)
                send_messages_big(goat['chat'], text='<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–π–¥–∞</b>\n' + report)
                saveRaidResult(goat)
                statistic(goat['name'])

        for goat in getSetting('GOATS_BANDS'):
            registered_users.update_many(
                {'band':{'$in':getGoatBands(goat.get('name'))}},
                { '$set': { 'raidlocation': None} }
            )
        updateUser(None)
        
def getPlanedRaidLocation(goatName: str, planRaid = True):
    tz = config.SERVER_MSK_DIFF
    raid_date = datetime.now() + timedelta(seconds=tz.second, minutes=tz.minute, hours=tz.hour)
    hour = raid_date.hour

    if planRaid and raid_date.hour >= 17:
        raid_date = raid_date + timedelta(days=1)

    if raid_date.hour >=1 and raid_date.hour <9:
        hour = 9
        if not planRaid:
            hour = 1
    elif raid_date.hour >=9 and raid_date.hour <17:
        hour = 17
        if not planRaid:
            hour = 9
    if raid_date.hour >=17 or raid_date.hour <1:
        hour = 1
        if not planRaid:
            hour = 17

    raidNone = {}
    raidNone.update({'rade_date': (raid_date.replace(hour=hour, minute=0, second=0, microsecond=0)).timestamp()})
    raidNone.update({'rade_location': None})
    raidNone.update({'rade_text': None})

    for raid in plan_raids.find({
                                '$and' : 
                                [
                                    {
                                        'rade_date': {
                                        '$gte': (raid_date.replace(hour=0, minute=0, second=0, microsecond=0)).timestamp(),
                                        '$lt': (raid_date.replace(hour=23, minute=59, second=59, microsecond=0)).timestamp(),
                                        }},
                                    {
                                        'goat': goatName
                                    }
                                ]
                            }):
        if datetime.fromtimestamp(raid.get('rade_date')).hour == hour:
            return raid
    return raidNone

def saveRaidResult(goat):
    logger.info(f"saveRaidResult : {goat.get('name')}")
    raid = getPlanedRaidLocation(goat['name'], planRaid=False)
    location = raid.get('rade_location')
    raiddate = raid.get('rade_date')

    for band in goat.get('bands'):
        for user in list(USERS_ARR):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –±–∞–Ω–¥–∞–º
            if user.getBand() and user.getBand() == band.get('name'):
                row = {}
                row.update({'date': raiddate})
                row.update({'login': user.getLogin()})
                row.update({'band': band.get('name')})
                row.update({'goat': goat.get('name')})
                row.update({'planed_location': location})
                row.update({'planed_location_text': raid.get('rade_text')})
                row.update({'user_location': None})
                row.update({'on_raid': False})
                row.update({'on_planed_location': False})
                if user.getRaidLocation():
                    row.update({'on_raid': True}) 
                    row.update({'user_location': user.getRaidLocation()})    
                    if location and user.getRaidLocation() == location:
                        row.update({'planed_location': True})
                newvalues = { "$set": row }
                result = report_raids.update_one({"login": f"{user.getLogin()}", 'date': raiddate}, newvalues)
                if result.matched_count < 1:
                    report_raids.insert_one(row)

def radeReport(goat, ping=False):

    raidInfo = getPlanedRaidLocation(goat.get('name'))
    planed_raid_location = raidInfo['rade_location']
    planed_raid_location_text = raidInfo['rade_text']
    goat_report = {}
    goat_report.update({'name': goat.get('name')})
    goat_report.update({'chat': goat.get('chat')})
    goat_report.update({'bands': []})

    for band in goat.get('bands'):
        band_arr = {}
        band_arr.update({'name': band.get('name')})
        band_arr.update({'weight_all': 0})
        band_arr.update({'weight_on_rade': 0})
        band_arr.update({'counter_all': 0})
        band_arr.update({'counter_on_rade': 0})
        band_arr.update({'usersonrade': []})
        band_arr.update({'usersoffrade': []})


        for user in list(USERS_ARR):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –∫–æ–∑–ª–∞–º
            if user.getBand() and user.getBand() == band.get('name'):
                band_arr.update({'weight_all': band_arr.get('weight_all') + user.getRaidWeight()})
                band_arr.update({'counter_all': band_arr.get('counter_all') + 1}) 
                if user.getRaidLocation():
                    band_arr.update({'weight_on_rade': band_arr.get('weight_on_rade') + user.getRaidWeight()})
                    band_arr.update({'counter_on_rade': band_arr.get('counter_on_rade') + 1}) 
                    band_arr.get('usersonrade').append(user)
                else:
                    band_arr.get('usersoffrade').append(user)
        goat_report.get('bands').append(band_arr)

    report = f'üêê<b>{goat_report.get("name")}</b>\n'
    if planed_raid_location_text:
        report = report + f'{planed_raid_location_text}\n'
    report = report + '\n'
    
    for bands in goat_report.get('bands'):
        report = report + f'ü§ü<b>{bands.get("name")}</b>\n'
        if bands.get("weight_all") > 0:
            report = report + f'üë§{bands.get("counter_on_rade")}/{bands.get("counter_all")} üèãÔ∏è‚Äç‚ôÇÔ∏è{bands.get("weight_on_rade")}/{bands.get("weight_all")} <b>{str(int(bands.get("weight_on_rade")/bands.get("weight_all")*100))}</b>%\n'
        else:
            report = report + f'üë§{bands.get("counter_on_rade")}/{bands.get("counter_all")} üèãÔ∏è‚Äç‚ôÇÔ∏è<b>0</b>%\n'
        report = report + f'\n'

        if len(bands.get("usersonrade")):
            report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–Ω–∞ —Ä–µ–π–¥–µ</b>:\n'
            counter = 0            
            for u in bands.get("usersonrade"):
                counter = counter + 1
                location = str(u.getRaidLocation())
                if u.getRaidLocation() == 1:
                    location = '?'
                if planed_raid_location:
                    if planed_raid_location == u.getRaidLocation():
                        location = '‚úîÔ∏è' + location
                report = report + f'{counter}. {u.getName()} üìç{location}–∫–º\n'
            report = report + f'\n'
        if ping:
            if planed_raid_location:
                ping_on_reade(bands.get("usersoffrade"), goat['chat'] )
    return report

def statistic(goatName: str):
    report = f'üêê<b>{goatName}</b>\n\n'
    report = report + f'üßò‚Äç‚ôÇÔ∏è <b>–†–µ–π–¥–µ—Ä—ã</b>:\n'

    setting = getSetting('REPORTS','RAIDS')
    from_date = setting.get('from_date')
    to_date = setting.get('to_date')

    if (not from_date):
        from_date = (datetime(2019, 1, 1)).timestamp() 

    if (not to_date):
        to_date = (datetime.now() + timedelta(minutes=180)).timestamp()

    dresult = report_raids.distinct('date', {"$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]})

    raid_counter = len(dresult)
    report =  f'üëä<b>{raid_counter}</b> —Ä–µ–π–¥–æ–≤\n' + report

    dresult = report_raids.aggregate([
        {   "$match": {
                "$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "on_raid": True
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]
            }
        }, 
        {   
            "$group": 
                {
                    "_id": "$login",
                    "count": 
                        {
                            "$sum": 1
                        }
                }
        },    
        {   
            "$sort" : { "count" : -1 } 
        }
    ])
    
    report_boss = ''
    for d in dresult:
        name = d.get("_id")
        user = getUserByLogin(name)
        count = d.get("count")

        if isGoatBoss(name):
            report_boss = f'üòé –Ω–∞—à –±–æ—Å—Å <b>{user.getName()}</b> –ø–æ—Å–µ—Ç–∏–ª —Ä–µ–π–¥—ã {count} —Ä–∞–∑. –°–∫–∞–∂–∏—Ç–µ –∑–∞ —ç—Ç–æ –µ–º—É "–°–ø–∞—Å–∏–±–æ!" –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ.\n'
            continue
        
        if user:
            name = user.getName().strip()
        report = report + f'{count} {name}\n'


    dresult = report_raids.aggregate([
        {   "$match": {
                "$and" : [
                    { 
                        "date": {
                            '$gte': from_date,
                            '$lt': to_date
                                }       
                    },
                    {
                        "band": {'$in': getGoatBands(goatName)}   
                    },
                    {
                        "on_raid": False
                    },
                    {
                        "planed_location": {'$ne':None}   
                    }
                ]
            }
        }, 
        {   
            "$group": 
                {
                    "_id": "$login",
                    "count": 
                        {
                            "$sum": 1
                        }
                }
        },    
        {   
            "$sort" : { "count" : -1 } 
        }
    ])
    
    bad_raid_counter = raid_counter
    hrenraid = []

    report = report + f'\nü§¨ <b>–•—Ä–µ–Ω–µ–π–¥–µ—Ä—ã</b>:\n'
    j = 0
    for d in dresult:
        name = d.get("_id")
        count = d.get("count")
        if j == 0:
            bad_raid_counter = count

        if isGoatBoss(name):
            report_boss = report_boss + f'–ï—â–µ –Ω–∞—à –±–æ—Å—Å –Ω–µ –±—ã–ª –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–π–¥–∞—Ö, –ø–æ—Ç–æ–º—É —á—Ç–æ –±—ã–ª –∑—è–Ω—è—Ç –ø–µ—Ä–µ–ø–∏—Å—å—é —Ö—Ä–µ–Ω–µ–π–¥–µ—Ä–æ–≤, –∑–∞–±–∏–≤—à–∏—Ö –Ω–∞ –æ–±—â–∏–µ —Ü–µ–ª–∏! –≠—Ç–æ, –Ω–∞–¥–µ—é—Å—å, –≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ?!\n'
            report_boss = '\n'+report_boss
            continue
        user = getUserByLogin(name)
        login = name
        if user:
            name = user.getName().strip()

        if bad_raid_counter == count:
            hrenraid.append(f'@{login} {name}\n')
        else:
            report = report + f'{count} {name} \n'
        j = j + 1

    hrenraid_report = ''
    i = 0
    for s in hrenraid:
        if i == 0:
            hrenraid_report = f'\nüö™ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã—Ö–æ–¥</b>:\n'    
        
        hrenraid_report = hrenraid_report + s;
        i = i + 1

    report = report + hrenraid_report + report_boss + f'\n' 
    report = report + '‚è∞ c ' + time.strftime("%d-%m-%Y", time.gmtime(from_date)) + ' –ø–æ ' + time.strftime("%d-%m-%Y %H:%M:%S", time.gmtime(to_date))

    return report                                 

# 20 secund
def fight_job():
    while True:
        fight()
        time.sleep(20)

# 5 secund
def pending_job():
    while True:
        pending_message()
        time.sleep(5)

# 15 secund
def rade_job():
    while True:
        rade()
        time.sleep(15)

def main_loop():
    if (config.POLLING):
        bot.remove_webhook()
        bot.polling(none_stop=True)
        while 1:
            time.sleep(3)
    else:
        app = web.Application()
        # Process webhook calls
        async def handle(request):
            request_body_dict = await request.json()
            update = telebot.types.Update.de_json(request_body_dict)
            bot.process_new_updates([update])
            return web.Response()


        app.router.add_post('/', handle)
        
        # Remove webhook, it fails sometimes the set if there is a previous webhook
        bot.remove_webhook()
        # Set webhook
        bot.set_webhook(url=f"https://{config.WEBHOOK_HOST}/bot/{str(config.WEBHOOK_PORT)[3:4]}")
        # Build ssl context
        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
        context.load_cert_chain(config.WEBHOOK_SSL_CERT, config.WEBHOOK_SSL_PRIV)
        # Start aiohttp server
        web.run_app(
            app,
            host=config.WEBHOOK_LISTEN,
            port=config.WEBHOOK_PORT,
            ssl_context=context
        )

if __name__ == '__main__': 
    try:
        proccess = Process(target=fight_job, args=())
        proccess.start() # Start new thread

        proccessPending_messages = Process(target=pending_job, args=())
        proccessPending_messages.start() # Start new thread

        proccessRade = Process(target=rade_job, args=())
        proccessRade.start() # Start new thread 

        main_loop()      
    except KeyboardInterrupt:
        print('\nExiting by user request.\n')
        sys.exit(0)